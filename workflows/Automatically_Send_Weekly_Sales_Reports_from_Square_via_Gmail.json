{
  "meta": {
    "instanceId": "d6e2f2f655b1125bbcac14a4cac6d2e46c7a150e927f85fc96fdca1a6dc39e0e",
    "templateCredsSetupCompleted": true
  },
  "nodes": [
    {
      "id": "3b92fca3-0835-46e4-b642-61edb8788644",
      "name": "Get Square Locations",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1312,
        544
      ],
      "parameters": {
        "url": "https://connect.squareup.com/v2/locations",
        "options": {},
        "sendHeaders": true,
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "n1GRrdbh899dbLYB",
          "name": "Square Header Auth"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "ab8b4b48-6723-439f-9800-17db32b701cd",
      "name": "Turn Locations Into List",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        1536,
        544
      ],
      "parameters": {
        "include": "selectedOtherFields",
        "options": {},
        "fieldToSplitOut": "locations",
        "fieldsToInclude": "id"
      },
      "typeVersion": 1
    },
    {
      "id": "67c3641a-1081-4918-b165-ca97db909844",
      "name": "Ignore Locations w/o Sales",
      "type": "n8n-nodes-base.if",
      "position": [
        2032,
        544
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "498f5fab-6930-4e89-9fbe-0d67671da8d2",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.orders }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "fa6cf239-5408-400b-8eb4-ca803c9769be",
      "name": "Get Sales from Square",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1792,
        544
      ],
      "parameters": {
        "url": "https://connect.squareup.com/v2/orders/search",
        "method": "POST",
        "options": {},
        "jsonBody": "={\n  \"location_ids\": [\"{{ $json.locations.id }}\"],\n  \"query\": {\n    \"filter\": {\n      \"state_filter\": {\n        \"states\": [\"COMPLETED\"]\n      },\n      \"date_time_filter\": {\n        \"created_at\": {\n          \"start_at\": \"{{ $('Get Dates From Last Week').item.json.date }}T00:00:00-05:00\",\n          \"end_at\": \"{{ $('Get Dates From Last Week').item.json.date }}T23:59:59-05:00\"\n        }\n      }\n    }\n  },\n  \"limit\": 1000,\n  \"return_entries\": false\n}",
        "sendBody": true,
        "sendHeaders": true,
        "specifyBody": "json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "n1GRrdbh899dbLYB",
          "name": "Square Header Auth"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "06f70946-ac18-4e3c-8f19-8fba4b6065f0",
      "name": "Compile Sales Reports",
      "type": "n8n-nodes-base.code",
      "position": [
        2320,
        544
      ],
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Date and Location Metadata\nconst date = $('Get Dates From Last Week').item.json.date;\nconst location_id = $json.orders[0].location_id || null;\nconst location_name = $('Get Square Locations').item.json.locations.find(locations => locations.id === location_id)?.name;\n\n// Our Result Variables\nlet total_money = 0;\nlet total_tax = 0;\nlet total_discount = 0;\nlet total_tip = 0;\nlet total_returns = 0;\nlet cash_rounding = 0;\n\nlet cash_tender = 0;\nlet card_tender = 0;\nlet gift_card_tender = 0;\nlet other_tender = 0;\nlet fees = 0;\n\n// Loop Through Each Order\nfor (const sale of $json.orders) {\n\n    // Add the sales, taxes, discounts and tips\n    total_money += sale.total_money?.amount || 0;\n    total_tax += sale.total_tax_money?.amount || 0;\n    total_discount += -(sale.total_discount_money?.amount || 0);\n    total_tip += sale.total_tip_money?.amount || 0;\n    if (sale.rounding_adjustment) {\n      cash_rounding += sale.rounding_adjustment.amount_money?.amount || 0;\n    }\n\n  \n    if (sale.return_amounts) {\n      // If there are returns, subtract from sales totals and add to return amount total\n      total_money -= sale.return_amounts?.total_money?.amount || 0;\n      total_tax -= sale.return_amounts?.tax_money?.amount || 0;\n      total_discount -= sale.return_amounts?.discount_money?.amount || 0;\n      total_tip -= sale.return_amounts?.tip_money?.amount || 0;\n  \n      total_returns += -(sale.return_amounts?.total_money?.amount || 0);\n      total_returns -= -(sale.return_amounts?.tax_money?.amount || 0);\n      total_returns -= -(sale.return_amounts?.tip_money?.amount || 0);\n      total_returns -= -(sale.return_amounts?.discount_money?.amount || 0);\n  \n      // If an array of refunds is provided\n      for (const refund of sale.refunds || []) {\n        const transaction_id = refund.transaction_id;\n      \n        // Look for the original sale this refund refers to\n        const original_sale = $json.orders.find(original =>\n          original.id && transaction_id && original.id.includes(transaction_id)\n        );\n      \n        if (original_sale) {\n          if (original_sale.rounding_adjustment) {\n            const amount = original_sale.rounding_adjustment.amount_money?.amount || 0;\n            cash_rounding -= amount;\n            total_returns += amount;\n          }\n      \n          if (original_sale.tenders) {\n            for (const tender of original_sale.tenders) {\n              if (tender.id === refund.tender_id) {\n                const amount = refund.amount_money?.amount || 0;\n                if (tender.type === 'CARD') card_tender -= amount;\n                else if (tender.type === 'CASH') cash_tender -= amount;\n                else if (tender.type === 'SQUARE_GIFT_CARD') gift_card_tender -= amount;\n                else other_tender -= amount;\n      \n                if (refund.processing_fee_money && tender.id === refund.tender_id) {\n                  fees -= refund.processing_fee_money.amount || 0;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  \n    if (sale.tenders) {\n      for (const tender of sale.tenders) {\n        const amount = tender.amount_money?.amount || 0;\n        if (tender.type === 'CARD') card_tender += amount;\n        else if (tender.type === 'CASH') cash_tender += amount;\n        else if (tender.type === 'SQUARE_GIFT_CARD') gift_card_tender += amount;\n        else other_tender += amount;\n  \n        if (tender.processing_fee_money) {\n          fees -= tender.processing_fee_money.amount || 0;\n        }\n      }\n    }\n  \n}\n\n// Final computed values\nconst net_sales = total_money - total_tip - total_tax - cash_rounding;\nconst gross_sales = net_sales - total_discount - total_returns;\nconst net_total = cash_tender + card_tender + gift_card_tender + other_tender + fees;\n\nreturn {\n  json: {\n    date,\n    location_id,\n    location_name,\n    gross_sales: gross_sales / 100.0,\n    total_returns: total_returns / 100.0,\n    total_discount: total_discount / 100.0,\n    net_sales: net_sales / 100.0,\n    total_tax: total_tax / 100.0,\n    total_tip: total_tip / 100.0,\n    cash_rounding: cash_rounding / 100.0,\n    total_payments_collected: total_money / 100.0,\n    cash: cash_tender / 100.0,\n    card: card_tender / 100.0,\n    gift_card: gift_card_tender / 100.0,\n    other: other_tender / 100.0,\n    fees: fees / 100.0,\n    net_total: net_total / 100.0,\n  }\n};"
      },
      "typeVersion": 2
    },
    {
      "id": "7d44e945-bbce-4279-a82b-78641221108f",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        704,
        352
      ],
      "parameters": {
        "color": 5,
        "height": 420,
        "content": "## Trigger  \n- This workflow runs every Monday at 8:00 AM.  \n- Each week, it pulls the previous week's sales data from Square.\n"
      },
      "typeVersion": 1
    },
    {
      "id": "d12b9656-cb3a-4cd5-824e-aa450747f351",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1232,
        352
      ],
      "parameters": {
        "color": 5,
        "width": 460,
        "height": 420,
        "content": "## Get Square Locations and Process Each One Separately  \n- This HTTP node connects to the Square Locations API to fetch all your locations.\n"
      },
      "typeVersion": 1
    },
    {
      "id": "6963de7f-dfdd-46cb-8c75-fd825f7af9c2",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1712,
        352
      ],
      "parameters": {
        "color": 5,
        "height": 420,
        "content": "## Get Sales from Square  \n- This HTTP node retrieves all orders for the given location on the specified date."
      },
      "typeVersion": 1
    },
    {
      "id": "b186ff01-ad7c-4b82-89d7-4c11a09e2062",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2256,
        352
      ],
      "parameters": {
        "color": 5,
        "height": 420,
        "content": "## Compile a Report for Each Location  \n- This code node calculates totals for each location.  \n- Please ensure the numbers match EXACTLY with the Square Sales Summary Dashboard.\n"
      },
      "typeVersion": 1
    },
    {
      "id": "4682170b-f683-49a4-b7b3-7c51e93479c5",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        784,
        544
      ],
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1
              ],
              "triggerAtHour": 8
            }
          ]
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "8155eed8-b45d-4bbe-9b00-222aa1fd58f0",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2512,
        352
      ],
      "parameters": {
        "color": 5,
        "height": 420,
        "content": "## Convert the Square Sales Summary into a CSV File \n"
      },
      "typeVersion": 1
    },
    {
      "id": "50b292ea-d238-4444-8cf1-a8ef7d54460c",
      "name": "Convert Sales Summary to CSV File",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        2576,
        544
      ],
      "parameters": {
        "options": {
          "fileName": "=sales_report_{{ $('Schedule Trigger').item.json.timestamp }}.csv"
        },
        "binaryPropertyName": "sales_report"
      },
      "typeVersion": 1.1
    },
    {
      "id": "1e277f94-a5b6-4acd-b26c-f6122c21159d",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2784,
        352
      ],
      "parameters": {
        "color": 5,
        "height": 420,
        "content": "## Send the Report to the Finance Team / Manager"
      },
      "typeVersion": 1
    },
    {
      "id": "d30dfd0e-8546-485c-abb5-6a0f833442e5",
      "name": "Send Report",
      "type": "n8n-nodes-base.gmail",
      "position": [
        2864,
        544
      ],
      "webhookId": "a1026d0b-b5a8-4657-955f-975f7c1f307d",
      "parameters": {
        "sendTo": "example@user.com",
        "message": "=<p>Hello User,</p><p>Please see the attached report containing last week's sales!</p><p>Best,<br> An Efficient Person</p>",
        "options": {
          "attachmentsUi": {
            "attachmentsBinary": [
              {
                "property": "sales_report"
              }
            ]
          }
        },
        "subject": "=Your Square Sales Report for {{ $('Schedule Trigger').item.json['Readable date'].split(',')[0] }}"
      },
      "credentials": {
        "gmailOAuth2": {
          "id": "x5LsvRUYpInxYmcG",
          "name": "Rosh's Personal Email"
        }
      },
      "typeVersion": 2.1
    },
    {
      "id": "77b36188-bb4d-4c0c-9aba-a723287190c5",
      "name": "Get Dates From Last Week",
      "type": "n8n-nodes-base.code",
      "position": [
        1040,
        544
      ],
      "parameters": {
        "jsCode": "const inputDate = new Date($input.first().json.timestamp); // Input date\nconst daysBefore = 7;\nconst output = [];\n\nfor (let i = daysBefore; i > 0; i--) {\n  const d = new Date(inputDate);\n  d.setDate(inputDate.getDate() - i);\n\n  const formatted = d.toISOString().split('T')[0]; // \"YYYY-MM-DD\"\n\n  output.push({ json: { date: formatted } });\n}\n\nreturn output;\n"
      },
      "typeVersion": 2
    },
    {
      "id": "18ef8f36-73aa-4ea8-a9a7-2875f35d0778",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -64,
        -32
      ],
      "parameters": {
        "width": 736,
        "height": 1440,
        "content": "## Automatically Send Weekly Sales Reports from Square via Gmail\n\n## What It Does  \nThis workflow automatically connects to the Square API and generates a **weekly** sales summary report for all your Square locations. The report matches the figures displayed in **Square Dashboard > Reports > Sales Summary**.\n\nIt's designed to run weekly and pull the **previous week\u2019s** sales into a CSV file, which is then sent to a manager/finance team for analysis.\n\nThis workflow builds on my previous template, which allows users to automatically pull data from the Square API into n8n for processing. (See here: https://n8n.io/workflows/6358)\n\n## Prerequisites  \nTo use this workflow, you'll need:\n- A Square API credential (configured as a Header Auth credential)\n- A Microsoft Outlook credential\n\n## How to Set Up Square Credentials:  \n- Go to **Credentials > Create New**  \n- Choose **Header Auth**  \n- Set the **Name** to `Authorization`  \n- Set the **Value** to your Square Access Token (e.g., `Bearer <your-api-key>`)\n\n## How It Works  \n1. **Trigger:** The workflow runs every **Monday at 8:00 AM**  \n2. **Fetch Locations:** An HTTP request retrieves all Square locations linked to your account  \n3. **Fetch Orders:** For each location, an HTTP request pulls completed orders for the **previous week (e.g., Monday to Sunday)**  \n4. **Filter Empty Locations:** Locations with no sales are ignored  \n5. **Aggregate Sales Data:** A Code node processes the order data and produces a summary identical to Square\u2019s built-in Sales Summary report  \n6. **Create CSV File:** A CSV file is created containing the relevant data  \n7. **Send Email:** An email is sent to the chosen third party  \n\n## Example Use Cases  \n- Automatically send weekly Square sales data to management to improve the quality of planning and scheduling decisions  \n- Automatically send data to an external third party, such as a landlord or agent, who is paid via commission  \n- Automatically send data to a bookkeeper for entry into QuickBooks  \n\n## How to Use  \n- Configure both HTTP Request nodes to use your Square API credential  \n- Set the workflow to **Active** so it runs automatically  \n- Enter the email address of the person you want to send the report to and update the message body  \n- If you want to remove the n8n attribution, you can do so in the last node  \n\n## Customization Options  \n- Add pagination to handle locations with more than 1,000 orders per week\n- Adjust the date filters in the HTTP node to cover a 7-day period (e.g., use Luxon or JavaScript to calculate `start_date` and `end_date`)\n\n## Why It's Useful  \nThis workflow saves time, reduces manual report pulling from Square, and enables smarter automation around sales data \u2014 whether for operations, finance, or performance monitoring.\n"
      },
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "connections": {
    "Send Report": {
      "main": [
        []
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Dates From Last Week",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Square Locations": {
      "main": [
        [
          {
            "node": "Turn Locations Into List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compile Sales Reports": {
      "main": [
        [
          {
            "node": "Convert Sales Summary to CSV File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Sales from Square": {
      "main": [
        [
          {
            "node": "Ignore Locations w/o Sales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Dates From Last Week": {
      "main": [
        [
          {
            "node": "Get Square Locations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turn Locations Into List": {
      "main": [
        [
          {
            "node": "Get Sales from Square",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ignore Locations w/o Sales": {
      "main": [
        [
          {
            "node": "Compile Sales Reports",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Sales Summary to CSV File": {
      "main": [
        [
          {
            "node": "Send Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "_metadata": {
    "name": "Automatically Send Weekly Sales Reports from Square via Gmail",
    "used_count": 5,
    "popularity_score": 25,
    "source_url": "https://n8n.io/workflows/7088",
    "scraped_at": "2025-08-17 18:28:11"
  }
}