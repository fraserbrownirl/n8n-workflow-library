{
  "meta": {
    "instanceId": "d73282515b90623d4a8783919a2d772c706425d649e1512792f37ac51e07e4a8",
    "templateCredsSetupCompleted": true
  },
  "nodes": [
    {
      "id": "0de72f0f-b1d2-47e2-9121-7c5ad9bb782f",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "position": [
        -1560,
        -500
      ],
      "parameters": {
        "simple": false,
        "filters": {
          "q": "(has:attachment OR has:youtube OR has:drive OR has:document OR has:spreadsheet OR has:presentation)",
          "labelIds": [
            "IMPORTANT",
            "INBOX",
            "CATEGORY_PERSONAL"
          ],
          "readStatus": "both"
        },
        "options": {},
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        }
      },
      "credentials": {
        "gmailOAuth2": {
          "id": "NzpNapV7kVmG3QIS",
          "name": "Gmail account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "9db6fe34-6d37-472c-af4e-acc81640cc98",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -1300,
        540
      ],
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtMinute": 5
            }
          ]
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "5f082361-efb3-4385-90d0-248a018f83e3",
      "name": "Gmail",
      "type": "n8n-nodes-base.gmail",
      "position": [
        -1320,
        -500
      ],
      "webhookId": "3da8fcc6-1270-44a9-ab96-1043c053371a",
      "parameters": {
        "simple": false,
        "options": {
          "downloadAttachments": true
        },
        "messageId": "={{ $json.id }}",
        "operation": "get"
      },
      "credentials": {
        "gmailOAuth2": {
          "id": "NzpNapV7kVmG3QIS",
          "name": "Gmail account"
        }
      },
      "typeVersion": 2.1
    },
    {
      "id": "807f7bbd-f4c0-48bf-b46b-dd43ea6462f0",
      "name": "Google Drive",
      "type": "n8n-nodes-base.googleDrive",
      "onError": "continueRegularOutput",
      "position": [
        20,
        -640
      ],
      "parameters": {
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "options": {},
        "folderId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $json['folder url'] }}"
        },
        "inputDataFieldName": "=attachment_0"
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "896ecb02-212f-4741-bc43-f17e5d8454b9",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -420,
        -780
      ],
      "parameters": {
        "color": 6,
        "width": 280,
        "height": 880,
        "content": "## Conditional Routing\n\n\n** it matches the regex and identifies whether it is a google drive link or normal file"
      },
      "typeVersion": 1
    },
    {
      "id": "0adc3d08-29bc-40f4-b2fc-ccb59313cef5",
      "name": "Text Classifier",
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "position": [
        -1100,
        -500
      ],
      "parameters": {
        "options": {
          "fallback": "discard"
        },
        "inputText": "=Please classify the following email to determine if it suggests a specific category\nDaily Sales , Address or customer_info\n\nSubject :{{ $json.subject }} \ncontent : {{ $json.text }}\n",
        "categories": {
          "categories": [
            {
              "category": "Daily Sales",
              "description": "Email is suggesting it is sending sales related file as Daily Sales report"
            },
            {
              "category": "Address",
              "description": "Email is suggesting the file is related to address of the customers"
            },
            {
              "category": "customer_info",
              "description": "Email is suggesting the file is related to information regarding customers"
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "c980811e-e6f2-4306-af9d-db3dbe31f516",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -1060,
        -280
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "OizdHUANhz9NIHyd",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "7b4b66df-a51b-48cc-b175-c94ca80f2cd1",
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "position": [
        -360,
        -600
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "or",
          "conditions": [
            {
              "id": "027fd190-9099-4cc5-885e-e1c9f718ab42",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.id }}",
              "rightValue": ""
            },
            {
              "id": "0eb6929b-1684-40c4-b3c4-683bb8ff122c",
              "operator": {
                "type": "string",
                "operation": "regex"
              },
              "leftValue": "",
              "rightValue": "https:\\/\\/(?:drive\\.google\\.com\\/[^\\s]+|docs\\.google\\.com\\/spreadsheets\\/[^\\s]+)"
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "34d473e6-528c-4489-8f53-d3192379cee6",
      "name": "If2",
      "type": "n8n-nodes-base.if",
      "position": [
        -360,
        -400
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "758f8dff-2d88-42a8-8de9-45ed6a1c7650",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.id }}",
              "rightValue": ""
            },
            {
              "id": "5a7bfc37-134f-431b-a5e4-ea6b9d452708",
              "operator": {
                "type": "string",
                "operation": "regex"
              },
              "leftValue": "={{ $json.text }}",
              "rightValue": "https:\\/\\/(?:drive\\.google\\.com\\/[^\\s]+|docs\\.google\\.com\\/spreadsheets\\/[^\\s]+)"
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "d12a1106-23b1-47f0-bb64-a6a6d7b48d36",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -60,
        -780
      ],
      "parameters": {
        "color": 4,
        "width": 280,
        "height": 880,
        "content": "## File upload \nIf it is a file upload if it is a drive link copy that file and upload to the specific folder\n"
      },
      "typeVersion": 1
    },
    {
      "id": "892468c6-6b2c-4b08-a797-6fd80a90b578",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1620,
        -640
      ],
      "parameters": {
        "color": 5,
        "width": 800,
        "height": 500,
        "content": "## Email Trigger system to classify specific mail types\n"
      },
      "typeVersion": 1
    },
    {
      "id": "ed16a1f0-9114-41a1-a9d3-64f549c4fd82",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -780,
        -780
      ],
      "parameters": {
        "width": 320,
        "height": 880,
        "content": "## Folders Link\n"
      },
      "typeVersion": 1
    },
    {
      "id": "37200ac6-1df8-4f5d-9907-c14f04966b0c",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2140,
        -600
      ],
      "parameters": {
        "color": 3,
        "width": 400,
        "height": 460,
        "content": "## Data Upload to Designated folders\n\n\n\n* Whenever a specific mail hits your inbox\n  it will classify the mail types routes the attachment link (attachment sent as a drive link ) will be  uploaded to its specified destination."
      },
      "typeVersion": 1
    },
    {
      "id": "17f0444c-ee85-45e2-a8a7-ed45532c9c14",
      "name": "Google Drive1",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        -860,
        380
      ],
      "parameters": {
        "filter": {
          "folderId": {
            "__rl": true,
            "mode": "url",
            "value": "={{ $json[\"Daily Sales\"] }}"
          }
        },
        "options": {},
        "resource": "fileFolder",
        "returnAll": true
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "251c918e-d86e-46d8-864b-16d307d139ec",
      "name": "Google Drive2",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        -860,
        540
      ],
      "parameters": {
        "filter": {
          "folderId": {
            "__rl": true,
            "mode": "url",
            "value": "={{ $json.Address }}"
          },
          "whatToSearch": "all"
        },
        "options": {},
        "resource": "fileFolder",
        "returnAll": true
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "972db37a-9fd1-47f6-af08-7f07f3ed318f",
      "name": "Google Drive3",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        -460,
        380
      ],
      "parameters": {
        "fileId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.id }}"
        },
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "1rkuGB6W8pjIkU0dx4X73trjSjGALCizK",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1rkuGB6W8pjIkU0dx4X73trjSjGALCizK",
          "cachedResultName": "N8N_LOGS"
        },
        "operation": "move"
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "adb37b79-efef-4056-8022-34cfa56065ee",
      "name": "Google Drive4",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        -460,
        540
      ],
      "parameters": {
        "fileId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.id }}"
        },
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "16uV07g17mdwSj8XM6nYJLNenP2MXIrSp",
          "cachedResultUrl": "https://drive.google.com/drive/folders/16uV07g17mdwSj8XM6nYJLNenP2MXIrSp",
          "cachedResultName": "n8n_logs"
        },
        "operation": "move"
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "e850a716-626c-40c0-b05f-d0dfdb972095",
      "name": "Google Drive5",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        -860,
        740
      ],
      "parameters": {
        "filter": {
          "folderId": {
            "__rl": true,
            "mode": "url",
            "value": "={{ $json.customer_info }}"
          },
          "whatToSearch": "all"
        },
        "options": {},
        "resource": "fileFolder",
        "returnAll": true
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "7b71d7d4-c89a-4ca5-a66b-9d58f2da35d4",
      "name": "Google Drive6",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        -460,
        740
      ],
      "parameters": {
        "fileId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.id }}"
        },
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "16uV07g17mdwSj8XM6nYJLNenP2MXIrSp",
          "cachedResultUrl": "https://drive.google.com/drive/folders/16uV07g17mdwSj8XM6nYJLNenP2MXIrSp",
          "cachedResultName": "n8n_logs"
        },
        "operation": "move"
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "f69eac3c-2f2c-4d94-be0e-f03a08e98de8",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2120,
        320
      ],
      "parameters": {
        "color": 3,
        "width": 400,
        "height": 520,
        "content": "# Data Logger\n\n\n\n* Every day the schedule triggers the files to move from one folder to another and log files if it is not present file or today's file helps to keep the current records only.\n* You can set the trigger as it suits you"
      },
      "typeVersion": 1
    },
    {
      "id": "8d6adf2a-f1a9-40b3-830c-1cf1802ec148",
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -1580,
        2380
      ],
      "parameters": {
        "inputSource": "passthrough"
      },
      "typeVersion": 1.1
    },
    {
      "id": "1dca6be6-ff43-4202-bdc1-a1d5ba710b2c",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2040,
        2100
      ],
      "parameters": {
        "color": 3,
        "width": 400,
        "height": 640,
        "content": "## Intent Routing and File link Aggregation\n\n\n* This section routes the intent of the user based on the task for specific operation.\n\n* this can be extended for extra capabilites.\n"
      },
      "typeVersion": 1
    },
    {
      "id": "1bc1fee2-c256-4d52-8e2a-1981c0ea3bea",
      "name": "Google Drive10",
      "type": "n8n-nodes-base.googleDrive",
      "onError": "continueRegularOutput",
      "position": [
        20,
        -260
      ],
      "parameters": {
        "name": "url_copy",
        "fileId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.file_id }}"
        },
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "options": {},
        "folderId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $('Address').item.json['folder url'] }}"
        },
        "operation": "copy",
        "sameFolder": false
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "a9978123-27d7-4eb6-854c-615abfe0d659",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "position": [
        20,
        -460
      ],
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n\n# Get the text input from previous node\ntext = items[0]['json']['text']  # Change 'message' to your actual key\n\n# Regex to find the file ID from Google Sheets URL\nmatch = re.search(r\"https:\\/\\/docs\\.google\\.com\\/spreadsheets\\/d\\/([a-zA-Z0-9_-]+)\", text)\n\nif match:\n    file_id = match.group(1)\n    return [{\n        \"json\": {\n            \"file_id\": file_id\n        }\n    }]\nelse:\n    return [{\n        \"json\": {\n            \"error\": \"No file ID found in text\"\n        }\n    }]\n"
      },
      "typeVersion": 2
    },
    {
      "id": "743f8cec-68fb-4551-a099-5b47e3e1659b",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        -340,
        -200
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "758f8dff-2d88-42a8-8de9-45ed6a1c7650",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.id }}",
              "rightValue": ""
            },
            {
              "id": "5a7bfc37-134f-431b-a5e4-ea6b9d452708",
              "operator": {
                "type": "string",
                "operation": "regex"
              },
              "leftValue": "={{ $json.text }}",
              "rightValue": "https:\\/\\/(?:drive\\.google\\.com\\/[^\\s]+|docs\\.google\\.com\\/spreadsheets\\/[^\\s]+)"
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "7f31723e-b3df-4c4b-881f-54c79fb4ec75",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -60,
        1980
      ],
      "parameters": {
        "color": 6,
        "width": 280,
        "height": 800,
        "content": "## Predefined Folder Links\n"
      },
      "typeVersion": 1
    },
    {
      "id": "e334e896-445f-4935-a406-938be95e8f4c",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1180,
        960
      ],
      "parameters": {
        "color": 5,
        "width": 1920,
        "height": 1660,
        "content": "\n"
      },
      "typeVersion": 1
    },
    {
      "id": "3df75ffc-0260-48df-9f75-fdab6a0f7acf",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        -800,
        1140
      ],
      "webhookId": "193de4a8-9f53-4e02-af09-7995a85949ee",
      "parameters": {
        "public": true,
        "options": {
          "customCss": "=:root {\n  /* Colors */\n  --chat--color-primary: #ff4f5e;\n  --chat--color-primary-shade-50: #e64553;\n  --chat--color-primary-shade-100: #cc3d4a;\n  --chat--color-secondary: #14b8a6;\n  --chat--color-secondary-shade-50: #0d9488;\n  --chat--color-white: #ffffff;\n  --chat--color-light: #f9fafb;\n  --chat--color-light-shade-100: #e5e7eb;\n  --chat--color-dark: #111827;\n  --chat--color-disabled: #9ca3af;\n\n  --chat--spacing: 1rem;\n  --chat--border-radius: 0.75rem;\n  --chat--font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;\n\n  /* Header */\n  --chat--header--background: var(--chat--color-dark);\n  --chat--header--color: var(--chat--color-white);\n  --chat--heading--font-size: 1.5rem;\n  --chat--subtitle--font-size: 1rem;\n  --chat--subtitle--color: #cbd5e1;\n\n  /* Input Area */\n  --chat--input--font-size: 1rem;\n  --chat--input--padding: 0.75rem 1.25rem;\n  --chat--input--border: 1px solid var(--chat--color-light-shade-100);\n  --chat--input--border-radius: 9999px;\n  --chat--input--background: var(--chat--color-white);\n  --chat--input--text-color: var(--chat--color-dark);\n  --chat--input--border-active: 1px solid var(--chat--color-primary);\n  --chat--input--placeholder--font-size: 1rem;\n\n  /* Buttons */\n  --chat--send-button--background: var(--chat--color-primary);\n  --chat--send-button--color: var(--chat--color-white);\n  --chat--send-button--hover-bg: var(--chat--color-primary-shade-50);\n  --chat--file-button--color: var(--chat--color-secondary);\n  --chat--file-button--hover: var(--chat--color-secondary-shade-50);\n}\n\n/* Header styling */\n.chat-header {\n  background-color: var(--chat--header--background);\n  color: var(--chat--header--color);\n  padding: 1.5rem 2rem;\n}\n.chat-header h1 {\n  font-size: var(--chat--heading--font-size);\n  margin: 0;\n}\n.chat-header p {\n  font-size: var(--chat--subtitle--font-size);\n  color: var(--chat--subtitle--color);\n  margin: 0.5rem 0 0;\n}\n\n/* Chat input container */\n.chat-input-container {\n  display: flex;\n  align-items: flex-end;\n  padding: 1rem;\n  gap: 0.75rem;\n  border-top: 1px solid var(--chat--color-light-shade-100);\n  background: var(--chat--color-white);\n}\n\n/* Chat input */\n.chat-input {\n  flex: 1;\n  font-size: var(--chat--input--font-size);\n  padding: var(--chat--input--padding);\n  background: var(--chat--input--background);\n  color: var(--chat--input--text-color);\n  border: var(--chat--input--border);\n  border-radius: var(--chat--input--border-radius);\n  line-height: 1.5;\n  resize: none;\n  outline: none;\n  min-height: 44px;\n  max-height: 10rem;\n  overflow-y: auto;\n  transition: all 0.2s ease;\n}\n.chat-input::placeholder {\n  font-size: var(--chat--input--placeholder--font-size);\n  color: var(--chat--color-disabled);\n}\n.chat-input:focus {\n  border: var(--chat--input--border-active);\n  box-shadow: 0 0 0 3px rgba(255, 79, 94, 0.1);\n}\n\n/* File button */\n.chat-file-button {\n  background: transparent;\n  border: none;\n  font-size: 1.3rem;\n  color: var(--chat--file-button--color);\n  cursor: pointer;\n  transition: color 0.2s ease;\n}\n.chat-file-button:hover {\n  color: var(--chat--file-button--hover);\n}\n\n/* Send button */\n.chat-send-button {\n  background: var(--chat--send-button--background);\n  color: var(--chat--send-button--color);\n  border: none;\n  font-size: 1.1rem;\n  border-radius: 9999px;\n  padding: 0.5rem 1rem;\n  cursor: pointer;\n  transition: background 0.2s ease;\n}\n.chat-send-button:hover {\n  background: var(--chat--send-button--hover-bg);\n}\n",
          "allowFileUploads": true
        },
        "initialMessages": "This is an Mis agent tool\n Write your query about your files. If it is unclear ask again."
      },
      "typeVersion": 1.1
    },
    {
      "id": "c6b51764-f974-49dc-900d-916b1669d199",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -960,
        240
      ],
      "parameters": {
        "color": 6,
        "height": 680,
        "content": "## Current Folder location\n"
      },
      "typeVersion": 1
    },
    {
      "id": "a8646969-429a-4ada-898b-41e654d5f594",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        360,
        1980
      ],
      "parameters": {
        "width": 380,
        "height": 800,
        "content": "## Search Files in a Folder recursively\n"
      },
      "typeVersion": 1
    },
    {
      "id": "dbd671e1-7573-4792-9290-520376c6cd18",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -520,
        240
      ],
      "parameters": {
        "color": 5,
        "height": 680,
        "content": "## Destination folder location \n"
      },
      "typeVersion": 1
    },
    {
      "id": "3fbf02dc-8972-4ee6-b477-c376b4fd9cbc",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1740,
        960
      ],
      "parameters": {
        "width": 380,
        "height": 740,
        "content": "## List of Operations\n\n\n* Append\n* Inner Join\n* Left Join\n* Right Join\n* Summarise data\n  * Group By columns \n  * Aggregate (sum,avg,min,max,count)\n* Top n rows\n* Clean /standardize columns\n   * Data type change\n   * Replace a value in a column\n   * Replace missing values\n   \n\n* Fetch File name links "
      },
      "typeVersion": 1
    },
    {
      "id": "a29f83da-362d-4dad-bb2b-b4e8538586a9",
      "name": "Daily Sales",
      "type": "n8n-nodes-base.set",
      "position": [
        -700,
        -600
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "5fbfbd2e-2dcf-44c3-9911-ea4b3a57230e",
              "name": "Daily Sales",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/13HktrlqEMhtuPi0kmOD_Xb0pIp0REs_O?usp=drive_link"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "01de6a56-b390-49a1-9d4e-6c69f32349ba",
      "name": "Address",
      "type": "n8n-nodes-base.set",
      "position": [
        -700,
        -400
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "83bc57a9-fd87-4af0-89ec-6b225d637b17",
              "name": "Address",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/1QGDs470I8W0nGKLsx128RLr6mxGhbmxg?usp=drive_link"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "8c689eb1-54f0-49fe-a25e-9f76775066f0",
      "name": "customer_info",
      "type": "n8n-nodes-base.set",
      "position": [
        -700,
        -200
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "83bc57a9-fd87-4af0-89ec-6b225d637b17",
              "name": "customer_info",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/1_NDCCeRcI8-EGNUGJPP9_ovzvuzpLXY1?usp=drive_link"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "73615032-a6f3-4164-a50d-6d128ec64a35",
      "name": "Drive Folders URL",
      "type": "n8n-nodes-base.set",
      "position": [
        -1080,
        540
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "1e998316-ce5f-46cf-a603-fd6a15f543c7",
              "name": "Daily Sales",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/13HktrlqEMhtuPi0kmOD_Xb0pIp0REs_O?usp=drive_link"
            },
            {
              "id": "5fbfbd2e-2dcf-44c3-9911-ea4b3a57230e",
              "name": "Address",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/1QGDs470I8W0nGKLsx128RLr6mxGhbmxg?usp=drive_link"
            },
            {
              "id": "0d844377-214e-4115-8843-14008a5c26ea",
              "name": "customer_info",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/1_NDCCeRcI8-EGNUGJPP9_ovzvuzpLXY1?usp=drive_link"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "d3636f90-a927-465f-86fc-dfa9bf7acfc8",
      "name": "Drive Folders URL1",
      "type": "n8n-nodes-base.set",
      "position": [
        40,
        2320
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "1e998316-ce5f-46cf-a603-fd6a15f543c7",
              "name": "Daily Sales",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/13HktrlqEMhtuPi0kmOD_Xb0pIp0REs_O?usp=drive_link"
            },
            {
              "id": "5fbfbd2e-2dcf-44c3-9911-ea4b3a57230e",
              "name": "Address",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/1QGDs470I8W0nGKLsx128RLr6mxGhbmxg?usp=drive_link"
            },
            {
              "id": "0d844377-214e-4115-8843-14008a5c26ea",
              "name": "customer_info",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/1_NDCCeRcI8-EGNUGJPP9_ovzvuzpLXY1?usp=drive_link"
            },
            {
              "id": "c26fd83b-0e89-4cd8-8938-e23a15f1365a",
              "name": "Master1",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/1ZxZcVXnsI_13w2A-aoOGCxw922Uf7-mx?usp=drive_link"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "4582656d-856e-4c41-8c50-b3a3f20791db",
      "name": "Daily Sales Folder",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        500,
        2260
      ],
      "parameters": {
        "filter": {
          "folderId": {
            "__rl": true,
            "mode": "url",
            "value": "={{ $json[\"Daily Sales\"] }}"
          }
        },
        "options": {
          "fields": [
            "id",
            "name",
            "webViewLink"
          ]
        },
        "resource": "fileFolder",
        "returnAll": true
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3,
      "alwaysOutputData": false
    },
    {
      "id": "d4719c21-129a-43cb-81b5-0addba3ffaa9",
      "name": "Address Folder",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        500,
        2080
      ],
      "parameters": {
        "filter": {
          "folderId": {
            "__rl": true,
            "mode": "url",
            "value": "={{ $json.Address }}"
          }
        },
        "options": {
          "fields": [
            "id",
            "name",
            "webViewLink"
          ]
        },
        "resource": "fileFolder",
        "returnAll": true
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "b0bca736-a81e-48a0-a70f-f9265f2652ff",
      "name": "customer_info folder",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        500,
        2440
      ],
      "parameters": {
        "filter": {
          "folderId": {
            "__rl": true,
            "mode": "url",
            "value": "={{ $json.customer_info }}"
          },
          "whatToSearch": "all"
        },
        "options": {
          "fields": [
            "id",
            "name",
            "webViewLink"
          ]
        },
        "resource": "fileFolder",
        "returnAll": true
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "fd96e282-c444-4839-af97-a8ad8da029e7",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        980,
        2300
      ],
      "parameters": {
        "numberInputs": 4
      },
      "typeVersion": 3.1
    },
    {
      "id": "6196ff53-3e8f-4913-a316-395dce695e07",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2060,
        3100
      ],
      "parameters": {
        "color": 3,
        "width": 400,
        "height": 440,
        "content": "## Data Consolidation\n\n\n* Append\n* Inner Join (Join)\n* Right Join\n* Left Join\n* At the end of the task it will generate the file and present the link of the file."
      },
      "typeVersion": 1
    },
    {
      "id": "43151fa5-2b97-49f8-ab0e-96e79cd55f3d",
      "name": "Sticky Note17",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3240,
        1960
      ],
      "parameters": {
        "color": 2,
        "width": 1160,
        "height": 920,
        "content": "##              Aggregate Data By Given Columns /Group By /Summarize\n"
      },
      "typeVersion": 1
    },
    {
      "id": "aa7ee570-4f05-41af-90eb-01168d505c3e",
      "name": "Master",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        500,
        2620
      ],
      "parameters": {
        "filter": {
          "folderId": {
            "__rl": true,
            "mode": "url",
            "value": "={{ $json.Master1 }}"
          }
        },
        "options": {
          "fields": [
            "id",
            "name",
            "webViewLink"
          ]
        },
        "resource": "fileFolder",
        "returnAll": true
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "b2a32c8b-dcd4-4736-9f28-1c4f72c7c75b",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "position": [
        1280,
        2320
      ],
      "webhookId": "bb8b60c1-6869-4fc8-994c-9b8b60aeb1aa",
      "parameters": {
        "amount": 1
      },
      "typeVersion": 1.1
    },
    {
      "id": "ca561379-c751-467f-a5a7-20faf2acc5ed",
      "name": "Google Sheets2",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -780,
        3060
      ],
      "parameters": {
        "options": {},
        "sheetName": {
          "__rl": true,
          "mode": "name",
          "value": "raw_data"
        },
        "documentId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $json.output.left_web_link }}"
        }
      },
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0RSJGMBcFzxY9GkS",
          "name": "Google Sheets account"
        }
      },
      "typeVersion": 4.5
    },
    {
      "id": "0fe2bb72-5c7d-4845-9f36-8651a149baa0",
      "name": "Google Sheets6",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -780,
        3360
      ],
      "parameters": {
        "options": {},
        "sheetName": {
          "__rl": true,
          "mode": "name",
          "value": "raw_data"
        },
        "documentId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $json.output.right_web_link }}"
        }
      },
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0RSJGMBcFzxY9GkS",
          "name": "Google Sheets account"
        }
      },
      "typeVersion": 4.5
    },
    {
      "id": "fee9ece9-d592-4ff1-9628-0bc56a87fd5d",
      "name": "Edit Fields5",
      "type": "n8n-nodes-base.set",
      "position": [
        -960,
        3180
      ],
      "parameters": {
        "options": {},
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "b5c2cd9b-bd1b-43ee-a4db-fd388348d333",
      "name": "Edit Fields6",
      "type": "n8n-nodes-base.set",
      "position": [
        -580,
        3060
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "16eaed03-db57-4a47-8da2-7fa8372e3693",
              "name": "Join_criteria",
              "type": "object",
              "value": "={{ $('Edit Fields5').item.json.output.Join_criteria }}"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "08ef4a14-8fe5-4ea9-b24d-536bd61b6d7c",
      "name": "Edit Fields7",
      "type": "n8n-nodes-base.set",
      "position": [
        -560,
        3360
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "7dc9e123-db0e-47dd-8974-41a375b7bc97",
              "name": "Join_criteria",
              "type": "object",
              "value": "={{ $('Edit Fields5').item.json.output.Join_criteria }}"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "f9d277df-1ad5-47a0-93b7-6804dcf4b50e",
      "name": "Code3",
      "type": "n8n-nodes-base.code",
      "position": [
        500,
        3120
      ],
      "parameters": {
        "language": "python",
        "pythonCode": "import pandas as pd \n\n# Step 1: Extract join configuration\njoin_type = _input.all()[0]['json']['Join_criteria']['join_type'].lower()\nleft = _input.all()[0]['json']['Join_criteria']['left_on']\nright = _input.all()[0]['json']['Join_criteria']['right_on']\nin_len1 = _input.all()[0]['json']['len_input_1']\nin_len2 = _input.all()[-1]['json']['len_input_2']\n\n# Step 2: Build df1 and df2\ndata = [item['json'] for item in _input.all()]\ndf1 = pd.DataFrame(data)[:in_len1]\ndf2 = pd.DataFrame(data)[in_len1:]\n\n# Step 3: Drop helper/meta columns\nmeta_cols = ['Join_criteria', 'len_input_1', 'len_input_2']\ndf1 = df1.drop(columns=[col for col in meta_cols if col in df1.columns], errors='ignore')\ndf2 = df2.drop(columns=[col for col in meta_cols if col in df2.columns], errors='ignore')\n\n# Step 4: Drop rows from df2 where 'uni_key' is null\ndf2 = df2.dropna(subset=[right])\n\n\n# Step 5: Identify common columns\ncommon_cols = set(df1.columns).intersection(df2.columns) - {left,right}\n\n# Step 6: Drop columns in df1 that are null and match df2\ncols_to_drop_from_df1 = [col for col in common_cols if df1[col].isna().all()]\ndf1 = df1.drop(columns=cols_to_drop_from_df1)\n\n# Step 7: Drop columns in df2 that are null and match df1\ncols_to_drop_from_df2 = [col for col in common_cols if df2[col].isna().all()]\ndf2 = df2.drop(columns=cols_to_drop_from_df2)\n\n# Step 8: Perform join or append\nif join_type == 'append':\n    result_df = pd.concat([df1, df2], ignore_index=True)\nelif join_type in ('inner', 'left', 'right'):\n    result_df = pd.merge(df1, df2, how=join_type, left_on=left, right_on=right)\n\n# Step 9: Return formatted result\noutput = result_df.to_dict(orient=\"records\")\nreturn [{ \"json\": row } for row in output]\n"
      },
      "typeVersion": 2
    },
    {
      "id": "3753303a-f909-4da6-a94b-5f1d3c2a2ad3",
      "name": "Code4",
      "type": "n8n-nodes-base.code",
      "position": [
        -400,
        3060
      ],
      "parameters": {
        "language": "python",
        "pythonCode": "# Loop over input items and add a new field called 'myNewField' to the JSON of each one\nlen_input_1 = len(_input.all())\nfor item in _input.all():\n    item['json']['len_input_1'] = len_input_1\n\nreturn _input.all()"
      },
      "typeVersion": 2
    },
    {
      "id": "7f4a40c7-d7fe-4ad4-8d90-216282866f81",
      "name": "Code5",
      "type": "n8n-nodes-base.code",
      "position": [
        -380,
        3360
      ],
      "parameters": {
        "language": "python",
        "pythonCode": "# Loop over input items and add a new field called 'myNewField' to the JSON of each one\nlen_input_2 = len(_input.all())\nfor item in _input.all():\n    item['json']['len_input_2'] = len_input_2\n\nreturn _input.all()"
      },
      "typeVersion": 2
    },
    {
      "id": "637b90a5-91e5-498b-adc6-0c3b4f33f91b",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "position": [
        -120,
        3200
      ],
      "parameters": {},
      "typeVersion": 3.1
    },
    {
      "id": "907185c4-dd32-4a17-a725-5889fec2de7b",
      "name": "Wait1",
      "type": "n8n-nodes-base.wait",
      "position": [
        80,
        3200
      ],
      "webhookId": "daf842b4-7a45-42ea-a57a-0d541ba6835f",
      "parameters": {
        "amount": 0.3
      },
      "typeVersion": 1.1
    },
    {
      "id": "93da686d-9c01-48bb-aec0-3b5d5489960f",
      "name": "OpenAI Chat Model3",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -200,
        2160
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "OizdHUANhz9NIHyd",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "d2d670d5-3fc8-4319-b281-5800d16e4b93",
      "name": "OpenAI Chat Model4",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -1140,
        2640
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "OizdHUANhz9NIHyd",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "4fe03f21-9099-4b21-aab9-8e7106e61d4e",
      "name": "Convert to File",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        760,
        3200
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 1.1
    },
    {
      "id": "52ac95d1-740a-4c5c-a1d5-5a75c2df3277",
      "name": "Google Drive7",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        940,
        3200
      ],
      "parameters": {
        "name": "=_merged_{{ $now }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "options": {},
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "1FHILAjwICWnzC4bRBNjv01SWAIAyTfJM",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1FHILAjwICWnzC4bRBNjv01SWAIAyTfJM",
          "cachedResultName": "Merged_Files"
        }
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "1786391d-f802-4cbc-bb2d-0b67bc875eb7",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "position": [
        1140,
        3200
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "72ca00f0-e54e-40cb-bccd-cfac49e882ba",
              "name": "webViewLink",
              "type": "string",
              "value": "={{ $json.webViewLink }}"
            },
            {
              "id": "de08fe54-c77d-421b-8bb6-5c0d06e6ffd5",
              "name": "name",
              "type": "string",
              "value": "={{ $json.name }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "57edf053-1c88-4329-a821-3f07cc12e3b7",
      "name": "If3",
      "type": "n8n-nodes-base.if",
      "position": [
        260,
        3200
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "e50fb471-5a51-44b6-a7b4-9f90bc64072d",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              },
              "leftValue": "={{ $json.Join_criteria.join_type }}",
              "rightValue": "append"
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "747f15b5-ee4e-426b-8c2e-e9c45aa15411",
      "name": "Code2",
      "type": "n8n-nodes-base.code",
      "position": [
        500,
        3320
      ],
      "parameters": {
        "language": "python",
        "pythonCode": "import pandas as pd\n\n# Only handle append case with duplicate removal based on left_on key\n\n# Extract key for duplicate removal (left_on)\nleft_on = _input.all()[0]['json']['Join_criteria'].get('left_on')\n\n# Get input lengths\nin_len1 = _input.all()[0]['json']['len_input_1']\n#in_len2 = _input.all()[0]['json']['len_input_2']\n\n# Get all data\ndata = [item['json'] for item in _input.all()]\n\n# Split dataframes\ndf1 = pd.DataFrame(data)[:in_len1]\ndf2 = pd.DataFrame(data)[in_len1:]\n\n# Drop meta columns if present\nmeta_cols = ['Join_criteria', 'len_input_1', 'len_input_2']\ndf1 = df1.drop(columns=[col for col in meta_cols if col in df1.columns], errors='ignore')\ndf2 = df2.drop(columns=[col for col in meta_cols if col in df2.columns], errors='ignore')\n\n# Append dataframes\nresult_df = pd.concat([df1, df2], ignore_index=True)\n\n# Remove duplicates if left_on key is provided and exists in df\nif left_on and left_on in result_df.columns:\n    result_df = result_df.drop_duplicates(subset=[left_on], keep='last')\n\n# Return results\noutput = result_df.to_dict(orient=\"records\")\nreturn [{\"json\": row} for row in output]\n"
      },
      "typeVersion": 2
    },
    {
      "id": "c0ec68b3-02a8-489a-84cf-d65eb1b0aa46",
      "name": "Edit Fields2",
      "type": "n8n-nodes-base.set",
      "position": [
        -1080,
        3780
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "58c4cd84-ae00-4b58-8794-782f16ecd457",
              "name": "choices[0].message.content.output[0].output",
              "type": "array",
              "value": "={{ $json.choices[0].message.content.output[0].output }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "144eedc9-3636-445e-8f5a-5cfddf0085f8",
      "name": "Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -660,
        3760
      ],
      "parameters": {
        "options": {},
        "sheetName": {
          "__rl": true,
          "mode": "name",
          "value": "raw_data"
        },
        "documentId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $json.choices[0].message.content.output[0].output[0].Clean.web_link }}"
        }
      },
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0RSJGMBcFzxY9GkS",
          "name": "Google Sheets account"
        }
      },
      "typeVersion": 4.5
    },
    {
      "id": "9dcdfa19-0653-450f-a77c-cc43a8d8a529",
      "name": "Edit Fields1",
      "type": "n8n-nodes-base.set",
      "position": [
        -440,
        3760
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "cc1a6232-dbe5-4950-9366-d3e176da61a4",
              "name": "Clean",
              "type": "object",
              "value": "={{ $('Edit Fields2').item.json.choices[0].message.content.output[0].output[0].Clean }}"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "fc97a7dd-9d91-44fc-af85-d8baa5d4ecd4",
      "name": "Code6",
      "type": "n8n-nodes-base.code",
      "position": [
        -240,
        3760
      ],
      "parameters": {
        "language": "python",
        "pythonCode": "import pandas as pd\nimport numpy as np\n\n# Load input data rows safely\nrows = [item['json'] for item in _input.all()]\nif not rows:\n    # No data input, return empty\n    return []\n\n# Extract cleaning block and criteria safely from the first row\nclean_block = rows[0].get(\"Clean\", {})\ncriteria = clean_block.get(\"clean_criteria\", {})\n\nfetch_type = criteria.get(\"fetch_type\", [])\n\n# Prepare DataFrame data without \"Clean\" key\nactual_data = [{k: v for k, v in row.items() if k != \"Clean\"} for row in rows]\ndf = pd.DataFrame(actual_data)\n\n# Helper: friendly dtype names\ndef friendly_dtype(dtype):\n    if pd.api.types.is_datetime64_any_dtype(dtype):\n        return \"date/time\"\n    if pd.api.types.is_integer_dtype(dtype):\n        return \"integer\"\n    if pd.api.types.is_float_dtype(dtype):\n        return \"float\"\n    if pd.api.types.is_bool_dtype(dtype):\n        return \"boolean\"\n    if dtype == \"object\":\n        return \"text\"\n    return str(dtype)\n\n# If fetch_type list is non-empty: return dtypes only for those columns\nif fetch_type and len(fetch_type) > 0:\n    result = []\n    for col in fetch_type:\n        if col in df.columns:\n            result.append({\"column\": col, \"dtype\": friendly_dtype(df[col].dtype)})\n        else:\n            result.append({\"column\": col, \"dtype\": \"Not found\"})\n    return [{\"json\": r} for r in result]\n\n# If DataFrame is empty after loading data, return empty\nif df.empty:\n    return []\n\n# ----------------- TRANSFORM -----------------\ntransform = criteria.get(\"transform\", {})\nfor col, dtype in transform.items():\n    if col in df.columns:\n        try:\n            if dtype == \"date\":\n                df[col] = pd.to_datetime(df[col], errors='coerce')\n            elif dtype == \"date_time\":\n                df[col] = pd.to_datetime(df[col], format='%Y-%m-%d %H:%M:%S', errors='coerce')\n            elif dtype in [\"int\", \"float\", \"str\"]:\n                df[col] = df[col].astype(dtype, errors='ignore')\n            elif dtype == \"float64\":\n                df[col] = pd.to_numeric(df[col], errors='coerce')\n        except Exception as e:\n            print(f\"Transform error on {col}: {e}\")\n\n# ----------------- TRIM -----------------\nfor col in criteria.get(\"trim\", []):\n    if col in df.columns and df[col].dtype == \"object\":\n        df[col] = df[col].str.strip()\n\n# ----------------- REPLACE -----------------\nreplace_criteria = criteria.get(\"replace\", {})\nfor col, replacements in replace_criteria.items():\n    if col in df.columns and replacements:\n        for old_val, new_val in replacements:\n            df[col] = df[col].replace(old_val, new_val)\n\n# ----------------- FILLNA -----------------\nfor col, val in criteria.get(\"fillna\", {}).items():\n    if col in df.columns:\n        df[col] = df[col].fillna(val)\n\n# ----------------- DROPNA -----------------\ndropna = criteria.get(\"dropna\", {})\ndropna_cols = dropna.get(\"cols\", [])\ndropna_how = dropna.get(\"how\", \"any\")\nif dropna_cols:\n    df.dropna(subset=dropna_cols, how=dropna_how, inplace=True)\n\n# ----------------- DROP DUPLICATES -----------------\nif criteria.get(\"drop_duplicates\", False):\n    df.drop_duplicates(inplace=True)\n\n# ----------------- RENAME -----------------\nrename_cols = criteria.get(\"rename\", {})\nif rename_cols:\n    # Remove empty string keys to avoid errors\n    rename_cols = {k: v for k, v in rename_cols.items() if v}\n    if rename_cols:\n        df.rename(columns=rename_cols, inplace=True)\n\n# ----------------- CASE STANDARDIZE -----------------\ncase_std = criteria.get(\"case_standardize\", {})\nfor col, method in case_std.items():\n    if col in df.columns and df[col].dtype == \"object\":\n        if method == \"lower\":\n            df[col] = df[col].str.lower()\n        elif method == \"upper\":\n            df[col] = df[col].str.upper()\n        elif method == \"title\":\n            df[col] = df[col].str.title()\n\n# ----------------- NORMALIZE WHITESPACE -----------------\nfor col in criteria.get(\"normalize_whitespace\", []):\n    if col in df.columns and df[col].dtype == \"object\":\n        df[col] = df[col].str.replace(r'\\s+', ' ', regex=True).str.strip()\n\n# ----------------- REMOVE SPECIAL CHARS -----------------\nremove_special = criteria.get(\"remove_special_chars\", {})\nfor col, chars in remove_special.items():\n    if col in df.columns and df[col].dtype == \"object\" and chars:\n        for ch in chars:\n            df[col] = df[col].str.replace(ch, \"\", regex=False)\n\n# ----------------- CAST COLUMNS -----------------\ncast_cols = criteria.get(\"cast_columns\", {})\nfor col, dtype in cast_cols.items():\n    if col in df.columns and dtype:\n        try:\n            df[col] = df[col].astype(dtype, errors='ignore')\n        except Exception:\n            pass\n\n# ----------------- ROUND COLUMNS -----------------\nround_cols = criteria.get(\"round_columns\", {})\nfor col, digits in round_cols.items():\n    if col in df.columns and pd.api.types.is_numeric_dtype(df[col]) and isinstance(digits, int):\n        df[col] = df[col].round(digits)\n\n# ----------------- FINAL OUTPUT -----------------\n# Drop 'Clean' column if present\ndf.drop(columns=['Clean'], errors='ignore', inplace=True)\n\noutput = df.to_dict(orient=\"records\")\nreturn [{\"json\": row} for row in output]\n"
      },
      "typeVersion": 2
    },
    {
      "id": "6f2333ac-3184-4026-a8a6-292c80cbad31",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2060,
        3740
      ],
      "parameters": {
        "color": 3,
        "width": 400,
        "height": 300,
        "content": "## Data Cleaning/Transformation\n\n\n* clean /replace missing values\n* Fetch Data type\n* Change Data type\n* Replace any value\n* gives clean file at the end in the drive\n* link to that file will be given by the agent."
      },
      "typeVersion": 1
    },
    {
      "id": "19f79ef2-5f7c-4bba-9d38-94f3b1b46ebb",
      "name": "Convert to File1",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        -20,
        3760
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 1.1
    },
    {
      "id": "64eff3a5-d12f-4599-900b-f187902f5b5b",
      "name": "Google Drive8",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        160,
        3760
      ],
      "parameters": {
        "name": "={{ $('Edit Fields2').item.json.output[0].output[0].Clean.table_name }}_cl{{ $now }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "options": {},
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "1906t0cfFg5YXA_xjf2UkBjc6OUd6YA1p",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1906t0cfFg5YXA_xjf2UkBjc6OUd6YA1p",
          "cachedResultName": "Cleaned_files"
        }
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "ada42b2e-3185-4215-b8b3-d9ff4c303f4c",
      "name": "Edit Fields10",
      "type": "n8n-nodes-base.set",
      "position": [
        360,
        3760
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "ce34bb53-d7c8-4864-8bc7-c8d30f93de96",
              "name": "webViewLink",
              "type": "string",
              "value": "={{ $json.webViewLink }}"
            },
            {
              "id": "8cad2dba-4a40-4699-9150-a0609d0eb4bb",
              "name": "name",
              "type": "string",
              "value": "={{ $json.name }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "3c7fce05-d120-4557-9545-b5e50bb762cc",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        -1460,
        3780
      ],
      "parameters": {
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-2025-04-14",
          "cachedResultName": "GPT-4.1-2025-04-14"
        },
        "options": {},
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "=This is the query you will recieve \n{{ $json.query }}\n\nYou are a JSON cleaning configuration extractor.\n\nGiven an input JSON string representing a \"Clean\" operation, extract and return a standardized data cleaning configuration with the following rules:\n\n1. Preserve all nested structures exactly as they are, especially any arrays within arrays.\n2. Fill in the following fields with default values if they are missing inside `clean_criteria`:\n   - fetch_type: []\n   - transform: {}\n   - replace: {}\n   - trim: []\n   - fillna: {}\n   - dropna: {\"cols\": [], \"how\": \"any\"}\n   - drop_duplicates: false\n   - rename: {}\n   - case_standardize: {}\n   - normalize_whitespace: []\n   - remove_special_chars: {}\n   - cast_columns: {}\n   - round_columns: {}\n3. If `table_name` is missing, use \"Default_Table\".\n4. If `web_link` is missing, use an empty string \"\".\n5. Return the output wrapped inside nested \"output\" arrays like this:\n\n```json\n[\n  {\n    \"output\": [\n      {\n        \"output\": [\n          {\n            \"operation\": \"Clean\",\n            \"Clean\": {\n              \"clean_criteria\": { ... },\n              \"table_name\": \"...\",\n              \"web_link\": \"...\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n]\n"
            }
          ]
        },
        "simplify": false,
        "jsonOutput": true
      },
      "credentials": {
        "openAiApi": {
          "id": "OizdHUANhz9NIHyd",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.8
    },
    {
      "id": "17179c9e-175c-4619-8fd7-ca4f7db14608",
      "name": "If5",
      "type": "n8n-nodes-base.if",
      "position": [
        -860,
        3780
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "4754ae78-7ce1-4933-bc10-32a23352ab1b",
              "operator": {
                "type": "array",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.choices[0].message.content.output[0].output[0].Clean.clean_criteria.fetch_type }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "395e894a-fe4d-499f-b7fd-fa03ca40a7c0",
      "name": "Google Sheets3",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -840,
        4040
      ],
      "parameters": {
        "options": {},
        "sheetName": {
          "__rl": true,
          "mode": "name",
          "value": "raw_data"
        },
        "documentId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $json.choices[0].message.content.output[0].output[0].Clean.web_link }}"
        }
      },
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0RSJGMBcFzxY9GkS",
          "name": "Google Sheets account"
        }
      },
      "typeVersion": 4.5
    },
    {
      "id": "0fd2cb1a-715d-412d-9d5e-b4ab5d53cc41",
      "name": "Edit Fields12",
      "type": "n8n-nodes-base.set",
      "position": [
        -640,
        4040
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "cc1a6232-dbe5-4950-9366-d3e176da61a4",
              "name": "Clean",
              "type": "object",
              "value": "={{ $('Edit Fields2').item.json.choices[0].message.content.output[0].output[0].Clean }}"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "b03508ec-10a9-4c7c-89dd-3ba2dddaff06",
      "name": "Code8",
      "type": "n8n-nodes-base.code",
      "position": [
        -420,
        4040
      ],
      "parameters": {
        "language": "python",
        "pythonCode": "import pandas as pd\nimport numpy as np\n\n# Load input data rows safely\nrows = [item['json'] for item in _input.all()]\nif not rows:\n    # No data input, return empty\n    return []\n\n# Extract cleaning block and criteria safely from the first row\nclean_block = rows[0].get(\"Clean\", {})\ncriteria = clean_block.get(\"clean_criteria\", {})\n\nfetch_type = criteria.get(\"fetch_type\", [])\n\n# Prepare DataFrame data without \"Clean\" key\nactual_data = [{k: v for k, v in row.items() if k != \"Clean\"} for row in rows]\ndf = pd.DataFrame(actual_data)\n\n# Helper: friendly dtype names\ndef friendly_dtype(dtype):\n    if pd.api.types.is_datetime64_any_dtype(dtype):\n        return \"date/time\"\n    if pd.api.types.is_integer_dtype(dtype):\n        return \"integer\"\n    if pd.api.types.is_float_dtype(dtype):\n        return \"float\"\n    if pd.api.types.is_bool_dtype(dtype):\n        return \"boolean\"\n    if dtype == \"object\":\n        return \"text\"\n    return str(dtype)\n\n# If fetch_type list is non-empty: return dtypes only for those columns\nif fetch_type and len(fetch_type) > 0:\n    result = []\n    for col in fetch_type:\n        if col in df.columns:\n            result.append({\"column\": col, \"dtype\": friendly_dtype(df[col].dtype)})\n        else:\n            result.append({\"column\": col, \"dtype\": \"Not found\"})\n    return [{\"json\": r} for r in result]\n\n# If DataFrame is empty after loading data, return empty\nif df.empty:\n    return []\n\n# ----------------- TRANSFORM -----------------\ntransform = criteria.get(\"transform\", {})\nfor col, dtype in transform.items():\n    if col in df.columns:\n        try:\n            if dtype == \"date\":\n                df[col] = pd.to_datetime(df[col], errors='coerce')\n            elif dtype == \"date_time\":\n                df[col] = pd.to_datetime(df[col], format='%Y-%m-%d %H:%M:%S', errors='coerce')\n            elif dtype in [\"int\", \"float\", \"str\"]:\n                df[col] = df[col].astype(dtype, errors='ignore')\n            elif dtype == \"float64\":\n                df[col] = pd.to_numeric(df[col], errors='coerce')\n        except Exception as e:\n            print(f\"Transform error on {col}: {e}\")\n\n# ----------------- TRIM -----------------\nfor col in criteria.get(\"trim\", []):\n    if col in df.columns and df[col].dtype == \"object\":\n        df[col] = df[col].str.strip()\n\n# ----------------- REPLACE -----------------\nreplace_criteria = criteria.get(\"replace\", {})\nfor col, replacements in replace_criteria.items():\n    if col in df.columns and replacements:\n        for old_val, new_val in replacements:\n            df[col] = df[col].replace(old_val, new_val)\n\n# ----------------- FILLNA -----------------\nfor col, val in criteria.get(\"fillna\", {}).items():\n    if col in df.columns:\n        df[col] = df[col].fillna(val)\n\n# ----------------- DROPNA -----------------\ndropna = criteria.get(\"dropna\", {})\ndropna_cols = dropna.get(\"cols\", [])\ndropna_how = dropna.get(\"how\", \"any\")\nif dropna_cols:\n    df.dropna(subset=dropna_cols, how=dropna_how, inplace=True)\n\n# ----------------- DROP DUPLICATES -----------------\nif criteria.get(\"drop_duplicates\", False):\n    df.drop_duplicates(inplace=True)\n\n# ----------------- RENAME -----------------\nrename_cols = criteria.get(\"rename\", {})\nif rename_cols:\n    # Remove empty string keys to avoid errors\n    rename_cols = {k: v for k, v in rename_cols.items() if v}\n    if rename_cols:\n        df.rename(columns=rename_cols, inplace=True)\n\n# ----------------- CASE STANDARDIZE -----------------\ncase_std = criteria.get(\"case_standardize\", {})\nfor col, method in case_std.items():\n    if col in df.columns and df[col].dtype == \"object\":\n        if method == \"lower\":\n            df[col] = df[col].str.lower()\n        elif method == \"upper\":\n            df[col] = df[col].str.upper()\n        elif method == \"title\":\n            df[col] = df[col].str.title()\n\n# ----------------- NORMALIZE WHITESPACE -----------------\nfor col in criteria.get(\"normalize_whitespace\", []):\n    if col in df.columns and df[col].dtype == \"object\":\n        df[col] = df[col].str.replace(r'\\s+', ' ', regex=True).str.strip()\n\n# ----------------- REMOVE SPECIAL CHARS -----------------\nremove_special = criteria.get(\"remove_special_chars\", {})\nfor col, chars in remove_special.items():\n    if col in df.columns and df[col].dtype == \"object\" and chars:\n        for ch in chars:\n            df[col] = df[col].str.replace(ch, \"\", regex=False)\n\n# ----------------- CAST COLUMNS -----------------\ncast_cols = criteria.get(\"cast_columns\", {})\nfor col, dtype in cast_cols.items():\n    if col in df.columns and dtype:\n        try:\n            df[col] = df[col].astype(dtype, errors='ignore')\n        except Exception:\n            pass\n\n# ----------------- ROUND COLUMNS -----------------\nround_cols = criteria.get(\"round_columns\", {})\nfor col, digits in round_cols.items():\n    if col in df.columns and pd.api.types.is_numeric_dtype(df[col]) and isinstance(digits, int):\n        df[col] = df[col].round(digits)\n\n# ----------------- FINAL OUTPUT -----------------\n# Drop 'Clean' column if present\ndf.drop(columns=['Clean'], errors='ignore', inplace=True)\n\noutput = df.to_dict(orient=\"records\")\nreturn [{\"json\": row} for row in output]\n"
      },
      "typeVersion": 2
    },
    {
      "id": "b0023cce-aff3-44d4-b083-5be65bddfe26",
      "name": "Sticky Note16",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2140,
        900
      ],
      "parameters": {
        "color": 4,
        "width": 860,
        "height": 1140,
        "content": "# Using the AI-Powered MIS Agent Workflow  \n\n\n\n1. Deploy the supplied JSON workflow in n8n and switch it **Active**.  \n2. Copy the public URL from the **Chat Trigger** node.  \n3. POST a body like `{\"query\":\"your request\"}` to that URL to talk to the agent or use webhook to connect your chatbot.  \n4. The agent\u2019s **Text Classifier** detects intent: fetch, clean, summarize, join, etc.  \n5. Always mention the exact Google-Sheet name; add its webViewLink if uncertain.  \n6. Ask \u201ctop 10 rows of Daily Sales\u201d to preview data without edits.  \n7. Say \u201cgroup by Region, sum Total Sales in Master\u201d for summaries.  \n8. Say \u201cleft-join Master and customer_info on uni_key\u201d for joins.  \n9. For cleaning, specify column and action: \u201creplace 1\u21922 in Rating of Master\u201d.  \n10. The agent builds a validated JSON payload for the **Information Extractor**.  \n11. Python/Sheets nodes then execute the required transformation live.  \n12. Results save to Drive; the agent replies with the new file\u2019s link.  \n13. If `fetch_type` is requested, inferred column data types are displayed first.  \n14. All outputs are also logged to the **n8n_logs** Drive folder for audit.  \n15. Missing links trigger a polite prompt to supply or correct the file info.  \n16. Edit the *Drive Folders URL* Set node to match your own Drive folder IDs.  \n17. Extend capabilities by cloning Code nodes and updating classifier labels.  \n18. Pause the workflow when idle to conserve OpenAI token usage.  \n19. Reach out via chat any time\u2014every operation is conversationally driven.  \n20. The bot can sometimes hallucinates but it recorrects it's mistakes if asked if it is unclear  make it understand.\n21. Not all the task here is done by ai agent. I have used the Ai agent to use for routing and text parsing ability to perform task where hardcoded steps are better and accurate.\n22. You can replace the default Google Sheet links with your own \u2014 edit them in the \"fetch_file\" and \"memory_store\" sheets or configure in the Google Sheets node.\n\n23.Update the Google Drive Upload and Google Drive Logs nodes with your personal or company Drive folder IDs for saving results.\n\n24. Adjust the Google Sheets API credentials in your n8n settings (OAuth2 or service account).\n\n25. If using your own OpenAI key, change the API Key in the OpenAI node environment variable or credentials section.\n26. To test if it's working replace your drive links wherever it is necessary.\n27. I have standardised the sheet name in google spreadsheet with name 'raw_data' to check it's functioning. you can make the changes but it is advisable to change all the  spreadsheet sheet\nname with a common name. \n28. Knowledge base has been given if your organisation or work require specific kind of sops or formulae you can add the vector store as a tool to enable the bot to answer user specific queries. but you have to change the system prompt accordingly.\n29. you can add the databases if you want.\n30. I can add the charting capability on demand as well as other custom demands."
      },
      "typeVersion": 1
    },
    {
      "id": "a1e163bc-7cc9-4536-8e87-363e47b51940",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3240,
        4300
      ],
      "parameters": {
        "color": 5,
        "width": 5540,
        "content": ""
      },
      "typeVersion": 1
    },
    {
      "id": "9e7327c7-9039-4d38-ae72-c2d9df35f4a4",
      "name": "Sticky Note18",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2140,
        -880
      ],
      "parameters": {
        "color": 5,
        "width": 150,
        "height": 5320,
        "content": ""
      },
      "typeVersion": 1
    },
    {
      "id": "ff247bd2-5cf9-4693-80b5-bbd825019db9",
      "name": "Sticky Note19",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3400,
        -860
      ],
      "parameters": {
        "color": 5,
        "width": 150,
        "height": 5320,
        "content": ""
      },
      "typeVersion": 1
    },
    {
      "id": "61e35438-9059-476f-a202-b19a107618c6",
      "name": "Sticky Note20",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4240,
        -1000
      ],
      "parameters": {
        "color": 6,
        "width": 7480,
        "content": ""
      },
      "typeVersion": 1
    },
    {
      "id": "7966ca43-2406-4e47-a51b-9435920a82ab",
      "name": "Sticky Note21",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1480,
        3680
      ],
      "parameters": {
        "width": 320,
        "height": 260,
        "content": "## Structured Json  \n* sends formatted json instructions to the code block along with spreadsheet link"
      },
      "typeVersion": 1
    },
    {
      "id": "ac03feae-c85c-4aec-a40f-c2a92acbbf6b",
      "name": "Sticky Note22",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -700,
        1880
      ],
      "parameters": {
        "width": 380,
        "height": 460,
        "content": "## Structured Json  \n* sends formatted json instructions to the code block along with spreadsheet link"
      },
      "typeVersion": 1
    },
    {
      "id": "f482ff97-4432-48cc-b104-25b0fb8c5ea5",
      "name": "Sticky Note23",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -60,
        3580
      ],
      "parameters": {
        "width": 540,
        "height": 380,
        "content": "## Convert The cleaned file into Csv  and Upload to Google Drive\n\n\n* Final set node is accessing the weblink and name of file generated after the upload which is used as response for the user to access the file from chat interface"
      },
      "typeVersion": 1
    },
    {
      "id": "70df5c63-bdfe-4f12-acb9-914605432103",
      "name": "Sticky Note24",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        740,
        3020
      ],
      "parameters": {
        "width": 540,
        "height": 380,
        "content": "## Convert The Merge Operation into Csv  and Upload to Google Drive\n\n\n* Final set node is accessing the weblink and name of file generated after the upload which is used as response for the user to access the file from chat interface"
      },
      "typeVersion": 1
    },
    {
      "id": "7ce51d79-11d6-4463-8ecd-63f67dfe297b",
      "name": "Sticky Note25",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        4020
      ],
      "parameters": {
        "color": 4,
        "width": 540,
        "height": 180,
        "content": "## This node only returns the fetched data types \nno storing required into drive\n\n\n* Fetched data dtypes goes to the bot and returned on the chat interface as a response"
      },
      "typeVersion": 1
    },
    {
      "id": "a809bb6f-96c5-4428-a56a-df274c5e01e6",
      "name": "Sticky Note26",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        2900
      ],
      "parameters": {
        "color": 5,
        "width": 340,
        "height": 600,
        "content": "## Merge Operation using Python\n\n\n* Upper code node is doing inner,left,outer join\n* lower code node is used to append the two data inputs "
      },
      "typeVersion": 1
    },
    {
      "id": "7b01216f-f720-47c1-8eac-c051aaadbea8",
      "name": "Sticky Note27",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -440,
        3560
      ],
      "parameters": {
        "color": 5,
        "width": 360,
        "height": 420,
        "content": "##  Cleaning Operation using Python\n\n\n* Upper code node is doing inner,left,outer join\n* lower code node is used to append the two data inputs "
      },
      "typeVersion": 1
    },
    {
      "id": "69e5cebd-ed2f-4938-af7a-7008aa3edb08",
      "name": "Operation Classifier",
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "position": [
        -1260,
        2380
      ],
      "parameters": {
        "options": {},
        "inputText": "={{ $json.query }}",
        "categories": {
          "categories": [
            {
              "category": "Join",
              "description": "The text or json will contain Join"
            },
            {
              "category": "Group By/Summarize",
              "description": "It will contain Group By /Summarize"
            },
            {
              "category": "Fetch weblink",
              "description": "it will contain the request to fetch weblink or fetch file name "
            },
            {
              "category": "clean,transform fetch_type",
              "description": "I t will contain the keywords clean transform or fetch type"
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "6ff07bb8-f32f-468c-834a-6148df6ed871",
      "name": "JSON PARSER (Join)",
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "position": [
        -640,
        2000
      ],
      "parameters": {
        "text": "={{ $json.query }}",
        "options": {
          "systemPromptTemplate": "=You will receive a string (plain text, HTML, or JSON) describing a spreadsheet join operation.\n\nYour task is to extract and return a JSON object with the following structure:\n\n\"operation\": must be \"Join\"\n\n\"Join_criteria\": object with:\n\n\"join_type\": one of \"left\", \"right\", \"inner\", \"outer\", \"append\"\n\n\"left_on\": join key from the left table (string)\n\n\"right_on\": join key from the right table (string)\n\n\"Left_table_name\": name of the left table (string)\n\n\"left_web_link\": Google Sheet link for the left table (string)\n\n\"right_table_name\": name of the right table (string)\n\n\"right_web_link\": Google Sheet link for the right table (string)\n\nRules:\nIf valid JSON input is found, validate and clean it:\n\n\"operation\" must be \"Join\" \n\nAll fields must be non-empty strings.\n\n\"join_type\" must be one of: \"left\", \"right\", \"inner\", \"outer\", \"append\"\n\nBoth web links must be valid Google Sheets URLs.\n\nIf the input is plain text:\n\nIdentify join intent (join, merge, combine, append)\n\nExtract table names, join type, join columns, and links.\n\nBuild and return the correct JSON structure."
        },
        "schemaType": "fromJson",
        "jsonSchemaExample": "{\n  \"operation\": \"Join\",\n  \"Join_criteria\": {\n    \"join_type\": \"left\",\n    \"left_on\": \"uni_key\",\n    \"right_on\": \"uni_key\"\n  },\n  \"Left_table_name\": \"Master\",\n  \"left_web_link\": \"https://docs.google.com/spreadsheets/d/15plVVTeh_U7vmqTv9Bpyn5sCEprxPnt0SePY4wXPebQ/edit?usp=drive_link\",\n  \"right_table_name\": \"customer_info\",\n  \"right_web_link\": \"https://docs.google.com/spreadsheets/d/1UOWKzEHf5Y2XtYuAQ-hkJotc89E2tiZVWGeoXXMSaqg/edit?usp=drive_link\"\n}\n"
      },
      "typeVersion": 1
    },
    {
      "id": "2c0ebd8f-42ca-4b38-9fb2-18cc66226369",
      "name": "Sticky Note28",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        880,
        2140
      ],
      "parameters": {
        "color": 6,
        "width": 540,
        "height": 380,
        "content": "## Merge all the Links IDs and Name of files\n\n* Sends the merged infos of all files in the folders to the MIS Agent and agent returns this output to the user on the chat interface."
      },
      "typeVersion": 1
    },
    {
      "id": "3aebcee1-ddc3-45d7-b7de-1ba3c4818597",
      "name": "OpenAI Chat Model7",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -900,
        1400
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "OizdHUANhz9NIHyd",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "4991e2c1-f1dc-4a18-8a33-9d9f3c65b314",
      "name": "Google Sheets8",
      "type": "n8n-nodes-base.googleSheetsTool",
      "position": [
        -140,
        1360
      ],
      "parameters": {
        "options": {},
        "sheetName": {
          "__rl": true,
          "mode": "name",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Sheet', ``, 'string') }}"
        },
        "documentId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Document', ``, 'string') }}"
        }
      },
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0RSJGMBcFzxY9GkS",
          "name": "Google Sheets account"
        }
      },
      "typeVersion": 4.5
    },
    {
      "id": "19a4eff9-5541-47b0-9192-c24ab295c68b",
      "name": "Call n8n Workflow Tool1",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        -440,
        1420
      ],
      "parameters": {
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "3KKj6urRnJ43gpVk",
          "cachedResultName": "AI powered MIS agent_updated _main_wip"
        },
        "description": "Call this tool to fetch the data from the work flow.",
        "workflowInputs": {
          "value": {},
          "schema": [],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "814c1646-287d-49d9-90ec-b7a98bb8609e",
      "name": "Simple Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        -620,
        1400
      ],
      "parameters": {
        "contextWindowLength": 20
      },
      "typeVersion": 1.3
    },
    {
      "id": "66d43d96-db19-4d21-bf1c-fe80ed4a737b",
      "name": "Calculator",
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "position": [
        -300,
        1500
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "a9d19075-e124-4897-b427-81a13044f72b",
      "name": "MIS Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -600,
        1140
      ],
      "parameters": {
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "=You are a polite and precise Q&A assistant designed to manage and respond to user inquiries regarding file data. You interact with an n8n workflow tool to fetch and process file information. Your tasks and behavior are:\n\n\n\nData Retrieval from n8n Workflow Tool or PostgreSQL\nWhenever file information is required (such as file name, file ID, or webViewLink):\n\nPrimary Source: Retrieve the data using the fetch_postgres tool from the table named file_folder_metadata.\n\nFallback: If fetch_postgres fails or returns incomplete data, attempt to retrieve the data from the n8n workflow tool or memory.\n\nResponding to User Queries About Files\nIf the user asks about available files, respond only with file names (no IDs or links).\n\nIf the user asks about file IDs, respond with file names along with their corresponding IDs.\n\nIf the user asks for URLs or links, respond with file names and their associated webViewLinks.\n\nAlways ensure you retrieve fresh data using fetch_postgres first, falling back to memory or the n8n tool if necessary.\n\nRetrieving Top N Rows from a File\nWhen asked for top N rows from a specific file (e.g., \u201cShow the top 5 rows from the file customer_info\u201d):\n\nMatch the file name and fetch its webViewLink using fetch_postgres from file_folder_metadata.\n\nIf not found, fall back to retrieving from memory or n8n workflow.\n\nPass this link to the Google Sheets tool with the sheet name set to raw_data.\n\nDisplay in the following format:\n\nHere are the top [n] rows from the \u201c[file name]\u201d data:\n```\nColumn1     Column2     Column3  \nvalue1      value2      value3  \nvalue4      value5      value6  \n```\nEnd the response with: \u201cWould you like to know anything else?\u201d\n\nEnsure the output has no escape characters like \\n \u2014 it must appear cleanly aligned.\n\nSummarization and Aggregation Requests\nWhen a user requests a summary or aggregation of data:\n\nAsk for the file name (if not specified).\n***\nRetrieve the file\u2019s webViewLink using fetch_postgres from file_folder_metadata, or fall back to memory/n8n if needed.\n***\nSummarization and Aggregation Requests\nWhen a user requests a summary or aggregation of data:\n\nAsk for the file name (if not specified).\n***\nRetrieve the file\u2019s webViewLink using fetch_postgres from file_folder_metadata, or fall back to memory/n8n if needed.\n***\n\ncall the google sheet tool with appropriate webview link\n\nShow available columnns retrieved from the the google sheet tool along with aggreations options of the file like:\nHere are the available columns in the file \u201c[file name]\u201d:\n```\n1.Column1  \n2.Column2  \n3.Column3\n```\n\n\nWhich aggregation functions would you like to apply on which columns?  \nAvailable aggregation functions are:  \n- sum  \n- avg (average)  \n- min  \n- max  \n- count  \n- median  \n- std (standard deviation)  \n- var (variance)  \n- first (first value)  \n- last (last value)\n```\n\n\nPrompt:\n\u201cYou can optionally specify columns to group by (enter comma-separated numbers), or type \u2018none\u2019 to summarize without grouping.\u201d\n\n\n\nConfirm the selections and build the following summarization JSON :\n\n\n{\n  \"operation\": \"Summarize\",\n  \"Table_name\": \"[file name]\",\n  \"link\": \"[webViewLink]\",\n  \"summarize\": {\n    \"group_by\": [ /* selected columns or [] */ ],\n    \"aggregations\": [\n      {\n        \"column\": \"revenue\",\n        \"agg\": \"sum\",\n        \"alias\": \"Sum_revenue\"\n      },\n      {\n        \"column\": \"discount\",\n        \"agg\": \"avg\",\n        \"alias\": \"Avg_discount\"\n      }\n    ]\n  }\n}\nConfirm with the user, then proceed and ask them to wait briefly.\nsend the build json to n8nworkflow tool.\n\nOnce the result is retrieved from the n8n workflow tool, \n\nif group by is not none then you will recieve the data from n8n workflow tool like below\n[\n  {\n    \"file_address\": \"https://drive.google.com/file/d/1lqFVt-o4m8cogZtXXZCntiDhaKZSw8Z2/view?usp=drivesdk\",\n    \"file_names\": \"File.csv\"\n  }\n]\naccess the \"[file_address]\" and \"[file_names]\" from the retrieved data after the summarize operation  present to the user like below\n```\nGrouping the results is has been successful :\n\nHere are the following details :\n\nName fo file : \ud83d\udcc4 [file_names](file_address) \n\n```\nResult file is the file name recieved from the n8n workflow tool and webview link is also fetched from the n8nworkflow tool.\n\nif  group by none then\nyou will recieve the data from n8n workflow tool like below\nJSON array like this:\n\n[  \n  { \"Avg_Quantity\": 10.731462925851703, \"Sum_Total_Sales\": 5793237, \"Count_Product\": 499 }  \n]\n\nPresent the data in a markdown table with column headers matching the JSON keys exactly and values formatted with up to two decimals like :\n\n- Example output format:\n```\n| Avg_Quantity | Sum_Total_Sales | Count_Product |\n|--------------|-----------------|---------------|\n| 10.73        | 5793237.00      | 499.00        |\n```\n\nJoin Requests (MODIFIED)\nWhen the user wants to join two files:\n\nAsk for:\n\nLeft table name\n\nRight table name\n\nJoin type: inner, left, right, full, or append\n\nJoin keys:\n\nFor standard joins: left_on and right_on\n\nFor append joins:\nAsk the user:\n\u201cSince this is an append operation, please specify the column on which duplicates should be removed.\u201d\n\nUse this key as left_on\n\nLeave right_on as an empty string \"\"\n\nRetrieve webViewLinks for both tables using fetch_postgres from file_folder_metadata. If not found, fall back to n8n/memory.\n\nConfirm join details with the user.\n\nBuild the join JSON:\n\n{\n\"operation\": \"Join\",\n\"Join_criteria\": {\n\"join_type\": \"[join_type]\",\n\"left_on\": \"[left_key]\", // For append, this is the deduplication key\n\"right_on\": \"[right_key]\" // For append, this remains an empty string \"\"\n},\n\"Left_table_name\": \"[left_table]\",\n\"left_web_link\": \"[left_webViewLink]\",\n\"right_table_name\": \"[right_table]\",\n\"right_web_link\": \"[right_webViewLink]\"\n}\n\nConfirm with the user in natural language like\n\nYou want to perform an inner join between Master_Sheet and customer_info using the uni_key column.\nShall I proceed with this join?,\n\nand ask them to wait briefly.\n\nAfter the join is completed and the workflow returns the result in following format:\n\n[\n  {\n    \"webViewLink\": \"https://drive.google.com/file/d/1rlPMVe5CzPoH0cDIF5Aeu_Y6gMrhzCRQ/view?usp=drivesdk\",\n    \"name\": \"_merged_2025-05-23T12:17:09.223+02:00\"\n  }\n]\n\naccess  the data only if you have recieved the above input and present it like below:\n\nThe join operation has been completed successfully.\n\nHere is your merged file:\n\ud83d\udcc4 [name](webViewLink)\nThen ask: \u201cWould you like to do anything else with this merged data?\u201d\n\nHandling Missing Links or Data\nBefore any summarization or join, ensure you have the necessary webViewLink for all files.\n\nIf any link is missing:\n\nTry to fetch it from memory or the n8n workflow tool.\n\nIf it still cannot be found, inform the user politely and request clarification.\n\nData Cleaning Workflow\nif user asks for cleaning data transformation or data type change it is a part of cleaning step\n\nAsk:\n\u201cWhich file would you like to clean?\u201d\n\nStep B: Retrieve metadata and webViewLink.\nStep C: Display available columns:\n\nThe file \u201c[file name]\u201d contains the following columns:\n1.Column1\n2.Column2\n3.Column3\n\nStep D: Ask:\n\n\u201cPlease choose the columns and the cleaning operations you\u2019d like to apply.\nYou can choose from:\n\nfetch_type, trim, replace, fillna, dropna, drop_duplicates, rename, case_standardize, normalize_whitespace\u201d\n\nBased on the user's request\nBuild cleaning JSON format:\n\n[\n{\n\"operation\": \"Clean\",\n\"Clean\": {\n\"clean_criteria\": {\n\"fetch_type\": [...],\n\"transform\": { \"col\": \"type\" },\n\"replace\": { \"col\": [[\"old\", \"new\"]] },\n\"trim\": [...],\n\"fillna\": { \"col\": \"value\" },\n\"dropna\": { \"cols\": [...], \"how\": \"any\" },\n\"drop_duplicates\": true,\n\"rename\": { \"old\": \"new\" },\n\"case_standardize\": { \"col\": \"lower/title\" },\n\"normalize_whitespace\": [...],\n\"remove_special_chars\": { \"col\": [\"@\", \"$\", \"#\"] },\n\"cast_columns\": { \"col\": \"float64\" },\n\"round_columns\": { \"col\": 2 }\n},\n\"table_name\": \"[file name]\",\n\"web_link\": \"[webViewLink]\"\n}\n}\n]\n\nand send the instructions to n8nworkflow tool\nand while waiting for the result present user with below message\n\n\u201cCleaning operation in progress. Please wait...\u201d\n\nonce you get the result\nand return the result to the user\nStep F: If fetch_type option was used:\n\nShow the returned data in following format:\n\nHere are the inferred data types for the columns:\n\nColumn Name       Inferred Type  \nRegion            str  \nSales Rep         str  \n\nIf the cleaning was other than fetch_type\npresent the returned result as follows\n\nThe cleaning has been completed successfully.\n\nHere is your cleaned file:\n\ud83d\udcc4 Cleaned File Name(webViewLink)\nWould you like to do anything else?\n\nError Handling and Retrying\n\nIf an error occurs (e.g., invalid links), retry automatically using updated data.\n\nIf the retry fails, clearly and politely notify the user.\n\nFinal Conversation Closure\nProvide a neat summary of the tasks performed.\n\nAsk the user for feedback or a rating politely.\n\nImportant Notes\nDo not hallucinate or fabricate data.\n\nAvoid hardcoded responses \u2014 always fetch and use live data.\n\nNEVER re-confirm if user has already given confirmation and inputs are complete.\n\nFormat all responses clearly and politely.\n\nFor summarization, always present the resulting summary data in clean tabular format.\n\nStrict Data Verification and Error Handling\n\nBefore presenting any file name, file ID, or webViewLink to the user, the assistant must:\n\nRigorously verify that the data has been successfully retrieved from the primary source (fetch_postgres) or the fallback source (n8n workflow or memory).\nConfirm that the webViewLink and file metadata correspond exactly to the file in question as per the latest fetched data.\nIf any required data (such as the webViewLink) is missing, incomplete, or invalid, the assistant must:\nNot respond with any fabricated, guessed, or placeholder file names or links.\nPolitely inform the user that the data cannot be retrieved at the moment and request to retry or provide additional information.\nImplement automatic retry logic to attempt fetching missing or invalid data again before informing the user of an issue.\nEnsure consistency between the file name, file ID, and webViewLink in all user responses.\nNever output any response containing incomplete or inaccurate file metadata.\nExample compliance message to include internally:\n\u201cData verification failed for file [file name]. Missing or invalid webViewLink. Retrying data fetch.\u201d\n\nIf after retries valid data is still unavailable, respond politely:\n\u201cApologies, I am currently unable to retrieve the requested file\u2019s link. Could you please confirm the file name or try again later?\u201d"
        },
        "promptType": "define"
      },
      "typeVersion": 1.9
    },
    {
      "id": "79734a98-3277-4040-ac58-7f9d2d8e13cb",
      "name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "position": [
        1780,
        340
      ],
      "parameters": {
        "mode": "insert",
        "options": {},
        "pineconeIndex": {
          "__rl": true,
          "mode": "list",
          "value": "knowledge",
          "cachedResultName": "knowledge"
        },
        "embeddingBatchSize": 1
      },
      "credentials": {
        "pineconeApi": {
          "id": "EFTilwQcaf38yPZg",
          "name": "PineconeApi account"
        }
      },
      "typeVersion": 1.1
    },
    {
      "id": "355b563c-032c-444c-a395-eab79907f8b4",
      "name": "Sticky Note29",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        960,
        200
      ],
      "parameters": {
        "color": 4,
        "width": 1160,
        "height": 720,
        "content": "# \ud83d\udcda \ud83e\udde0 Knowledge Base\n"
      },
      "typeVersion": 1
    },
    {
      "id": "b522f8f1-7dad-455d-b01b-f00ba7690780",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1540,
        320
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 3
    },
    {
      "id": "fdc2b4ab-0d7b-4512-9ac2-b66a3d66a2ec",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        1820,
        560
      ],
      "parameters": {
        "options": {},
        "dataType": "binary"
      },
      "typeVersion": 1
    },
    {
      "id": "4f5aab64-6d87-47af-8c07-183f59a370dc",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "position": [
        1960,
        720
      ],
      "parameters": {
        "options": {},
        "chunkOverlap": 200
      },
      "typeVersion": 1
    },
    {
      "id": "24ae13bd-d9c6-4570-ad45-a27b2471dd0e",
      "name": "Knowledge_base",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        1220,
        320
      ],
      "parameters": {
        "filter": {
          "folderId": {
            "__rl": true,
            "mode": "url",
            "value": "=https://drive.google.com/drive/folders/1gijuy6nWtqdK7PT2xFW8wULCsijdlD4S?usp=drive_link"
          }
        },
        "options": {
          "fields": [
            "id",
            "name",
            "webViewLink"
          ]
        },
        "resource": "fileFolder",
        "returnAll": true
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "5b91eafa-20fa-44ee-bbc5-80a937e60e47",
      "name": "Download files",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        1380,
        320
      ],
      "parameters": {
        "fileId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $json.webViewLink }}"
        },
        "options": {},
        "operation": "download"
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "89c6a1bb-dee6-441c-9dee-89def66d5d94",
      "name": "Google Drive Trigger",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "position": [
        960,
        -680
      ],
      "parameters": {
        "event": "fileCreated",
        "options": {},
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "mode": "list",
          "value": "13HktrlqEMhtuPi0kmOD_Xb0pIp0REs_O",
          "cachedResultUrl": "https://drive.google.com/drive/folders/13HktrlqEMhtuPi0kmOD_Xb0pIp0REs_O",
          "cachedResultName": "Daily Sales"
        }
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "0ac0e0a9-55f1-4cf3-8df6-a64d99bd09c6",
      "name": "Postgres2",
      "type": "n8n-nodes-base.postgres",
      "position": [
        1780,
        -500
      ],
      "parameters": {
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "file_folder_metadata",
          "cachedResultName": "file_folder_metadata"
        },
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "columns": {
          "value": {
            "file_id": "={{ $json.id }}",
            "file_name": "={{ $json.name }}",
            "folder_url": "={{ $json.folder_url }}",
            "folder_name": "={{ $json.folder_name }}",
            "webviewlink": "={{ $json.webViewLink }}",
            "created_time": "={{ $json.createdTime }}"
          },
          "schema": [
            {
              "id": "folder_name",
              "type": "string",
              "display": true,
              "required": true,
              "displayName": "folder_name",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "folder_url",
              "type": "string",
              "display": true,
              "required": true,
              "displayName": "folder_url",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "file_id",
              "type": "string",
              "display": true,
              "required": true,
              "displayName": "file_id",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "webviewlink",
              "type": "string",
              "display": true,
              "required": true,
              "displayName": "webviewlink",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "file_name",
              "type": "string",
              "display": true,
              "removed": false,
              "required": true,
              "displayName": "file_name",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "created_time",
              "type": "dateTime",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "created_time",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "credentials": {
        "postgres": {
          "id": "407qujgdmoInbADP",
          "name": "Postgres account"
        }
      },
      "typeVersion": 2.6
    },
    {
      "id": "d43abf0d-7c66-4762-ac2d-ec230232eabc",
      "name": "Google Drive Trigger1",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "position": [
        960,
        -500
      ],
      "parameters": {
        "event": "fileCreated",
        "options": {},
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "mode": "list",
          "value": "1_NDCCeRcI8-EGNUGJPP9_ovzvuzpLXY1",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1_NDCCeRcI8-EGNUGJPP9_ovzvuzpLXY1",
          "cachedResultName": "customer_info"
        }
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "be289ce0-55fb-474c-ae3b-318f0306650e",
      "name": "Google Drive Trigger2",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "position": [
        960,
        -300
      ],
      "parameters": {
        "event": "fileCreated",
        "options": {},
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "mode": "list",
          "value": "1QGDs470I8W0nGKLsx128RLr6mxGhbmxg",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1QGDs470I8W0nGKLsx128RLr6mxGhbmxg",
          "cachedResultName": "Address"
        }
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "dc02d656-fee4-4510-b820-c096cfa9b077",
      "name": "Edit Fields8",
      "type": "n8n-nodes-base.set",
      "position": [
        1200,
        -680
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "33205a75-f808-49b9-9ce4-07c497a5a6fc",
              "name": "folder_name",
              "type": "string",
              "value": "Daily Sales"
            },
            {
              "id": "b1fef261-5342-4ca3-9481-73251e213dce",
              "name": "folder_url",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/13HktrlqEMhtuPi0kmOD_Xb0pIp0REs_O?usp=drive_link"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "0746404d-a071-4156-bf79-970eeb8ac58f",
      "name": "Edit Fields9",
      "type": "n8n-nodes-base.set",
      "position": [
        1200,
        -500
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "ba6b951b-de2b-4df1-91fe-54d6b6696212",
              "name": "folder_name",
              "type": "string",
              "value": "customer_info"
            },
            {
              "id": "29e7b281-9330-4d4c-99e6-427b94976fd8",
              "name": "folder_url",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/1_NDCCeRcI8-EGNUGJPP9_ovzvuzpLXY1?usp=drive_link"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "22c77d32-59f8-4fee-90c0-eed9b54fdac1",
      "name": "Edit Fields11",
      "type": "n8n-nodes-base.set",
      "position": [
        1200,
        -300
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "c4211cd7-429e-4153-85da-ea01a1bec5f0",
              "name": "folder_name",
              "type": "string",
              "value": "Address"
            },
            {
              "id": "674741b6-2fc2-4c18-8b53-d3cbc85f8ef2",
              "name": "folder_url",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/1QGDs470I8W0nGKLsx128RLr6mxGhbmxg?usp=drive_link"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "8ad234f3-80d3-4788-b903-ebf944ea33cf",
      "name": "Google Drive Trigger3",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "position": [
        960,
        -100
      ],
      "parameters": {
        "event": "fileCreated",
        "options": {},
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "mode": "list",
          "value": "1ZxZcVXnsI_13w2A-aoOGCxw922Uf7-mx",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1ZxZcVXnsI_13w2A-aoOGCxw922Uf7-mx",
          "cachedResultName": "Master Folder"
        }
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "5695a61e-3b66-4ca3-b314-25099f7e5399",
      "name": "Edit Fields13",
      "type": "n8n-nodes-base.set",
      "position": [
        1200,
        -100
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "c4211cd7-429e-4153-85da-ea01a1bec5f0",
              "name": "folder_name",
              "type": "string",
              "value": "Master Folder"
            },
            {
              "id": "eabf355d-a4f1-45e8-b59a-77be9cd2be33",
              "name": "folder_url",
              "type": "string",
              "value": "https://drive.google.com/drive/folders/1ZxZcVXnsI_13w2A-aoOGCxw922Uf7-mx?usp=drive_link"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "da5fb84a-82e2-4127-a0c6-02833d2f45e1",
      "name": "Sticky Note30",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        360,
        -760
      ],
      "parameters": {
        "color": 5,
        "width": 1160,
        "height": 860,
        "content": "## Folder and File Links updated to the Data Base\n\n\n\n\n\n\n\n\n\n* Whenever a File is created in specific folder it will be uploaded \n  to a database table where there all information about folder name id \n  of specific file and links will be instantly updated.\n\n* Agent will be able to fast query the links from the database and\n   use it for reading/ appending data from the sheets,\n   also it will be used in other operations in this workflow.\n\n* Although there is also fallback option available for the agent \n  to fetch the live links from the folders ,you can see it \n  below under Fetch Links Section.\n\n* Even if the database is not available one can \n  use the Fetch Link section."
      },
      "typeVersion": 1
    },
    {
      "id": "fff83766-0ab3-4bea-b82d-1f26db710b63",
      "name": "Sticky Note31",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1660,
        -580
      ],
      "parameters": {
        "color": 2,
        "width": 340,
        "height": 240,
        "content": "## Upload to the postgres  db\n"
      },
      "typeVersion": 1
    },
    {
      "id": "15a5084b-d9e3-4c82-a7d5-0f26892d2663",
      "name": "Postgres",
      "type": "n8n-nodes-base.postgresTool",
      "position": [
        -180,
        1560
      ],
      "parameters": {
        "table": {
          "__rl": true,
          "mode": "name",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Table', ``, 'string') }}"
        },
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public",
          "cachedResultName": "public"
        },
        "options": {},
        "operation": "select",
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}"
      },
      "credentials": {
        "postgres": {
          "id": "407qujgdmoInbADP",
          "name": "Postgres account"
        }
      },
      "typeVersion": 2.6
    },
    {
      "id": "1411bf6c-bf77-4aa4-9dd7-1f36759c804f",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "position": [
        1660,
        680
      ],
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "OizdHUANhz9NIHyd",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "f0d44a66-1cbf-405c-b0df-a8d533f33376",
      "name": "Google Sheets4",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -2980,
        2360
      ],
      "parameters": {
        "options": {},
        "sheetName": {
          "__rl": true,
          "mode": "name",
          "value": "raw_data"
        },
        "documentId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $json.message.content.link }}"
        }
      },
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0RSJGMBcFzxY9GkS",
          "name": "Google Sheets account"
        }
      },
      "typeVersion": 4.5
    },
    {
      "id": "eb697cae-2f46-47bd-8792-9078f4707366",
      "name": "Edit Fields14",
      "type": "n8n-nodes-base.set",
      "position": [
        -3160,
        2360
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "05a9d4a5-e00e-450c-9d40-b23e497759b4",
              "name": "message.content",
              "type": "object",
              "value": "={{ $json.message.content }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "fd70b495-b18b-4f6a-9c76-74529dfc117c",
      "name": "Code7",
      "type": "n8n-nodes-base.code",
      "position": [
        -2620,
        2200
      ],
      "parameters": {
        "language": "python",
        "pythonCode": "import pandas as pd\n\ndef jsproxy_to_python(obj):\n    from pyodide.ffi import JsProxy\n\n    if isinstance(obj, JsProxy):\n        if hasattr(obj, 'length'):  # Array-like\n            return [jsproxy_to_python(obj[i]) for i in range(obj.length)]\n        else:  # Object/dict-like\n            return {k: jsproxy_to_python(obj[k]) for k in obj.keys()}\n    elif isinstance(obj, list):\n        return [jsproxy_to_python(i) for i in obj]\n    elif isinstance(obj, dict):\n        return {k: jsproxy_to_python(v) for k, v in obj.items()}\n    else:\n        return obj\n\nitems = _input.all()\ndata = []\nsummarize_config = None\n\nfor item in items:\n    json_data = jsproxy_to_python(item['json'])\n    if summarize_config is None and 'summarize' in json_data:\n        summarize_config = json_data['summarize']\n    json_data.pop('summarize', None)\n    data.append(json_data)\n\ndf = pd.DataFrame(data)\n\nif summarize_config is None:\n    raise Exception(\"Summarize config not found\")\n\ngroup_by = summarize_config.get(\"group_by\", [])\naggregations = summarize_config.get(\"aggregations\", [])\n\nagg_aliases = {\n    \"avg\": \"mean\",\n    \"mean\": \"mean\",\n    \"sum\": \"sum\",\n    \"min\": \"min\",\n    \"max\": \"max\",\n    \"std\": \"std\",\n    \"var\": \"var\",\n    \"count\": \"count\",\n    \"median\": \"median\",\n    \"mode\": \"mode\"\n}\n\nagg_dict = {}\nalias_map = {}\nmode_columns = []\n\nfor agg in aggregations:\n    col = agg[\"column\"]\n    func = agg[\"agg\"].lower()\n    alias = agg.get(\"alias\", f\"{func}_{col}\")\n    pandas_func = agg_aliases.get(func, func)\n    if pandas_func == \"mode\":\n        mode_columns.append((col, alias))\n    else:\n        agg_dict[col] = pandas_func\n        alias_map[(col, pandas_func)] = alias\n\nfor col in agg_dict.keys():\n    df[col] = pd.to_numeric(df[col], errors='coerce')\n\nif group_by:\n    grouped = df.groupby(group_by)\n    agg_results = grouped.agg(agg_dict).reset_index()\n\n    new_columns = []\n    for col in agg_results.columns:\n        if col in group_by:\n            new_columns.append(col)\n        else:\n            alias_found = None\n            for (c, f), a in alias_map.items():\n                if c == col:\n                    alias_found = a\n                    break\n            new_columns.append(alias_found if alias_found else col)\n    agg_results.columns = new_columns\n\n    for col, alias in mode_columns:\n        mode_series = grouped[col].apply(lambda x: x.mode().iloc[0] if not x.mode().empty else None)\n        mode_series = mode_series.reset_index().rename(columns={col: alias})\n        agg_results = agg_results.merge(mode_series, on=group_by, how='left')\n\n    result = agg_results.to_dict(orient='records')\n\nelse:\n    result = {}\n    for col, func in agg_dict.items():\n        result[alias_map[(col, func)]] = getattr(df[col], func)()\n    for col, alias in mode_columns:\n        mode_val = df[col].mode()\n        result[alias] = mode_val.iloc[0] if not mode_val.empty else None\n    result = [result]\n\n# Correct return format for n8n\nreturn [{\"json\": record} for record in result]\n"
      },
      "typeVersion": 2
    },
    {
      "id": "2296b386-1c64-4963-817a-d947d1bdeca7",
      "name": "Edit Fields15",
      "type": "n8n-nodes-base.set",
      "position": [
        -2820,
        2360
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "6b039016-6937-422c-abd9-1a1308edc41b",
              "name": "summarize",
              "type": "object",
              "value": "={{ $('Edit Fields14').item.json.message.content.summarize }}"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "3c782bd1-cea7-4313-abd7-7bf8c2f15f56",
      "name": "OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        -620,
        2180
      ],
      "parameters": {
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o",
          "cachedResultName": "GPT-4O"
        },
        "options": {},
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "=You are a JSON-only parser for structured summarization instructions.\n\nYou will receive a JSON object with a single key `\"query\"`. The value of `\"query\"` can be:\n\n1. A stringified JSON object (e.g., escaped quotes), or  \n2. A raw JSON object directly.\n\nYour task is to parse and validate the `\"query\"` as a JSON object. If it contains:\n\n- `\"operation\": \"Summarize\"`\n- `\"Table_name\"` (required, must be a non-empty string)\n- `\"link\"` (required, must be a valid URL)\n- `\"summarize\"` (object) with:\n  - `\"group_by\"` (optional, must be a list of strings if present)\n  - `\"aggregations\"` (required, must be a list of objects, each with):\n    - `\"column\"` (string, required)\n    - `\"agg\"` (string, one of: \"sum\", \"avg\", \"min\", \"max\", \"count\", \"count_distinct\", \"median\", \"std\", \"var\", \"mode\")\n    - `\"alias\"` (string, required)\n\nThen return the **parsed JSON object exactly**.\n\n### Important:\n- Do not modify field names or values.\n- Do not guess or fill in missing values.\n- If the format is incorrect or missing required fields, return:\n\n```json\n{ \"error\": \"Invalid input format. Expected a 'Summarize' operation JSON.\" }\n\nuser input :\n{{ $json.query }}\n"
            }
          ]
        },
        "jsonOutput": true
      },
      "credentials": {
        "openAiApi": {
          "id": "OizdHUANhz9NIHyd",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.8
    },
    {
      "id": "628d6bfb-b19a-49dc-a268-9ad91d4a6f34",
      "name": "Switch1",
      "type": "n8n-nodes-base.switch",
      "position": [
        -460,
        2660
      ],
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "f0c42098-ed9a-4a38-a091-b20705b3703b",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.message.content.operation }}",
                    "rightValue": "Summarize"
                  }
                ]
              }
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "bcd56579-693c-42e1-98e7-523611e4da45",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.output.operation }}",
                    "rightValue": "Join"
                  }
                ]
              }
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 3.2
    },
    {
      "id": "cc952b18-cae7-46e7-b9c4-b3bce5352491",
      "name": "Code10",
      "type": "n8n-nodes-base.code",
      "position": [
        -2620,
        2600
      ],
      "parameters": {
        "language": "python",
        "pythonCode": "import pandas as pd\n\ndef jsproxy_to_python(obj):\n    from pyodide.ffi import JsProxy\n    if isinstance(obj, JsProxy):\n        if hasattr(obj, 'length'):\n            return [jsproxy_to_python(obj[i]) for i in range(obj.length)]\n        else:\n            return {k: jsproxy_to_python(obj[k]) for k in obj.keys()}\n    elif isinstance(obj, list):\n        return [jsproxy_to_python(i) for i in obj]\n    elif isinstance(obj, dict):\n        return {k: jsproxy_to_python(v) for k, v in obj.items()}\n    else:\n        return obj\n\nitems = _input.all()\ndata = []\nsummarize_config = None\n\nfor item in items:\n    json_data = jsproxy_to_python(item['json'])\n    if summarize_config is None and 'summarize' in json_data:\n        summarize_config = json_data['summarize']\n    json_data.pop('summarize', None)\n    data.append(json_data)\n\ndf = pd.DataFrame(data)\n\nif summarize_config is None:\n    raise Exception(\"Summarize config not found\")\n\ngroup_by = summarize_config.get(\"group_by\", [])\naggregations = summarize_config.get(\"aggregations\", [])\n\nagg_aliases = {\n    \"avg\": \"mean\",\n    \"mean\": \"mean\",\n    \"sum\": \"sum\",\n    \"min\": \"min\",\n    \"max\": \"max\",\n    \"std\": \"std\",\n    \"var\": \"var\",\n    \"count\": \"count\",\n    \"median\": \"median\",\n    \"mode\": \"mode\"\n}\n\nagg_dict = {}\nalias_map = {}\nmode_columns = []\ncount_columns = set()\n\nfor agg in aggregations:\n    col = agg[\"column\"]\n    func = agg[\"agg\"].lower()\n    alias = agg.get(\"alias\", f\"{func}_{col}\")\n    pandas_func = agg_aliases.get(func, func)\n\n    if pandas_func == \"mode\":\n        mode_columns.append((col, alias))\n    elif pandas_func == \"count\":\n        count_columns.add(col)\n        agg_dict[col] = \"count\"\n        alias_map[(col, \"count\")] = alias\n    else:\n        agg_dict[col] = pandas_func\n        alias_map[(col, pandas_func)] = alias\n\n# Only convert numeric columns if not used for count/mode\nfor col, func in agg_dict.items():\n    if func not in [\"count\", \"mode\"]:\n        df[col] = pd.to_numeric(df[col], errors='coerce')\n\nif group_by:\n    grouped = df.groupby(group_by)\n    agg_results = grouped.agg(agg_dict).reset_index()\n\n    # Rename columns with aliases\n    new_columns = []\n    for col in agg_results.columns:\n        if col in group_by:\n            new_columns.append(col)\n        else:\n            alias_found = None\n            for (c, f), a in alias_map.items():\n                if col == c and f == agg_dict[c]:\n                    alias_found = a\n                    break\n            new_columns.append(alias_found if alias_found else col)\n    agg_results.columns = new_columns\n\n    # Handle mode columns\n    for col, alias in mode_columns:\n        mode_series = grouped[col].apply(lambda x: x.mode().iloc[0] if not x.mode().empty else None)\n        mode_series = mode_series.reset_index().rename(columns={col: alias})\n        agg_results = agg_results.merge(mode_series, on=group_by, how='left')\n\n    result = agg_results.to_dict(orient='records')\n\nelse:\n    result = {}\n    for col, func in agg_dict.items():\n        val = getattr(df[col], func)()\n        if hasattr(val, \"item\"):\n            val = val.item()\n        result[alias_map[(col, func)]] = val\n    for col, alias in mode_columns:\n        mode_val = df[col].mode()\n        result[alias] = mode_val.iloc[0] if not mode_val.empty else None\n    result = [result]\n\nreturn [{\"json\": record} for record in result]\n"
      },
      "typeVersion": 2
    },
    {
      "id": "135fdb3d-37f9-4603-8ad0-8c80637553a9",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        -2620,
        2360
      ],
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "ad94d372-44b2-41fe-aa1c-3faa87cf2929",
                    "operator": {
                      "type": "array",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.summarize.group_by }}",
                    "rightValue": ""
                  }
                ]
              }
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "764ad197-02ed-42ee-8105-51020fffacd2",
                    "operator": {
                      "type": "array",
                      "operation": "empty",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.summarize.group_by }}",
                    "rightValue": ""
                  }
                ]
              }
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 3.2
    },
    {
      "id": "fa3b71e9-d38e-4c5b-b0be-4edc75d0413f",
      "name": "Convert to File2",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        -2440,
        2200
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 1.1
    },
    {
      "id": "0f2dcf21-1519-449b-8628-7b11ae47ee0a",
      "name": "Google Drive9",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        -2280,
        2200
      ],
      "parameters": {
        "name": "__summ",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive",
          "cachedResultUrl": "https://drive.google.com/drive/my-drive",
          "cachedResultName": "My Drive"
        },
        "options": {},
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "1KBsGP16lhMzX2biHFjq0nV8JZjOqeNkE",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1KBsGP16lhMzX2biHFjq0nV8JZjOqeNkE",
          "cachedResultName": "Summarized files"
        }
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "eMo8WuX7low2RZXp",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3
    },
    {
      "id": "b3cff5e5-34c2-42c4-ba3a-445640720e4f",
      "name": "Edit Fields3",
      "type": "n8n-nodes-base.set",
      "position": [
        -2300,
        2400
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "c661f9d4-a423-4989-9dbe-427c9b33705b",
              "name": "file_address",
              "type": "string",
              "value": "={{ $json.webViewLink }}"
            },
            {
              "id": "0d5e0a3f-1d23-42b8-b04c-2cddc69e933c",
              "name": "file_names",
              "type": "string",
              "value": "={{ $json.name }}_{{ $now }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "1f0ecff6-151d-4ffa-a8ef-4c5e434746c9",
      "name": "Sticky Note32",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2440,
        2660
      ],
      "parameters": {
        "color": 6,
        "width": 340,
        "content": "## Aggregation  only\nIt present the aggregated result in the chat interface"
      },
      "typeVersion": 1
    },
    {
      "id": "1ac2025b-b8fc-4238-b2e2-dab38228b6b9",
      "name": "Sticky Note33",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2660,
        2040
      ],
      "parameters": {
        "color": 7,
        "width": 480,
        "height": 140,
        "content": "## Grouping with aggregation\nIt present the grouped result as a link of the csv file uploaded to the googledrive in the chat interface"
      },
      "typeVersion": 1
    },
    {
      "id": "f19dabe6-f4bb-49e1-a3f2-7da31f6eb37b",
      "name": "When clicking \u2018Test workflow\u2019",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        980,
        320
      ],
      "parameters": {},
      "typeVersion": 1
    }
  ],
  "pinData": {
    "Drive Folders URL1": [
      {
        "Address": "https://drive.google.com/drive/folders/1QGDs470I8W0nGKLsx128RLr6mxGhbmxg?usp=drive_link",
        "Master1": "https://drive.google.com/drive/folders/1ZxZcVXnsI_13w2A-aoOGCxw922Uf7-mx?usp=drive_link",
        "Daily Sales": "https://drive.google.com/drive/folders/13HktrlqEMhtuPi0kmOD_Xb0pIp0REs_O?usp=drive_link",
        "customer_info": "https://drive.google.com/drive/folders/1_NDCCeRcI8-EGNUGJPP9_ovzvuzpLXY1?usp=drive_link"
      }
    ]
  },
  "connections": {
    "If": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Sheets3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Google Drive10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        []
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "Convert to File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail": {
      "main": [
        [
          {
            "node": "Text Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Master": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Address": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Edit Fields14",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "ai_tool": [
        [
          {
            "node": "MIS Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "MIS Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Daily Sales": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Google Sheets2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google Sheets6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields6": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields7": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields8": {
      "main": [
        [
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields9": {
      "main": [
        [
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        []
      ]
    },
    "Edit Fields11": {
      "main": [
        [
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields12": {
      "main": [
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields13": {
      "main": [
        [
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields14": {
      "main": [
        [
          {
            "node": "Google Sheets4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields15": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive1": {
      "main": [
        [
          {
            "node": "Google Drive3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive2": {
      "main": [
        [
          {
            "node": "Google Drive4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive3": {
      "main": [
        []
      ]
    },
    "Google Drive5": {
      "main": [
        [
          {
            "node": "Google Drive6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive7": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive8": {
      "main": [
        [
          {
            "node": "Edit Fields10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive9": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "customer_info": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Address Folder": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download files": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets2": {
      "main": [
        [
          {
            "node": "Edit Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets3": {
      "main": [
        [
          {
            "node": "Edit Fields12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets4": {
      "main": [
        [
          {
            "node": "Edit Fields15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets6": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets8": {
      "ai_tool": [
        [
          {
            "node": "MIS Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Knowledge_base": {
      "main": [
        [
          {
            "node": "Download files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "MIS Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Google Drive7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Pinecone Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Classifier": {
      "main": [
        [
          {
            "node": "Daily Sales",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Address",
            "type": "main",
            "index": 0
          },
          {
            "node": "customer_info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Google Drive8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File2": {
      "main": [
        [
          {
            "node": "Google Drive9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Drive Folders URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Drive Folders URL": {
      "main": [
        [
          {
            "node": "Google Drive2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google Drive1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google Drive5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Daily Sales Folder": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Drive Folders URL1": {
      "main": [
        [
          {
            "node": "Daily Sales Folder",
            "type": "main",
            "index": 0
          },
          {
            "node": "Address Folder",
            "type": "main",
            "index": 0
          },
          {
            "node": "customer_info folder",
            "type": "main",
            "index": 0
          },
          {
            "node": "Master",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON PARSER (Join)": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Text Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "JSON PARSER (Join)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Operation Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "MIS Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Operation Classifier": {
      "main": [
        [
          {
            "node": "JSON PARSER (Join)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI1",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "customer_info folder": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Google Drive Trigger1": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive Trigger2": {
      "main": [
        [
          {
            "node": "Edit Fields11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive Trigger3": {
      "main": [
        [
          {
            "node": "Edit Fields13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call n8n Workflow Tool1": {
      "ai_tool": [
        [
          {
            "node": "MIS Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "MIS Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Operation Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking \u2018Test workflow\u2019": {
      "main": [
        [
          {
            "node": "Knowledge_base",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "_metadata": {
    "name": "AI-Powered MIS Agent",
    "used_count": 0,
    "popularity_score": 25,
    "source_url": "https://n8n.io/workflows/4341",
    "scraped_at": "2025-08-21 01:04:28",
    "workflow_id": "ebdc4f02-ce30-57d3-8321-abb932b6ce7b"
  },
  "_filename": "AI_Powered_MIS_Agent.json"
}