{
  "meta": {
    "instanceId": "887e68c374c855e14bcddf7fd3246134e06cbcfdd31b9e2d13325b56915cbc2b",
    "templateCredsSetupCompleted": true
  },
  "nodes": [
    {
      "id": "772d3205-2527-4423-b439-bea601342260",
      "name": "Message server n8n trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        -3520,
        688
      ],
      "webhookId": "c2e535f4-aaff-41a8-b5c4-0f755fd1a282",
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "3TSe0EQmv9VJVyYx",
          "name": "My server group"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "4fc75d03-0b10-4e42-87a6-fb682ae79a85",
      "name": "Message server n8n send",
      "type": "n8n-nodes-magic-inbox.magicInboxSend",
      "position": [
        -3248,
        688
      ],
      "parameters": {
        "message": "Example: Thank you for participating in our Facebook game and here, as promised, is the premium workflow you won!",
        "senderId": "Example: \"Your name\" : \"your Magic Inbox url\"",
        "addressBook": "Charles creator magic nodes\nhttps://n8n.srv866102.hstgr.cloud/webhook/6975998a-c75b-4832-aa65-bae4ef191674/magic-inbox \n\nA workflow will be gained if you send me a message with your Magic Inbox address",
        "contentType": "workflow_with_message",
        "workflowJson": "{   \"nodes\": [     {       \"parameters\": {         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",       \"typeVersion\": 1.1,       \"position\": [         -2620,         1240       ],       \"id\": \"06ffea07-bd3c-4086-9c70-714162c4a869\",       \"name\": \"When chat message received\",       \"webhookId\": \"3babcfb4-9f8e-4b48-8a99-611d83056f9f\",       \"disabled\": true     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         160       ],       \"id\": \"727e531f-fde4-42ff-ae9f-45fce72358c8\",       \"name\": \"Think Visionnaire1\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev.node_type }}{{ $json.output.node_assignments.golden_dev.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502 golden_dev1_webhook_trigger \u2192 USE \\\"node-1\\\"                \u2502\\n\u2502 golden_dev2_function_processor \u2192 USE \\\"node-2\\\"             \u2502\\n\u2502 golden_dev3_http_enrichment \u2192 USE \\\"node-3\\\"                \u2502\\n\u2502 golden_dev4_set_data \u2192 USE \\\"node-4\\\"                       \u2502\\n\u2502 golden_dev5_gmail_sender \u2192 USE \\\"node-5\\\"                   \u2502\\n\u2502 golden_dev6_webhook_response \u2192 USE \\\"node-6\\\"               \u2502\\n\u2502 golden_dev_switch_router \u2192 USE \\\"node-7\\\"                   \u2502\\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502             \\n\u2502 golden_dev_switch_router \u2192 USE \\\"node-7\\\"                   \u2502\\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500 GOLDEN DEV SIGNATURE PROTOCOL \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Start ALL outputs with your signature marker   \u2502\\n\u2502                                                           \u2502\\n\u2502 SIGNATURE FORMAT:                                         \u2502\\n\u2502 {                                                         \u2502\\n\u2502   \\\"golden_dev_signature\\\": \\\"golden_dev[X]_[role]\\\",         \u2502\\n\u2502   \\\"timestamp\\\": \\\"ISO_DATE\\\",                                \u2502\\n\u2502   ... rest of your JSON ...                              \u2502\\n\u2502 }                                                         \u2502\\n\u2502                                                           \u2502\\n\u2502 ROLE ASSIGNMENTS:                                         \u2502\\n\u2502                             \\n\u2502 \u2022 golden_dev_switch_router                            \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\nWORK IN SILENCE. GENERATE DIVINE N8N WORKFLOWS.\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         -60       ],       \"id\": \"46e918c9-46d5-4e4f-931c-2a1bcb5e7fd5\",       \"name\": \"golden_dev\"     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         560       ],       \"id\": \"e0aa8ff8-b3fe-479f-9e1c-877aab26b70c\",       \"name\": \"Think Visionnaire2\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev1.node_type }}\\n{{ $json.output.node_assignments.golden_dev1.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         340       ],       \"id\": \"0adfe0c4-2e34-4480-95a2-69f1e937cac5\",       \"name\": \"golden_dev1\"     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         960       ],       \"id\": \"b235c43a-7753-4955-aa49-f5304033934a\",       \"name\": \"Think Visionnaire3\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev2.node_type }}\\n{{ $json.output.node_assignments.golden_dev2.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502                \\n\u2502 golden_dev2_function_processor \u2192 USE \\\"node-2\\\"             \u2502\\n\u2502                    \\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500 GOLDEN DEV SIGNATURE PROTOCOL \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Start ALL outputs with your signature marker   \u2502\\n\u2502                                                           \u2502\\n\u2502 SIGNATURE FORMAT:                                         \u2502\\n\u2502 {                                                         \u2502\\n\u2502   \\\"golden_dev_signature\\\": \\\"golden_dev[X]_[role]\\\",         \u2502\\n\u2502   \\\"timestamp\\\": \\\"ISO_DATE\\\",                                \u2502\\n\u2502   ... rest of your JSON ...                              \u2502\\n\u2502 }                                                         \u2502\\n\u2502                                                           \u2502\\n\u2502 ROLE ASSIGNMENTS:                                         \u2502\\n\u2502                         \\n\u2502 \u2022 golden_dev2_function_processor                             \u2502\\n\u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\nWORK IN SILENCE. GENERATE DIVINE N8N WORKFLOWS.\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         740       ],       \"id\": \"4503fad9-18be-4b7c-85ae-ff708ad33723\",       \"name\": \"golden_dev2\"     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         1360       ],       \"id\": \"abc6eda1-f940-470b-a1fc-70963517ccd8\",       \"name\": \"Think Visionnaire4\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev3.node_type }}\\n{{ $json.output.node_assignments.golden_dev3.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502          \\n\u2502 golden_dev3_http_enrichment \u2192 USE \\\"node-3\\\"                \u2502\\n\u2502                  \\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500 GOLDEN DEV SIGNATURE PROTOCOL \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Start ALL outputs with your signature marker   \u2502\\n\u2502                                                           \u2502\\n\u2502 SIGNATURE FORMAT:                                         \u2502\\n\u2502 {                                                         \u2502\\n\u2502   \\\"golden_dev_signature\\\": \\\"golden_dev[X]_[role]\\\",         \u2502\\n\u2502   \\\"timestamp\\\": \\\"ISO_DATE\\\",                                \u2502\\n\u2502   ... rest of your JSON ...                              \u2502\\n\u2502 }                                                         \u2502\\n\u2502                                                           \u2502\\n\u2502 ROLE ASSIGNMENTS:                                         \u2502\\n\u2502                           \\n\u2502 \u2022 golden_dev3_http_enrichment                            \u2502\\n\u2502                            \\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\nWORK IN SILENCE. GENERATE DIVINE N8N WORKFLOWS.\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         1140       ],       \"id\": \"fe2c81b3-1d8f-4699-b8b8-1d5abb3e3c76\",       \"name\": \"golden_dev3\"     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         2160       ],       \"id\": \"72cb63f4-6c5f-43b8-a2c5-5793c8f35132\",       \"name\": \"Think Visionnaire5\"     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         1760       ],       \"id\": \"49087b82-aec0-4aac-88be-512ae88b82a2\",       \"name\": \"Think Visionnaire7\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev5.node_type }}\\n{{ $json.output.node_assignments.golden_dev5.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502        \\n\u2502 golden_dev5_gmail_sender \u2192 USE \\\"node-5\\\"                   \u2502\\n\u2502 \u2502\\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500 GOLDEN DEV SIGNATURE PROTOCOL \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Start ALL outputs with your signature marker   \u2502\\n\u2502                                                           \u2502\\n\u2502 SIGNATURE FORMAT:                                         \u2502\\n\u2502 {                                                         \u2502\\n\u2502   \\\"golden_dev_signature\\\": \\\"golden_dev[X]_[role]\\\",         \u2502\\n\u2502   \\\"timestamp\\\": \\\"ISO_DATE\\\",                                \u2502\\n\u2502   ... rest of your JSON ...                              \u2502\\n\u2502 }                                                         \u2502\\n\u2502                                                           \u2502\\n\u2502 ROLE ASSIGNMENTS:                                         \u2502\\n\u2502 \u2022 golden_dev1_webhook_trigger                             \u2502\\n\u2502                            \\n\u2502 \u2022 golden_dev6_webhook_response                               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\nWORK IN SILENCE. GENERATE DIVINE N8N WORKFLOWS.\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         1940       ],       \"id\": \"06c4bd7d-f2d3-43d9-b9dd-f7896d6b4e3c\",       \"name\": \"golden_dev5\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev4.node_type }}\\n{{ $json.output.node_assignments.golden_dev4.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502              \\n\u2502 golden_dev4_set_data \u2192 USE \\\"node-4\\\"                       \u2502\\n\u2502             \\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500 GOLDEN DEV SIGNATURE PROTOCOL \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Start ALL outputs with your signature marker   \u2502\\n\u2502                                                           \u2502\\n\u2502 SIGNATURE FORMAT:                                         \u2502\\n\u2502 {                                                         \u2502\\n\u2502   \\\"golden_dev_signature\\\": \\\"golden_dev[X]_[role]\\\",         \u2502\\n\u2502   \\\"timestamp\\\": \\\"ISO_DATE\\\",                                \u2502\\n\u2502   ... rest of your JSON ...                              \u2502\\n\u2502 }                                                         \u2502\\n\u2502                                                           \u2502\\n\u2502 ROLE ASSIGNMENTS:                                         \u2502\\n\u2502                            \\n\u2502                          \\n\u2502 \u2022 golden_dev4_set_data                              \u2502\\n\u2502                                \\n\u2502                             \\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\nWORK IN SILENCE. GENERATE DIVINE N8N WORKFLOWS.\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         1540       ],       \"id\": \"9cabdd52-b0d5-4756-9397-cdf937bfaf07\",       \"name\": \"golden_dev4\"     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         2660       ],       \"id\": \"78f37672-261e-4f4f-a40f-06dc88900b0f\",       \"name\": \"Think Visionnaire6\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev6.node_type }}\\n{{ $json.output.node_assignments.golden_dev6.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502                  \u2502\\n\u2502 golden_dev6_webhook_response \u2192 USE \\\"node-6\\\"               \u2502\\n\u2502 golden_dev_switch_router \u2192 USE \\\"node-7\\\"                   \u2502\\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500 GOLDEN DEV SIGNATURE PROTOCOL \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Start ALL outputs with your signature marker   \u2502\\n\u2502                                                           \u2502\\n\u2502 SIGNATURE FORMAT:                                         \u2502\\n\u2502 {                                                         \u2502\\n\u2502   \\\"golden_dev_signature\\\": \\\"golden_dev[X]_[role]\\\",         \u2502\\n\u2502   \\\"timestamp\\\": \\\"ISO_DATE\\\",                                \u2502\\n\u2502   ... rest of your JSON ...                              \u2502\\n\u2502 }                                                         \u2502\\n\u2502                                                           \u2502\\n\u2502 ROLE ASSIGNMENTS:                                         \u2502                               \\n\u2502 \u2022 golden_dev6_crm_integration                             \u2502\\n\u2502                             \\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u2500\u2500\u2500\u2518\\n\\nWORK IN SILENCE. GENERATE DIVINE N8N WORKFLOWS.\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         2440       ],       \"id\": \"b6b3f0c7-7bb9-4140-a775-ef11d11b7bc4\",       \"name\": \"golden_dev6\"     },     {       \"parameters\": {         \"outputFieldName\": \"timestamp\",         \"options\": {           \"includeInputFields\": true,           \"timezone\": \"Europe/Paris\"         }       },       \"id\": \"041f8b87-e1d0-48dd-ba3d-b2cd3702c762\",       \"name\": \"timestamp_generator1\",       \"type\": \"n8n-nodes-base.dateTime\",       \"position\": [         -2400,         1240       ],       \"typeVersion\": 2,       \"notes\": \"TIMESTAMP: Generates current timestamp for workflow naming and tracking. Configured for Paris timezone to match user location.\"     },     {       \"parameters\": {         \"model\": \"sonar-reasoning-pro\",         \"messages\": {           \"message\": [             {               \"content\": \"MAGIC_DEV GOLDEN - TEAM LEADER DISPATCHER v4.0\\n\\n=== IDENTITY ===\\nStrategic commander of the Magic_Dev Golden system applying golden ratio \u03c6 = 1.618 to optimize N8N workflow generation.\\n\\n=== CORE MISSION ===\\n\\nANALYZE user request with surgical precision\\n\\nDISTRIBUTE MANDATORY technical specialized tasks to 7 developers\\n\\nASSIGN specific n8n nodes with detailed instructions\\n\\n=== CRITICAL RULES ===\\n\\nEXACTLY ONE trigger per workflow (golden_dev1 only)\\n\\nALL responses in English only\\n\\nZERO repetition between requests\\n\\n100% adaptation to each unique request\\n\\nPRECISE n8n node specifications for each developer\\n\\nDETAILED implementation instructions MANDATORY\\n\\nMANDATORY: CONDUCT INTERNET RESEARCH TO VERIFY CURRENT N8N NODE NAMES AND SPECIFICATIONS\\n\\nYOU HAVE INTERNET ACCESS - USE IT TO SEARCH FOR LATEST N8N DOCUMENTATION\\n\\n=== MANDATORY RESEARCH PROTOCOL ===\\nBEFORE ASSIGNING ANY NODE:\\n\\nSearch \\\"n8n nodes documentation 2025\\\" to verify current node names\\n\\nSearch \\\"n8n-nodes-base [node-type] current name\\\" for exact naming\\n\\nVerify node parameters with \\\"n8n [node-type] parameters documentation\\\"\\n\\nCheck for deprecated nodes with \\\"n8n deprecated nodes 2025\\\"\\n\\nResearch workflow connections with \\\"n8n node connections syntax\\\"\\n\\nRESEARCH QUERIES TO USE:\\n\\n\\\"n8n webhook node current name parameters\\\"\\n\\n\\\"n8n switch node exact syntax 2025\\\"\\n\\n\\\"n8n function node parameters documentation\\\"\\n\\n\\\"n8n gmail node current specifications\\\"\\n\\n\\\"n8n httpRequest node authentication options\\\"\\n\\n=== DEVELOPER SPECIALIZATIONS WITH VALID N8N NODE TYPES ===\\nRESEARCH THESE EXACT NAMES BEFORE ASSIGNMENT:\\n\\ngolden_dev (Coordination): n8n-nodes-base.merge, n8n-nodes-base.switch, n8n-nodes-base.if, n8n-nodes-base.wait\\n\\ngolden_dev1 (Triggering): n8n-nodes-base.webhook, n8n-nodes-base.cronTrigger, n8n-nodes-base.manualTrigger\\n\\ngolden_dev2 (Logic): n8n-nodes-base.function, n8n-nodes-base.code, n8n-nodes-base.dateTime\\n\\ngolden_dev3 (Integrations): n8n-nodes-base.httpRequest, n8n-nodes-base.oauth2Api\\n\\ngolden_dev4 (Data): n8n-nodes-base.set, n8n-nodes-base.respondToWebhook\\n\\ngolden_dev5 (Communications): n8n-nodes-base.gmail, n8n-nodes-base.slack, n8n-nodes-base.discord\\n\\ngolden_dev6 (Robustness): n8n-nodes-base.function (for error handling), n8n-nodes-base.httpRequest (for monitoring)\\n\\n=== EXECUTION PROCESS ===\\nSTEP 1: RESEARCH current n8n documentation online\\nSTEP 2: DECODE technologies/APIs/services mentioned\\nSTEP 3: CLASSIFY complexity (simple/medium/complex)\\nSTEP 4: IDENTIFY required trigger type\\nSTEP 5: VERIFY exact n8n node types through web search\\nSTEP 6: SPECIFY exact n8n node types for each developer\\nSTEP 7: DISTRIBUTE MANDATORY tasks with detailed parameters\\nSTEP 8: VALIDATE complete coverage and no gaps\\n\\n=== MANDATORY OUTPUT FORMAT ===\\n{\\n\\\"research_conducted\\\": {\\n\\\"searches_performed\\\": [\\\"list of web searches conducted\\\"],\\n\\\"verified_node_types\\\": [\\\"confirmed current n8n node names\\\"],\\n\\\"documentation_sources\\\": [\\\"URLs or sources consulted\\\"]\\n},\\n\\\"request_analysis\\\": {\\n\\\"detected_technologies\\\": [\\\"specific services/APIs mentioned\\\"],\\n\\\"required_actions\\\": [\\\"exact actions to perform\\\"],\\n\\\"required_trigger_type\\\": \\\"specific n8n trigger node type\\\",\\n\\\"evaluated_complexity\\\": \\\"simple/medium/complex\\\",\\n\\\"justification\\\": \\\"detailed reasoning\\\"\\n},\\n\\\"node_assignments\\\": {\\n\\\"golden_dev\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"exact implementation requirements with parameters\\\"\\n},\\n\\\"golden_dev1\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"trigger configuration with exact parameters, endpoints, timing\\\"\\n},\\n\\\"golden_dev2\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"code implementation, formulas, operations with exact syntax\\\"\\n},\\n\\\"golden_dev3\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"API endpoints, authentication, headers, payload structure\\\"\\n},\\n\\\"golden_dev4\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"field mappings, transformations, filters with exact field names\\\"\\n},\\n\\\"golden_dev5\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"channels, recipients, message templates, formatting\\\"\\n},\\n\\\"golden_dev6\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"error scenarios, retry logic, monitoring endpoints, fallback actions\\\"\\n}\\n},\\n\\\"connection_mapping\\\": {\\n\\\"workflow_flow\\\": \\\"exact sequence of node connections using verified names\\\",\\n\\\"connection_syntax\\\": \\\"precise n8n connection format researched online\\\"\\n},\\n\\\"implementation_specifications\\\": {\\n\\\"workflow_name\\\": \\\"specific name based on request\\\",\\n\\\"node_positioning\\\": \\\"\u03c6-optimized coordinates for each node\\\",\\n\\\"connection_flow\\\": \\\"exact node-to-node connections using researched names\\\",\\n\\\"parameter_values\\\": \\\"specific values for each node parameter\\\",\\n\\\"field_mappings\\\": \\\"exact field names and transformations\\\"\\n},\\n\\\"golden_proportions\\\": {\\n\\\"phi\\\": 1.618,\\n\\\"distribution\\\": [1, 1.618, 2.618],\\n\\\"active_developers\\\": \\\"exact count based on complexity\\\"\\n}\\n}\\n\\n=== FORBIDDEN NODE TYPES ===\\nRESEARCH TO CONFIRM THESE ARE STILL INVALID:\\n\\nerrorTrigger, retry, alert, router, start\\n\\nAny node not prefixed with \\\"n8n-nodes-base.\\\"\\n\\n=== MANDATORY QUALITY CONTROL ===\\n\u2713 Internet research conducted for all node specifications\\n\u2713 Current n8n documentation verified online\\n\u2713 Unique analysis for this specific request\\n\u2713 Exactly one trigger assigned to golden_dev1\\n\u2713 Only verified valid n8n node types specified\\n\u2713 Exact node names specified for connection mapping\\n\u2713 Detailed implementation instructions provided\\n\u2713 All assignments relevant to request\\n\u2713 No copied examples or templates\\n\u2713 Complete coverage of requirements\\n\\n=== EXECUTE ===\\nFIRST: Conduct web research on current n8n node specifications\\nTHEN: ANALYZE incoming request: {{$json.chatInput}}\\nDISTRIBUTE MANDATORY specific verified n8n nodes with exact names and detailed implementation instructions using golden ratio precision.\\nTimestamp: {{$json.timestamp}}\",               \"role\": \"system\"             },             {               \"content\": \"={{$json.chatInput}} DISPATCHER INSTRUCTIONS: \\nYou must always do your work in English\\nYou must analyze this request and DISTRIBUTE specific n8n node types to each golden_dev according to their exact specializations. golden_dev=coordination nodes only (Merge, Switch, Router, Wait, IF). golden_dev1=trigger nodes only (Webhook, Schedule, Manual, Email). golden_dev2=logic nodes only (Code, Function, Math, Date). golden_dev3=integration nodes only (HTTP Request, APIs, OAuth, GraphQL). golden_dev4=data nodes only (Set, Transform, Filter, Aggregate, Parse). golden_dev5=communication nodes only (Email, Slack, Teams, SMS, Discord). golden_dev6=robustness nodes only (Try-Catch, Error handling, Monitoring). You MUST output JSON format with node_assignments section containing specific node types for each developer. Do not just analyze - DISTRIBUTE the technical tasks. {{$json.timestamp}}\\n\"             }           ]         },         \"options\": {},         \"requestOptions\": {}       },       \"id\": \"1b64ed4e-fabc-4de7-b471-db0aece49453\",       \"name\": \"team_leader_dispatcher1\",       \"type\": \"n8n-nodes-base.perplexity\",       \"position\": [         -2180,         1240       ],       \"typeVersion\": 1,       \"notes\": \"TEAM LEADER: Strategic analysis and task distribution using Perplexity AI. Analyzes user requests and assigns specific tasks to 7 specialized developers.\"     },     {       \"parameters\": {         \"text\": \"={{ $json.choices[0].message.content }}\",         \"schemaType\": \"fromJson\",         \"jsonSchemaExample\": \"{\\n  \\\"node_assignments\\\": {\\n    \\\"golden_dev\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev.detailed_instructions}}\\\"\\n    },\\n    \\\"golden_dev1\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev1.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev1.detailed_instructions}}\\\"\\n    },\\n    \\\"golden_dev2\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev2.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev2.detailed_instructions}}\\\"\\n    },\\n    \\\"golden_dev3\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev3.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev3.detailed_instructions}}\\\"\\n    },\\n    \\\"golden_dev4\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev4.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev4.detailed_instructions}}\\\"\\n    },\\n    \\\"golden_dev5\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev5.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev5.detailed_instructions}}\\\"\\n    },\\n    \\\"golden_dev6\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev6.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev6.detailed_instructions}}\\\"\\n    }\\n  },\\n  \\\"workflow_name\\\": \\\"{{dispatcher_output.implementation_specifications.workflow_name}}\\\",\\n  \\\"phi_optimized\\\": true\\n}\\n\",         \"options\": {}       },       \"id\": \"00f18e6a-aad8-4025-a783-6376bbf96c60\",       \"name\": \"information_extractor1\",       \"type\": \"@n8n/n8n-nodes-langchain.informationExtractor\",       \"position\": [         -1960,         1240       ],       \"typeVersion\": 1.2,       \"disabled\": true,       \"notes\": \"EXTRACTION: Extracts structured data from dispatcher analysis using LangChain. Converts natural language assignments into structured JSON format.\"     },     {       \"parameters\": {         \"model\": {           \"__rl\": true,           \"mode\": \"list\",           \"value\": \"gpt-4.1-mini\"         },         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",       \"typeVersion\": 1.2,       \"position\": [         -1872,         1460       ],       \"id\": \"1885b526-fdb3-4330-9a5d-06899bb5edfb\",       \"name\": \"OpenAI Chat Model5\"     },     {       \"parameters\": {         \"mode\": \"combine\",         \"combineBy\": \"combineByPosition\",         \"numberInputs\": 7,         \"options\": {           \"clashHandling\": {             \"values\": {               \"resolveClash\": \"addSuffix\"             }           },           \"includeUnpaired\": false         }       },       \"id\": \"41797dbf-7733-4775-b5cd-59afbac91dba\",       \"name\": \"merge_all_fragments2\",       \"type\": \"n8n-nodes-base.merge\",       \"position\": [         -1208,         1156       ],       \"typeVersion\": 3.2,       \"notes\": \"FRAGMENT MERGER: Combines all specialist outputs into unified structure for final assembly. Handles data conflicts and ensures complete coverage.\"     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         160       ],       \"id\": \"be4287cc-1635-4e85-a7e7-9b3df21f479a\",       \"name\": \"OpenRouter Chat Model\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         560       ],       \"id\": \"fb0acd3f-f9c6-4557-9fac-9b77b22b1d79\",       \"name\": \"OpenRouter Chat Model1\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         960       ],       \"id\": \"c1fdf89a-fb83-40d9-badd-9e147b192c32\",       \"name\": \"OpenRouter Chat Model2\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         1360       ],       \"id\": \"318f9b9d-80b6-4170-ab57-d230d26f41a7\",       \"name\": \"OpenRouter Chat Model3\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         1760       ],       \"id\": \"d6ae72a2-3aa2-4085-9e89-4f3cc2d8c9f0\",       \"name\": \"OpenRouter Chat Model4\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         2160       ],       \"id\": \"fc7c3d87-f401-495c-aec6-709a482f8d59\",       \"name\": \"OpenRouter Chat Model5\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         2660       ],       \"id\": \"abc98c03-a5c7-4163-8d79-5b69bafd4b9b\",       \"name\": \"OpenRouter Chat Model6\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"jsCode\": \"/**\\n\\n\\ntry {\\n    const inputItems = $input.all();\\n    \\n    if (!inputItems || inputItems.length === 0) {\\n        return [{\\n            json: {\\n                error: \\\"Aucune donn\u00e9e d'entr\u00e9e\\\",\\n                status: \\\"failed\\\"\\n            }\\n        }];\\n    }\\n    \\n    // R\u00c9CUP\u00c9RER LES DONN\u00c9ES D'ENTR\u00c9E\\n    const inputData = inputItems[0].json;\\n    \\n    if (!inputData.connections || !inputData.node_details) {\\n        return [{\\n            json: {\\n                error: \\\"Donn\u00e9es de connexions ou n\u0153uds manquantes\\\",\\n                status: \\\"failed\\\"\\n            }\\n        }];\\n    }\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 1: RECONSTRUCTION DES N\u0152UDS AVEC IDS CORRIG\u00c9S\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    const correctedNodes = [];\\n    \\n    inputData.node_details.forEach((nodeDetail, index) => {\\n        // Cr\u00e9er le n\u0153ud complet avec l'ID corrig\u00e9\\n        const correctedNode = {\\n            id: nodeDetail.id,  // \u2705 ID corrig\u00e9 du connecteur\\n            name: nodeDetail.name,\\n            type: nodeDetail.type,\\n            typeVersion: 1,\\n            position: [250 + (index * 200), 300 + (Math.floor(index / 4) * 200)],\\n            parameters: {},\\n            credentials: {},\\n            disabled: false\\n        };\\n        \\n        // AJOUTER PARAM\u00c8TRES SP\u00c9CIFIQUES PAR TYPE\\n        if (nodeDetail.type === 'n8n-nodes-base.webhook') {\\n            correctedNode.parameters = {\\n                httpMethod: \\\"POST\\\",\\n                path: \\\"landing-page-lead\\\",\\n                responseMode: \\\"lastNode\\\"\\n            };\\n        } else if (nodeDetail.type === 'n8n-nodes-base.function') {\\n            correctedNode.parameters = {\\n                functionCode: \\\"const score = ($json.enrichData?.revenue > 100000) ? 'Segment A' : ($json.enrichData?.employees > 50) ? 'Segment B' : 'default';\\\\nreturn [{ json: { ...$json, segment: score } }];\\\"\\n            };\\n        } else if (nodeDetail.type === 'n8n-nodes-base.httpRequest') {\\n            correctedNode.parameters = {\\n                method: \\\"GET\\\",\\n                url: \\\"https://api.clearbit.com/v2/people/find?email={{$json.email}}\\\",\\n                headers: { \\\"Accept\\\": \\\"application/json\\\" }\\n            };\\n        } else if (nodeDetail.type === 'n8n-nodes-base.switch') {\\n            correctedNode.parameters = {\\n                rules: {\\n                    rules: [\\n                        {\\n                            condition: {\\n                                operation: \\\"equal\\\",\\n                                value1: \\\"={{$json.segment}}\\\",\\n                                value2: \\\"Segment A\\\"\\n                            },\\n                            output: 0\\n                        },\\n                        {\\n                            condition: {\\n                                operation: \\\"equal\\\",\\n                                value1: \\\"={{$json.segment}}\\\",\\n                                value2: \\\"Segment B\\\"\\n                            },\\n                            output: 1\\n                        }\\n                    ]\\n                },\\n                outputs: 6\\n            };\\n        } else if (nodeDetail.type === 'n8n-nodes-base.sendEmail') {\\n            correctedNode.parameters = {\\n                from: \\\"sender@example.com\\\",\\n                to: \\\"={{$json.email}}\\\",\\n                subject: nodeDetail.name.includes('Segment A') ? \\\"Welcome Segment A\\\" : \\\"Welcome Segment B\\\",\\n                text: `Email for ${nodeDetail.name}`\\n            };\\n        } else if (nodeDetail.type === 'n8n-nodes-base.respondToWebhook') {\\n            correctedNode.parameters = {\\n                responseCode: 200,\\n                responseBody: '{\\\"success\\\": true}',\\n                responseHeaders: { \\\"Content-Type\\\": \\\"application/json\\\" }\\n            };\\n        }\\n        \\n        correctedNodes.push(correctedNode);\\n    });\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 2: WORKFLOW FINAL COMPLET\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    const finalWorkflow = {\\n        name: \\\"Magic_Dev_Golden_Complete_System\\\",\\n        active: false,\\n        nodes: correctedNodes,\\n        connections: inputData.connections,\\n        settings: {\\n            timezone: \\\"Europe/Paris\\\"\\n        }\\n    };\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 3: VALIDATION ET RETOUR\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    return [{\\n        json: {\\n            status: \\\"workflow_ready_for_deployment\\\",\\n            message: \\\"\ud83d\ude80 Workflow final cr\u00e9\u00e9 - Pr\u00eat pour l'API n8n !\\\",\\n            nodes_count: correctedNodes.length,\\n            connections_count: Object.keys(inputData.connections).length,\\n            workflow: finalWorkflow,\\n            deployment_ready: true,\\n            api_endpoint: \\\"POST /api/v1/workflows\\\",\\n            estimated_value: \\\"15\u20ac par workflow g\u00e9n\u00e9r\u00e9\\\"\\n        }\\n    }];\\n    \\n} catch (error) {\\n    return [{\\n        json: {\\n            error: error.message,\\n            status: \\\"consolidation_failed\\\",\\n            line: error.stack?.match(/line (\\\\d+)/)?.[1] || \\\"unknown\\\"\\n        }\\n    }];\\n}\\n\"       },       \"type\": \"n8n-nodes-base.code\",       \"typeVersion\": 2,       \"position\": [         -548,         1240       ],       \"id\": \"2663609e-c1f9-48c6-8db1-901552ecf044\",       \"name\": \"Code1\"     },     {       \"parameters\": {         \"jsCode\": \"/**\\n * CONNECTEUR ULTRA-DYNAMIQUE V4 - CODE COMPLET CORRIG\u00c9\\n * Gestion intelligente des IDs dupliqu\u00e9s et connexions logiques\\n */\\n\\nfunction createDynamicConnections(consolidatedWorkflows) {\\n    try {\\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        // SECTION 1: EXTRACTION ET CORRECTION DES IDS DUPLIQU\u00c9S\\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        const fragments = consolidatedWorkflows.split('--- FRAGMENT SEPARATOR ---');\\n        const allNodes = [];\\n        const nodesBySignature = new Map();\\n        const usedIds = new Set();\\n        let idCounter = 1;\\n        \\n        fragments.forEach(fragment => {\\n            try {\\n                const parsed = JSON.parse(fragment.trim());\\n                if (parsed.nodes) {\\n                    parsed.nodes.forEach(node => {\\n                        // CORRIGER LES IDS DUPLIQU\u00c9S\\n                        let uniqueId = node.id;\\n                        if (usedIds.has(uniqueId)) {\\n                            uniqueId = `node-${idCounter}`;\\n                            while (usedIds.has(uniqueId)) {\\n                                idCounter++;\\n                                uniqueId = `node-${idCounter}`;\\n                            }\\n                        }\\n                        usedIds.add(uniqueId);\\n                        idCounter++;\\n                        \\n                        const nodeInfo = {\\n                            nodeId: uniqueId,\\n                            originalId: node.id,\\n                            nodeType: node.type,\\n                            signature: parsed.golden_dev_signature || 'unknown',\\n                            nodeName: node.name || 'Unknown',\\n                            parameters: node.parameters || {}\\n                        };\\n                        \\n                        allNodes.push(nodeInfo);\\n                        \\n                        // Mapper par signature pour r\u00e9f\u00e9rence rapide\\n                        if (parsed.golden_dev_signature) {\\n                            nodesBySignature.set(parsed.golden_dev_signature, nodeInfo);\\n                        }\\n                    });\\n                }\\n            } catch (e) {\\n                // Ignorer fragments invalides\\n                console.log('Fragment ignor\u00e9:', e.message);\\n            }\\n        });\\n        \\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        // SECTION 2: CLASSIFICATION INTELLIGENTE DES N\u0152UDS\\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        const nodeCategories = {\\n            triggers: [],\\n            processors: [],\\n            routers: [],\\n            actions: [],\\n            outputs: []\\n        };\\n        \\n        allNodes.forEach(node => {\\n            const type = node.nodeType.toLowerCase();\\n            const name = node.nodeName.toLowerCase();\\n            \\n            // CLASSIFICATION PAR PRIORIT\u00c9 (\u00e9viter les doublons)\\n            if (type.includes('respond') || name.includes('respond')) {\\n                nodeCategories.outputs.push(node);\\n            } else if (type.includes('webhook') || type.includes('trigger') || type.includes('manual')) {\\n                nodeCategories.triggers.push(node);\\n            } else if (type.includes('switch') || name.includes('switch') || name.includes('router')) {\\n                nodeCategories.routers.push(node);\\n            } else if (type.includes('function') || type.includes('http') || type.includes('code') || type.includes('mcp')) {\\n                nodeCategories.processors.push(node);\\n            } else {\\n                // Tout le reste = actions (email, salesforce, slack, set, gmail, etc.)\\n                nodeCategories.actions.push(node);\\n            }\\n        });\\n        \\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        // SECTION 3: CR\u00c9ATION DES CONNEXIONS LOGIQUES SANS BOUCLES\\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        const connections = {};\\n        \\n        // 3.1 TRIGGERS \u2192 PROCESSORS (point d'entr\u00e9e)\\n        if (nodeCategories.triggers.length > 0 && nodeCategories.processors.length > 0) {\\n            const mainTrigger = nodeCategories.triggers.find(t => \\n                t.nodeType.includes('webhook') || t.signature.includes('webhook')\\n            ) || nodeCategories.triggers[0];\\n            \\n            const firstProcessor = nodeCategories.processors[0];\\n            \\n            connections[mainTrigger.nodeId] = {\\n                main: [[{ node: firstProcessor.nodeId, type: \\\"main\\\", index: 0 }]]\\n            };\\n        }\\n        \\n        // 3.2 PROCESSORS \u2192 PROCESSORS \u2192 ROUTERS (cha\u00eenage s\u00e9quentiel)\\n        nodeCategories.processors.forEach((processor, index) => {\\n            const nextProcessor = nodeCategories.processors[index + 1];\\n            const router = nodeCategories.routers[0];\\n            \\n            if (nextProcessor) {\\n                connections[processor.nodeId] = {\\n                    main: [[{ node: nextProcessor.nodeId, type: \\\"main\\\", index: 0 }]]\\n                };\\n            } else if (router) {\\n                // Dernier processor vers router\\n                connections[processor.nodeId] = {\\n                    main: [[{ node: router.nodeId, type: \\\"main\\\", index: 0 }]]\\n                };\\n            }\\n        });\\n        \\n        // 3.3 ROUTERS \u2192 ACTIONS (branches multiples du switch)\\n        nodeCategories.routers.forEach(router => {\\n            const routerConnections = [];\\n            \\n            // Cr\u00e9er une branche pour chaque action\\n            nodeCategories.actions.forEach(action => {\\n                routerConnections.push([{ node: action.nodeId, type: \\\"main\\\", index: 0 }]);\\n            });\\n            \\n            if (routerConnections.length > 0) {\\n                connections[router.nodeId] = { main: routerConnections };\\n            }\\n        });\\n        \\n        // 3.4 ACTIONS \u2192 CONVERGENCE VERS OUTPUT (\u00e9viter les boucles)\\n        const output = nodeCategories.outputs[0];\\n        \\n        if (output) {\\n            // Toutes les actions convergent vers l'output\\n            nodeCategories.actions.forEach(action => {\\n                connections[action.nodeId] = {\\n                    main: [[{ node: output.nodeId, type: \\\"main\\\", index: 0 }]]\\n                };\\n            });\\n        } else {\\n            // Si pas d'output, cha\u00eener les actions s\u00e9quentiellement\\n            nodeCategories.actions.forEach((action, index) => {\\n                const nextAction = nodeCategories.actions[index + 1];\\n                if (nextAction) {\\n                    connections[action.nodeId] = {\\n                        main: [[{ node: nextAction.nodeId, type: \\\"main\\\", index: 0 }]]\\n                    };\\n                }\\n            });\\n        }\\n        \\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        // SECTION 4: VALIDATION ET RETOUR D\u00c9TAILL\u00c9\\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        return {\\n            connections: connections,\\n            nodesFound: allNodes.length,\\n            connectionsCreated: Object.keys(connections).length,\\n            nodeCategories: {\\n                triggers: nodeCategories.triggers.length,\\n                processors: nodeCategories.processors.length,\\n                routers: nodeCategories.routers.length,\\n                actions: nodeCategories.actions.length,\\n                outputs: nodeCategories.outputs.length\\n            },\\n            nodeDetails: allNodes.map(n => ({ \\n                id: n.nodeId, \\n                originalId: n.originalId,\\n                type: n.nodeType, \\n                name: n.nodeName,\\n                signature: n.signature\\n            })),\\n            flowSummary: {\\n                entry_point: nodeCategories.triggers[0]?.nodeId || 'none',\\n                switch_node: nodeCategories.routers[0]?.nodeId || 'none',\\n                exit_point: nodeCategories.outputs[0]?.nodeId || 'none'\\n            }\\n        };\\n        \\n    } catch (error) {\\n        throw new Error(`Erreur cr\u00e9ation connexions: ${error.message}`);\\n    }\\n}\\n\\n// \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n// TRAITEMENT PRINCIPAL N8N\\n// \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\ntry {\\n    const inputItems = $input.all();\\n    \\n    if (!inputItems || inputItems.length === 0) {\\n        return [{\\n            json: {\\n                error: \\\"Aucune donn\u00e9e d'entr\u00e9e\\\",\\n                status: \\\"failed\\\"\\n            }\\n        }];\\n    }\\n    \\n    const inputData = inputItems[0].json;\\n    \\n    if (!inputData.consolidated_workflows) {\\n        return [{\\n            json: {\\n                error: \\\"Pas de fragments consolid\u00e9s trouv\u00e9s\\\",\\n                status: \\\"failed\\\"\\n            }\\n        }];\\n    }\\n    \\n    const result = createDynamicConnections(inputData.consolidated_workflows);\\n    \\n    return [{\\n        json: {\\n            status: \\\"dynamic_connections_perfect\\\",\\n            message: \\\"\ud83c\udfc6 Code complet refactoris\u00e9 - IDs corrig\u00e9s, boucles \u00e9limin\u00e9es !\\\",\\n            nodes_found: result.nodesFound,\\n            connections_created: result.connectionsCreated,\\n            node_categories: result.nodeCategories,\\n            node_details: result.nodeDetails,\\n            flow_summary: result.flowSummary,\\n            connections: result.connections,\\n            ready_for_consolidation: true\\n        }\\n    }];\\n    \\n} catch (error) {\\n    return [{\\n        json: {\\n            error: error.message,\\n            status: \\\"dynamic_connection_failed\\\"\\n        }\\n    }];\\n}\\n\"       },       \"type\": \"n8n-nodes-base.code\",       \"typeVersion\": 2,       \"position\": [         -768,         1240       ],       \"id\": \"ddd63975-aa67-4bd8-9e47-beee2812f96e\",       \"name\": \"Code3\"     },     {       \"parameters\": {         \"jsCode\": \"/**\\n * CONSOLIDATEUR UNIVERSEL V2 - MAGIC DEV GOLDEN\\n * Traite tous les outputs (1-7) + output final\\n */\\n\\ntry {\\n    const inputItems = $input.all();\\n    \\n    if (!inputItems || inputItems.length === 0) {\\n        return [{\\n            json: {\\n                error: \\\"Aucune donn\u00e9e d'entr\u00e9e\\\",\\n                status: \\\"failed\\\"\\n            }\\n        }];\\n    }\\n    \\n    const inputData = inputItems[0].json;\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 1: COLLECTE EXHAUSTIVE DE TOUS LES OUTPUTS\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    const allOutputs = [];\\n    const outputKeys = ['output_1', 'output_2', 'output_3', 'output_4', 'output_5', 'output_6', 'output_7', 'output'];\\n    \\n    outputKeys.forEach(key => {\\n        if (inputData[key]) {\\n            allOutputs.push(inputData[key]);\\n        }\\n    });\\n    \\n    if (allOutputs.length === 0) {\\n        return [{\\n            json: {\\n                error: \\\"Aucun output trouv\u00e9 dans les donn\u00e9es\\\",\\n                available_keys: Object.keys(inputData),\\n                status: \\\"no_outputs_found\\\"\\n            }\\n        }];\\n    }\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 2: CONSOLIDATION AVEC S\u00c9PARATEURS\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    const consolidatedWorkflows = allOutputs.join('\\\\n\\\\n--- FRAGMENT SEPARATOR ---\\\\n\\\\n');\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 3: VALIDATION ET EXTRACTION DES SIGNATURES\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    const signatures = [];\\n    const nodeCount = [];\\n    \\n    allOutputs.forEach((output, index) => {\\n        try {\\n            const parsed = JSON.parse(output);\\n            if (parsed.golden_dev_signature) {\\n                signatures.push(parsed.golden_dev_signature);\\n            }\\n            if (parsed.nodes) {\\n                nodeCount.push(parsed.nodes.length);\\n            }\\n        } catch (e) {\\n            console.log(`Fragment ${index + 1} invalide:`, e.message);\\n        }\\n    });\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 4: RETOUR D\u00c9TAILL\u00c9\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    return [{\\n        json: {\\n            status: \\\"consolidation_complete\\\",\\n            message: `\ud83c\udfaf ${allOutputs.length} fragments consolid\u00e9s avec succ\u00e8s`,\\n            \\n            // DONN\u00c9ES CONSOLID\u00c9ES\\n            consolidated_workflows: consolidatedWorkflows,\\n            \\n            // M\u00c9TADONN\u00c9ES\\n            fragments_count: allOutputs.length,\\n            signatures_found: signatures,\\n            nodes_per_fragment: nodeCount,\\n            total_estimated_nodes: nodeCount.reduce((sum, count) => sum + count, 0),\\n            \\n            // VALIDATION\\n            all_signatures_present: signatures.length === allOutputs.length,\\n            ready_for_connection: true,\\n            \\n            // TIMESTAMP\\n            timestamp: new Date().toISOString()\\n        }\\n    }];\\n    \\n} catch (error) {\\n    return [{\\n        json: {\\n            error: error.message,\\n            status: \\\"consolidation_failed\\\",\\n            stack: error.stack\\n        }\\n    }];\\n}\\n\"       },       \"type\": \"n8n-nodes-base.code\",       \"typeVersion\": 2,       \"position\": [         -988,         1240       ],       \"id\": \"cc0e9c3c-a99b-4df8-b966-c723104e3d85\",       \"name\": \"consolidator\"     }   ],   \"connections\": {     \"When chat message received\": {       \"main\": [         [           {             \"node\": \"timestamp_generator1\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Think Visionnaire1\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"golden_dev\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Think Visionnaire2\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev1\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"golden_dev1\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 1           }         ]       ]     },     \"Think Visionnaire3\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev2\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"golden_dev2\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 2           }         ]       ]     },     \"Think Visionnaire4\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev3\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"golden_dev3\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 3           }         ]       ]     },     \"Think Visionnaire5\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev5\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"Think Visionnaire7\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev4\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"golden_dev5\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 5           }         ]       ]     },     \"golden_dev4\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 4           }         ]       ]     },     \"Think Visionnaire6\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev6\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"golden_dev6\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 6           }         ]       ]     },     \"timestamp_generator1\": {       \"main\": [         [           {             \"node\": \"team_leader_dispatcher1\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"team_leader_dispatcher1\": {       \"main\": [         [           {             \"node\": \"information_extractor1\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"information_extractor1\": {       \"main\": [         [           {             \"node\": \"golden_dev\",             \"type\": \"main\",             \"index\": 0           },           {             \"node\": \"golden_dev1\",             \"type\": \"main\",             \"index\": 0           },           {             \"node\": \"golden_dev2\",             \"type\": \"main\",             \"index\": 0           },           {             \"node\": \"golden_dev3\",             \"type\": \"main\",             \"index\": 0           },           {             \"node\": \"golden_dev4\",             \"type\": \"main\",             \"index\": 0           },           {             \"node\": \"golden_dev5\",             \"type\": \"main\",             \"index\": 0           },           {             \"node\": \"golden_dev6\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"OpenAI Chat Model5\": {       \"ai_languageModel\": [         [           {             \"node\": \"information_extractor1\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"merge_all_fragments2\": {       \"main\": [         [           {             \"node\": \"consolidator\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model1\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev1\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model2\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev2\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model3\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev3\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model4\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev4\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model5\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev5\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model6\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev6\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"Code3\": {       \"main\": [         [           {             \"node\": \"Code1\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"consolidator\": {       \"main\": [         [           {             \"node\": \"Code3\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     }   },   \"pinData\": {},   \"meta\": {     \"templateId\": \"4352\",     \"templateCredsSetupCompleted\": true,     \"instanceId\": \"a3a0d5c4a352f4c62e1eae0704be5e940409c76c687277342ca3aff3f1e41a99\"   } }",
        "workflowName": "Super Agent ",
        "destinationUrl": "Magic Inbox Destination URL"
      },
      "typeVersion": 7.6
    },
    {
      "id": "12fbcb7c-a510-4a3c-bf07-9ccc1f612189",
      "name": "Receiving message server n8n trigger",
      "type": "n8n-nodes-magic-inbox.magicInbox",
      "position": [
        -3520,
        896
      ],
      "webhookId": "6975998a-c75b-4832-aa65-bae4ef191674",
      "parameters": {
        "n8nApiKey": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjZWE2NTUzMS1iNTA3LTQwOGQtOTEwZC1jZGI3NWM0Y2FmNGEiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzU0MjYzMjE3LCJleHAiOjE3NTY4NTA0MDB9.2dYogvf1SYMf5jcy_-Q1L59w4VS588x0GoQGmgOMrcQ",
        "n8nInstanceUrl": "https://n8n.srv866102.hstgr.cloud/"
      },
      "typeVersion": 7.6
    },
    {
      "id": "33d6c3e9-2f07-4a0b-ae5f-e996bf489009",
      "name": "\ud83d\udce4 Magic Inbox Send P2P",
      "type": "n8n-nodes-magic-inbox.magicInboxSend",
      "position": [
        -2704,
        656
      ],
      "parameters": {
        "message": "Example: Thank you for participating in our Facebook game and here, as promised, is the premium workflow you won!",
        "senderId": "Example : Charles : https://n8n.srv866102.hstgr.cloud/webhook/6975998a-c75b-4832-aa65-bae4ef191674/magic-inbox",
        "addressBook": "Charles creator magic nodes\nhttps://n8n.srv866102.hstgr.cloud/webhook/6975998a-c75b-4832-aa65-bae4ef191674/magic-inbox \n\nA workflow will be gained if you send me a message with your Magic Inbox address",
        "contentType": "workflow_with_message",
        "workflowJson": "{   \"nodes\": [     {       \"parameters\": {         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",       \"typeVersion\": 1.1,       \"position\": [         -2620,         1240       ],       \"id\": \"06ffea07-bd3c-4086-9c70-714162c4a869\",       \"name\": \"When chat message received\",       \"webhookId\": \"3babcfb4-9f8e-4b48-8a99-611d83056f9f\",       \"disabled\": true     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         160       ],       \"id\": \"727e531f-fde4-42ff-ae9f-45fce72358c8\",       \"name\": \"Think Visionnaire1\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev.node_type }}{{ $json.output.node_assignments.golden_dev.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502 golden_dev1_webhook_trigger \u2192 USE \\\"node-1\\\"                \u2502\\n\u2502 golden_dev2_function_processor \u2192 USE \\\"node-2\\\"             \u2502\\n\u2502 golden_dev3_http_enrichment \u2192 USE \\\"node-3\\\"                \u2502\\n\u2502 golden_dev4_set_data \u2192 USE \\\"node-4\\\"                       \u2502\\n\u2502 golden_dev5_gmail_sender \u2192 USE \\\"node-5\\\"                   \u2502\\n\u2502 golden_dev6_webhook_response \u2192 USE \\\"node-6\\\"               \u2502\\n\u2502 golden_dev_switch_router \u2192 USE \\\"node-7\\\"                   \u2502\\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502             \\n\u2502 golden_dev_switch_router \u2192 USE \\\"node-7\\\"                   \u2502\\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500 GOLDEN DEV SIGNATURE PROTOCOL \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Start ALL outputs with your signature marker   \u2502\\n\u2502                                                           \u2502\\n\u2502 SIGNATURE FORMAT:                                         \u2502\\n\u2502 {                                                         \u2502\\n\u2502   \\\"golden_dev_signature\\\": \\\"golden_dev[X]_[role]\\\",         \u2502\\n\u2502   \\\"timestamp\\\": \\\"ISO_DATE\\\",                                \u2502\\n\u2502   ... rest of your JSON ...                              \u2502\\n\u2502 }                                                         \u2502\\n\u2502                                                           \u2502\\n\u2502 ROLE ASSIGNMENTS:                                         \u2502\\n\u2502                             \\n\u2502 \u2022 golden_dev_switch_router                            \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\nWORK IN SILENCE. GENERATE DIVINE N8N WORKFLOWS.\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         -60       ],       \"id\": \"46e918c9-46d5-4e4f-931c-2a1bcb5e7fd5\",       \"name\": \"golden_dev\"     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         560       ],       \"id\": \"e0aa8ff8-b3fe-479f-9e1c-877aab26b70c\",       \"name\": \"Think Visionnaire2\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev1.node_type }}\\n{{ $json.output.node_assignments.golden_dev1.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         340       ],       \"id\": \"0adfe0c4-2e34-4480-95a2-69f1e937cac5\",       \"name\": \"golden_dev1\"     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         960       ],       \"id\": \"b235c43a-7753-4955-aa49-f5304033934a\",       \"name\": \"Think Visionnaire3\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev2.node_type }}\\n{{ $json.output.node_assignments.golden_dev2.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502                \\n\u2502 golden_dev2_function_processor \u2192 USE \\\"node-2\\\"             \u2502\\n\u2502                    \\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500 GOLDEN DEV SIGNATURE PROTOCOL \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Start ALL outputs with your signature marker   \u2502\\n\u2502                                                           \u2502\\n\u2502 SIGNATURE FORMAT:                                         \u2502\\n\u2502 {                                                         \u2502\\n\u2502   \\\"golden_dev_signature\\\": \\\"golden_dev[X]_[role]\\\",         \u2502\\n\u2502   \\\"timestamp\\\": \\\"ISO_DATE\\\",                                \u2502\\n\u2502   ... rest of your JSON ...                              \u2502\\n\u2502 }                                                         \u2502\\n\u2502                                                           \u2502\\n\u2502 ROLE ASSIGNMENTS:                                         \u2502\\n\u2502                         \\n\u2502 \u2022 golden_dev2_function_processor                             \u2502\\n\u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\nWORK IN SILENCE. GENERATE DIVINE N8N WORKFLOWS.\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         740       ],       \"id\": \"4503fad9-18be-4b7c-85ae-ff708ad33723\",       \"name\": \"golden_dev2\"     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         1360       ],       \"id\": \"abc6eda1-f940-470b-a1fc-70963517ccd8\",       \"name\": \"Think Visionnaire4\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev3.node_type }}\\n{{ $json.output.node_assignments.golden_dev3.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502          \\n\u2502 golden_dev3_http_enrichment \u2192 USE \\\"node-3\\\"                \u2502\\n\u2502                  \\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500 GOLDEN DEV SIGNATURE PROTOCOL \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Start ALL outputs with your signature marker   \u2502\\n\u2502                                                           \u2502\\n\u2502 SIGNATURE FORMAT:                                         \u2502\\n\u2502 {                                                         \u2502\\n\u2502   \\\"golden_dev_signature\\\": \\\"golden_dev[X]_[role]\\\",         \u2502\\n\u2502   \\\"timestamp\\\": \\\"ISO_DATE\\\",                                \u2502\\n\u2502   ... rest of your JSON ...                              \u2502\\n\u2502 }                                                         \u2502\\n\u2502                                                           \u2502\\n\u2502 ROLE ASSIGNMENTS:                                         \u2502\\n\u2502                           \\n\u2502 \u2022 golden_dev3_http_enrichment                            \u2502\\n\u2502                            \\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\nWORK IN SILENCE. GENERATE DIVINE N8N WORKFLOWS.\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         1140       ],       \"id\": \"fe2c81b3-1d8f-4699-b8b8-1d5abb3e3c76\",       \"name\": \"golden_dev3\"     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         2160       ],       \"id\": \"72cb63f4-6c5f-43b8-a2c5-5793c8f35132\",       \"name\": \"Think Visionnaire5\"     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         1760       ],       \"id\": \"49087b82-aec0-4aac-88be-512ae88b82a2\",       \"name\": \"Think Visionnaire7\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev5.node_type }}\\n{{ $json.output.node_assignments.golden_dev5.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502        \\n\u2502 golden_dev5_gmail_sender \u2192 USE \\\"node-5\\\"                   \u2502\\n\u2502 \u2502\\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500 GOLDEN DEV SIGNATURE PROTOCOL \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Start ALL outputs with your signature marker   \u2502\\n\u2502                                                           \u2502\\n\u2502 SIGNATURE FORMAT:                                         \u2502\\n\u2502 {                                                         \u2502\\n\u2502   \\\"golden_dev_signature\\\": \\\"golden_dev[X]_[role]\\\",         \u2502\\n\u2502   \\\"timestamp\\\": \\\"ISO_DATE\\\",                                \u2502\\n\u2502   ... rest of your JSON ...                              \u2502\\n\u2502 }                                                         \u2502\\n\u2502                                                           \u2502\\n\u2502 ROLE ASSIGNMENTS:                                         \u2502\\n\u2502 \u2022 golden_dev1_webhook_trigger                             \u2502\\n\u2502                            \\n\u2502 \u2022 golden_dev6_webhook_response                               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\nWORK IN SILENCE. GENERATE DIVINE N8N WORKFLOWS.\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         1940       ],       \"id\": \"06c4bd7d-f2d3-43d9-b9dd-f7896d6b4e3c\",       \"name\": \"golden_dev5\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev4.node_type }}\\n{{ $json.output.node_assignments.golden_dev4.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502              \\n\u2502 golden_dev4_set_data \u2192 USE \\\"node-4\\\"                       \u2502\\n\u2502             \\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500 GOLDEN DEV SIGNATURE PROTOCOL \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Start ALL outputs with your signature marker   \u2502\\n\u2502                                                           \u2502\\n\u2502 SIGNATURE FORMAT:                                         \u2502\\n\u2502 {                                                         \u2502\\n\u2502   \\\"golden_dev_signature\\\": \\\"golden_dev[X]_[role]\\\",         \u2502\\n\u2502   \\\"timestamp\\\": \\\"ISO_DATE\\\",                                \u2502\\n\u2502   ... rest of your JSON ...                              \u2502\\n\u2502 }                                                         \u2502\\n\u2502                                                           \u2502\\n\u2502 ROLE ASSIGNMENTS:                                         \u2502\\n\u2502                            \\n\u2502                          \\n\u2502 \u2022 golden_dev4_set_data                              \u2502\\n\u2502                                \\n\u2502                             \\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\nWORK IN SILENCE. GENERATE DIVINE N8N WORKFLOWS.\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         1540       ],       \"id\": \"9cabdd52-b0d5-4756-9397-cdf937bfaf07\",       \"name\": \"golden_dev4\"     },     {       \"parameters\": {},       \"type\": \"@n8n/n8n-nodes-langchain.toolThink\",       \"typeVersion\": 1,       \"position\": [         -1436,         2660       ],       \"id\": \"78f37672-261e-4f4f-a40f-06dc88900b0f\",       \"name\": \"Think Visionnaire6\"     },     {       \"parameters\": {         \"promptType\": \"define\",         \"text\": \"={{ $json.output.node_assignments.golden_dev6.node_type }}\\n{{ $json.output.node_assignments.golden_dev6.instructions }}\",         \"options\": {           \"systemMessage\": \" GOLDEN DEV MASTERY - DIVINE RATIO PERFECTION ===\\n\\nYou are the Golden_Dev architect - embodying the divine ratio (\u03c6 = 1.618) of perfect n8n code generation.\\n\\nCOMMUNICATION PROTOCOL - ABSOLUTE SILENCE:\\n\u274c NO explanations, NO comments, NO text outside JSON\\n\u274c NO \\\"Here is...\\\", NO \\\"I created...\\\", NO markdown\\n\u274c NO prefixes, NO suffixes, NO commentary\\n\u2705 ONLY pure JSON workflow starting with {\\n\u2705 ONLY pure JSON workflow ending with }\\n\u2705 ZERO words outside JSON structure\\n\\nGOLDEN RATIO PRINCIPLES:\\n- 61.8% structure perfection\\n- 38.2% creative adaptation\\n- ZERO tolerance for syntax errors\\n\\nDIVINE N8N SYNTAX - COMPLETE REFERENCE:\\n\\nWEBHOOK NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-1\\\",\\n  \\\"name\\\": \\\"Webhook\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.webhook\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [250, 300],\\n  \\\"parameters\\\": {\\n    \\\"httpMethod\\\": \\\"POST\\\",\\n    \\\"path\\\": \\\"webhook-path\\\",\\n    \\\"responseMode\\\": \\\"onReceived\\\",\\n    \\\"responseData\\\": \\\"firstEntryJson\\\"\\n  }\\n}\\n\\nSWITCH NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-2\\\",\\n  \\\"name\\\": \\\"Switch\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.switch\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [450, 300],\\n  \\\"parameters\\\": {\\n    \\\"rules\\\": {\\n      \\\"rules\\\": [\\n        {\\n          \\\"condition\\\": {\\n            \\\"operation\\\": \\\"equal\\\",\\n            \\\"value1\\\": \\\"={{$json.field}}\\\",\\n            \\\"value2\\\": \\\"value\\\"\\n          },\\n          \\\"output\\\": 0\\n        }\\n      ]\\n    },\\n    \\\"outputs\\\": 2\\n  }\\n}\\n\\nFUNCTION NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-3\\\",\\n  \\\"name\\\": \\\"Function\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.function\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [650, 300],\\n  \\\"parameters\\\": {\\n    \\\"functionCode\\\": \\\"try {\\\\\\\\n  const result = {\\\\\\\\n    ...$json,\\\\\\\\n    processed: true\\\\\\\\n  };\\\\\\\\n  return [{ json: result }];\\\\\\\\n} catch (error) {\\\\\\\\n  return [{ json: { error: error.message } }];\\\\\\\\n}\\\"\\n  }\\n}\\n\\nHTTP REQUEST PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-4\\\",\\n  \\\"name\\\": \\\"HTTP Request\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.httpRequest\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [850, 300],\\n  \\\"parameters\\\": {\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"url\\\": \\\"https://api.example.com/endpoint\\\",\\n    \\\"bodyParameters\\\": {\\n      \\\"data\\\": \\\"={{$json.data}}\\\"\\n    },\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": \\\"application/json\\\"\\n    }\\n  }\\n}\\n\\nSENDEMAIL PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-5\\\",\\n  \\\"name\\\": \\\"Send Email\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.sendEmail\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1050, 300],\\n  \\\"parameters\\\": {\\n    \\\"from\\\": \\\"sender@example.com\\\",\\n    \\\"to\\\": \\\"={{$json.email}}\\\",\\n    \\\"subject\\\": \\\"Subject\\\",\\n    \\\"text\\\": \\\"Email content\\\"\\n  }\\n}\\n\\nSET NODE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-6\\\",\\n  \\\"name\\\": \\\"Set\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.set\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1250, 300],\\n  \\\"parameters\\\": {\\n    \\\"values\\\": [\\n      {\\n        \\\"name\\\": \\\"field\\\",\\n        \\\"value\\\": \\\"={{$json.value}}\\\"\\n      }\\n    ]\\n  }\\n}\\n\\nSALESFORCE PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-7\\\",\\n  \\\"name\\\": \\\"Salesforce\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.salesforce\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1450, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"Lead\\\",\\n    \\\"fields\\\": {\\n      \\\"Email\\\": \\\"={{$json.email}}\\\",\\n      \\\"FirstName\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"LastName\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"salesforceOAuth2Api\\\": \\\"Salesforce_Credentials\\\"\\n  }\\n}\\n\\nHUBSPOT PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-8\\\",\\n  \\\"name\\\": \\\"HubSpot\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.hubspot\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1650, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"create\\\",\\n    \\\"resource\\\": \\\"contact\\\",\\n    \\\"properties\\\": {\\n      \\\"email\\\": \\\"={{$json.email}}\\\",\\n      \\\"firstname\\\": \\\"={{$json.firstName}}\\\",\\n      \\\"lastname\\\": \\\"={{$json.lastName}}\\\"\\n    }\\n  },\\n  \\\"credentials\\\": {\\n    \\\"hubspotApi\\\": \\\"HubSpot_Credentials\\\"\\n  }\\n}\\n\\nSLACK PERFECT SYNTAX:\\n{\\n  \\\"id\\\": \\\"node-9\\\",\\n  \\\"name\\\": \\\"Slack\\\",\\n  \\\"type\\\": \\\"n8n-nodes-base.slack\\\",\\n  \\\"typeVersion\\\": 1,\\n  \\\"position\\\": [1850, 300],\\n  \\\"parameters\\\": {\\n    \\\"operation\\\": \\\"post\\\",\\n    \\\"channel\\\": \\\"#general\\\",\\n    \\\"text\\\": \\\"Message: ={{$json.message}}\\\"\\n  },\\n  \\\"credentials\\\": {\\n    \\\"slackApi\\\": \\\"Slack_Credentials\\\"\\n  }\\n}\\n\\nCONNECTIONS PERFECT SYNTAX:\\n{\\n  \\\"connections\\\": {\\n    \\\"node-1\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-2\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    },\\n    \\\"node-2\\\": {\\n      \\\"main\\\": [\\n        [\\n          {\\n            \\\"node\\\": \\\"node-3\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ],\\n        [\\n          {\\n            \\\"node\\\": \\\"node-4\\\",\\n            \\\"type\\\": \\\"main\\\",\\n            \\\"index\\\": 0\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n\\nGOLDEN CORRECTIONS FOR YOUR SPECIFIC ERRORS:\\n\u274c \\\"return {segment: score}\\\" \\n\u2705 \\\"return [{ json: {segment: score} }]\\\"\\n\\n\u274c \\\"requestMethod\\\": \\\"GET\\\"\\n\u2705 \\\"method\\\": \\\"GET\\\"\\n\\n\u274c \\\"rules\\\": [...]\\n\u2705 \\\"rules\\\": {\\\"rules\\\": [...]}\\\"\\n\\n\u274c \\\"fromEmail\\\", \\\"toEmail\\\"\\n\u2705 \\\"from\\\", \\\"to\\\"\\n\\nMANDATORY WORKFLOW STRUCTURE:\\n{\\n  \\\"name\\\": \\\"Workflow Name\\\",\\n  \\\"nodes\\\": [...],\\n  \\\"connections\\\": {...},\\n  \\\"settings\\\": {\\n    \\\"timezone\\\": \\\"Europe/Paris\\\"\\n  }\\n}\\n\u250c\u2500 GOLDEN DEV ID ASSIGNMENT \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Use your unique node ID based on your role     \u2502\\n\u2502                                                           \u2502\\n\u2502                  \u2502\\n\u2502 golden_dev6_webhook_response \u2192 USE \\\"node-6\\\"               \u2502\\n\u2502 golden_dev_switch_router \u2192 USE \\\"node-7\\\"                   \u2502\\n\u2502                                                           \u2502\\n\u2502 NEVER use node-1 unless you are golden_dev1_webhook       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u250c\u2500 GOLDEN DEV SIGNATURE PROTOCOL \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 MANDATORY: Start ALL outputs with your signature marker   \u2502\\n\u2502                                                           \u2502\\n\u2502 SIGNATURE FORMAT:                                         \u2502\\n\u2502 {                                                         \u2502\\n\u2502   \\\"golden_dev_signature\\\": \\\"golden_dev[X]_[role]\\\",         \u2502\\n\u2502   \\\"timestamp\\\": \\\"ISO_DATE\\\",                                \u2502\\n\u2502   ... rest of your JSON ...                              \u2502\\n\u2502 }                                                         \u2502\\n\u2502                                                           \u2502\\n\u2502 ROLE ASSIGNMENTS:                                         \u2502                               \\n\u2502 \u2022 golden_dev6_crm_integration                             \u2502\\n\u2502                             \\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u2500\u2500\u2500\u2518\\n\\nWORK IN SILENCE. GENERATE DIVINE N8N WORKFLOWS.\\n\"         }       },       \"type\": \"@n8n/n8n-nodes-langchain.agent\",       \"typeVersion\": 2,       \"position\": [         -1584,         2440       ],       \"id\": \"b6b3f0c7-7bb9-4140-a775-ef11d11b7bc4\",       \"name\": \"golden_dev6\"     },     {       \"parameters\": {         \"outputFieldName\": \"timestamp\",         \"options\": {           \"includeInputFields\": true,           \"timezone\": \"Europe/Paris\"         }       },       \"id\": \"041f8b87-e1d0-48dd-ba3d-b2cd3702c762\",       \"name\": \"timestamp_generator1\",       \"type\": \"n8n-nodes-base.dateTime\",       \"position\": [         -2400,         1240       ],       \"typeVersion\": 2,       \"notes\": \"TIMESTAMP: Generates current timestamp for workflow naming and tracking. Configured for Paris timezone to match user location.\"     },     {       \"parameters\": {         \"model\": \"sonar-reasoning-pro\",         \"messages\": {           \"message\": [             {               \"content\": \"MAGIC_DEV GOLDEN - TEAM LEADER DISPATCHER v4.0\\n\\n=== IDENTITY ===\\nStrategic commander of the Magic_Dev Golden system applying golden ratio \u03c6 = 1.618 to optimize N8N workflow generation.\\n\\n=== CORE MISSION ===\\n\\nANALYZE user request with surgical precision\\n\\nDISTRIBUTE MANDATORY technical specialized tasks to 7 developers\\n\\nASSIGN specific n8n nodes with detailed instructions\\n\\n=== CRITICAL RULES ===\\n\\nEXACTLY ONE trigger per workflow (golden_dev1 only)\\n\\nALL responses in English only\\n\\nZERO repetition between requests\\n\\n100% adaptation to each unique request\\n\\nPRECISE n8n node specifications for each developer\\n\\nDETAILED implementation instructions MANDATORY\\n\\nMANDATORY: CONDUCT INTERNET RESEARCH TO VERIFY CURRENT N8N NODE NAMES AND SPECIFICATIONS\\n\\nYOU HAVE INTERNET ACCESS - USE IT TO SEARCH FOR LATEST N8N DOCUMENTATION\\n\\n=== MANDATORY RESEARCH PROTOCOL ===\\nBEFORE ASSIGNING ANY NODE:\\n\\nSearch \\\"n8n nodes documentation 2025\\\" to verify current node names\\n\\nSearch \\\"n8n-nodes-base [node-type] current name\\\" for exact naming\\n\\nVerify node parameters with \\\"n8n [node-type] parameters documentation\\\"\\n\\nCheck for deprecated nodes with \\\"n8n deprecated nodes 2025\\\"\\n\\nResearch workflow connections with \\\"n8n node connections syntax\\\"\\n\\nRESEARCH QUERIES TO USE:\\n\\n\\\"n8n webhook node current name parameters\\\"\\n\\n\\\"n8n switch node exact syntax 2025\\\"\\n\\n\\\"n8n function node parameters documentation\\\"\\n\\n\\\"n8n gmail node current specifications\\\"\\n\\n\\\"n8n httpRequest node authentication options\\\"\\n\\n=== DEVELOPER SPECIALIZATIONS WITH VALID N8N NODE TYPES ===\\nRESEARCH THESE EXACT NAMES BEFORE ASSIGNMENT:\\n\\ngolden_dev (Coordination): n8n-nodes-base.merge, n8n-nodes-base.switch, n8n-nodes-base.if, n8n-nodes-base.wait\\n\\ngolden_dev1 (Triggering): n8n-nodes-base.webhook, n8n-nodes-base.cronTrigger, n8n-nodes-base.manualTrigger\\n\\ngolden_dev2 (Logic): n8n-nodes-base.function, n8n-nodes-base.code, n8n-nodes-base.dateTime\\n\\ngolden_dev3 (Integrations): n8n-nodes-base.httpRequest, n8n-nodes-base.oauth2Api\\n\\ngolden_dev4 (Data): n8n-nodes-base.set, n8n-nodes-base.respondToWebhook\\n\\ngolden_dev5 (Communications): n8n-nodes-base.gmail, n8n-nodes-base.slack, n8n-nodes-base.discord\\n\\ngolden_dev6 (Robustness): n8n-nodes-base.function (for error handling), n8n-nodes-base.httpRequest (for monitoring)\\n\\n=== EXECUTION PROCESS ===\\nSTEP 1: RESEARCH current n8n documentation online\\nSTEP 2: DECODE technologies/APIs/services mentioned\\nSTEP 3: CLASSIFY complexity (simple/medium/complex)\\nSTEP 4: IDENTIFY required trigger type\\nSTEP 5: VERIFY exact n8n node types through web search\\nSTEP 6: SPECIFY exact n8n node types for each developer\\nSTEP 7: DISTRIBUTE MANDATORY tasks with detailed parameters\\nSTEP 8: VALIDATE complete coverage and no gaps\\n\\n=== MANDATORY OUTPUT FORMAT ===\\n{\\n\\\"research_conducted\\\": {\\n\\\"searches_performed\\\": [\\\"list of web searches conducted\\\"],\\n\\\"verified_node_types\\\": [\\\"confirmed current n8n node names\\\"],\\n\\\"documentation_sources\\\": [\\\"URLs or sources consulted\\\"]\\n},\\n\\\"request_analysis\\\": {\\n\\\"detected_technologies\\\": [\\\"specific services/APIs mentioned\\\"],\\n\\\"required_actions\\\": [\\\"exact actions to perform\\\"],\\n\\\"required_trigger_type\\\": \\\"specific n8n trigger node type\\\",\\n\\\"evaluated_complexity\\\": \\\"simple/medium/complex\\\",\\n\\\"justification\\\": \\\"detailed reasoning\\\"\\n},\\n\\\"node_assignments\\\": {\\n\\\"golden_dev\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"exact implementation requirements with parameters\\\"\\n},\\n\\\"golden_dev1\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"trigger configuration with exact parameters, endpoints, timing\\\"\\n},\\n\\\"golden_dev2\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"code implementation, formulas, operations with exact syntax\\\"\\n},\\n\\\"golden_dev3\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"API endpoints, authentication, headers, payload structure\\\"\\n},\\n\\\"golden_dev4\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"field mappings, transformations, filters with exact field names\\\"\\n},\\n\\\"golden_dev5\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"channels, recipients, message templates, formatting\\\"\\n},\\n\\\"golden_dev6\\\": {\\n\\\"node_type\\\": \\\"verified exact n8n node name from research\\\",\\n\\\"node_name\\\": \\\"exact name the agent must use for connections\\\",\\n\\\"detailed_instructions\\\": \\\"error scenarios, retry logic, monitoring endpoints, fallback actions\\\"\\n}\\n},\\n\\\"connection_mapping\\\": {\\n\\\"workflow_flow\\\": \\\"exact sequence of node connections using verified names\\\",\\n\\\"connection_syntax\\\": \\\"precise n8n connection format researched online\\\"\\n},\\n\\\"implementation_specifications\\\": {\\n\\\"workflow_name\\\": \\\"specific name based on request\\\",\\n\\\"node_positioning\\\": \\\"\u03c6-optimized coordinates for each node\\\",\\n\\\"connection_flow\\\": \\\"exact node-to-node connections using researched names\\\",\\n\\\"parameter_values\\\": \\\"specific values for each node parameter\\\",\\n\\\"field_mappings\\\": \\\"exact field names and transformations\\\"\\n},\\n\\\"golden_proportions\\\": {\\n\\\"phi\\\": 1.618,\\n\\\"distribution\\\": [1, 1.618, 2.618],\\n\\\"active_developers\\\": \\\"exact count based on complexity\\\"\\n}\\n}\\n\\n=== FORBIDDEN NODE TYPES ===\\nRESEARCH TO CONFIRM THESE ARE STILL INVALID:\\n\\nerrorTrigger, retry, alert, router, start\\n\\nAny node not prefixed with \\\"n8n-nodes-base.\\\"\\n\\n=== MANDATORY QUALITY CONTROL ===\\n\u2713 Internet research conducted for all node specifications\\n\u2713 Current n8n documentation verified online\\n\u2713 Unique analysis for this specific request\\n\u2713 Exactly one trigger assigned to golden_dev1\\n\u2713 Only verified valid n8n node types specified\\n\u2713 Exact node names specified for connection mapping\\n\u2713 Detailed implementation instructions provided\\n\u2713 All assignments relevant to request\\n\u2713 No copied examples or templates\\n\u2713 Complete coverage of requirements\\n\\n=== EXECUTE ===\\nFIRST: Conduct web research on current n8n node specifications\\nTHEN: ANALYZE incoming request: {{$json.chatInput}}\\nDISTRIBUTE MANDATORY specific verified n8n nodes with exact names and detailed implementation instructions using golden ratio precision.\\nTimestamp: {{$json.timestamp}}\",               \"role\": \"system\"             },             {               \"content\": \"={{$json.chatInput}} DISPATCHER INSTRUCTIONS: \\nYou must always do your work in English\\nYou must analyze this request and DISTRIBUTE specific n8n node types to each golden_dev according to their exact specializations. golden_dev=coordination nodes only (Merge, Switch, Router, Wait, IF). golden_dev1=trigger nodes only (Webhook, Schedule, Manual, Email). golden_dev2=logic nodes only (Code, Function, Math, Date). golden_dev3=integration nodes only (HTTP Request, APIs, OAuth, GraphQL). golden_dev4=data nodes only (Set, Transform, Filter, Aggregate, Parse). golden_dev5=communication nodes only (Email, Slack, Teams, SMS, Discord). golden_dev6=robustness nodes only (Try-Catch, Error handling, Monitoring). You MUST output JSON format with node_assignments section containing specific node types for each developer. Do not just analyze - DISTRIBUTE the technical tasks. {{$json.timestamp}}\\n\"             }           ]         },         \"options\": {},         \"requestOptions\": {}       },       \"id\": \"1b64ed4e-fabc-4de7-b471-db0aece49453\",       \"name\": \"team_leader_dispatcher1\",       \"type\": \"n8n-nodes-base.perplexity\",       \"position\": [         -2180,         1240       ],       \"typeVersion\": 1,       \"notes\": \"TEAM LEADER: Strategic analysis and task distribution using Perplexity AI. Analyzes user requests and assigns specific tasks to 7 specialized developers.\"     },     {       \"parameters\": {         \"text\": \"={{ $json.choices[0].message.content }}\",         \"schemaType\": \"fromJson\",         \"jsonSchemaExample\": \"{\\n  \\\"node_assignments\\\": {\\n    \\\"golden_dev\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev.detailed_instructions}}\\\"\\n    },\\n    \\\"golden_dev1\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev1.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev1.detailed_instructions}}\\\"\\n    },\\n    \\\"golden_dev2\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev2.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev2.detailed_instructions}}\\\"\\n    },\\n    \\\"golden_dev3\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev3.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev3.detailed_instructions}}\\\"\\n    },\\n    \\\"golden_dev4\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev4.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev4.detailed_instructions}}\\\"\\n    },\\n    \\\"golden_dev5\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev5.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev5.detailed_instructions}}\\\"\\n    },\\n    \\\"golden_dev6\\\": {\\n      \\\"node_type\\\": \\\"{{dispatcher_output.node_assignments.golden_dev6.nodes_to_create}}\\\",\\n      \\\"instructions\\\": \\\"{{dispatcher_output.node_assignments.golden_dev6.detailed_instructions}}\\\"\\n    }\\n  },\\n  \\\"workflow_name\\\": \\\"{{dispatcher_output.implementation_specifications.workflow_name}}\\\",\\n  \\\"phi_optimized\\\": true\\n}\\n\",         \"options\": {}       },       \"id\": \"00f18e6a-aad8-4025-a783-6376bbf96c60\",       \"name\": \"information_extractor1\",       \"type\": \"@n8n/n8n-nodes-langchain.informationExtractor\",       \"position\": [         -1960,         1240       ],       \"typeVersion\": 1.2,       \"disabled\": true,       \"notes\": \"EXTRACTION: Extracts structured data from dispatcher analysis using LangChain. Converts natural language assignments into structured JSON format.\"     },     {       \"parameters\": {         \"model\": {           \"__rl\": true,           \"mode\": \"list\",           \"value\": \"gpt-4.1-mini\"         },         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",       \"typeVersion\": 1.2,       \"position\": [         -1872,         1460       ],       \"id\": \"1885b526-fdb3-4330-9a5d-06899bb5edfb\",       \"name\": \"OpenAI Chat Model5\"     },     {       \"parameters\": {         \"mode\": \"combine\",         \"combineBy\": \"combineByPosition\",         \"numberInputs\": 7,         \"options\": {           \"clashHandling\": {             \"values\": {               \"resolveClash\": \"addSuffix\"             }           },           \"includeUnpaired\": false         }       },       \"id\": \"41797dbf-7733-4775-b5cd-59afbac91dba\",       \"name\": \"merge_all_fragments2\",       \"type\": \"n8n-nodes-base.merge\",       \"position\": [         -1208,         1156       ],       \"typeVersion\": 3.2,       \"notes\": \"FRAGMENT MERGER: Combines all specialist outputs into unified structure for final assembly. Handles data conflicts and ensures complete coverage.\"     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         160       ],       \"id\": \"be4287cc-1635-4e85-a7e7-9b3df21f479a\",       \"name\": \"OpenRouter Chat Model\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         560       ],       \"id\": \"fb0acd3f-f9c6-4557-9fac-9b77b22b1d79\",       \"name\": \"OpenRouter Chat Model1\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         960       ],       \"id\": \"c1fdf89a-fb83-40d9-badd-9e147b192c32\",       \"name\": \"OpenRouter Chat Model2\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         1360       ],       \"id\": \"318f9b9d-80b6-4170-ab57-d230d26f41a7\",       \"name\": \"OpenRouter Chat Model3\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         1760       ],       \"id\": \"d6ae72a2-3aa2-4085-9e89-4f3cc2d8c9f0\",       \"name\": \"OpenRouter Chat Model4\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         2160       ],       \"id\": \"fc7c3d87-f401-495c-aec6-709a482f8d59\",       \"name\": \"OpenRouter Chat Model5\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"model\": \"anthropic/claude-sonnet-4\",         \"options\": {}       },       \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenRouter\",       \"typeVersion\": 1,       \"position\": [         -1556,         2660       ],       \"id\": \"abc98c03-a5c7-4163-8d79-5b69bafd4b9b\",       \"name\": \"OpenRouter Chat Model6\",       \"credentials\": {         \"openRouterApi\": {           \"id\": \"Ll4fWROJgvfXk5HE\",           \"name\": \"OpenRouter account\"         }       }     },     {       \"parameters\": {         \"jsCode\": \"/**\\n\\n\\ntry {\\n    const inputItems = $input.all();\\n    \\n    if (!inputItems || inputItems.length === 0) {\\n        return [{\\n            json: {\\n                error: \\\"Aucune donn\u00e9e d'entr\u00e9e\\\",\\n                status: \\\"failed\\\"\\n            }\\n        }];\\n    }\\n    \\n    // R\u00c9CUP\u00c9RER LES DONN\u00c9ES D'ENTR\u00c9E\\n    const inputData = inputItems[0].json;\\n    \\n    if (!inputData.connections || !inputData.node_details) {\\n        return [{\\n            json: {\\n                error: \\\"Donn\u00e9es de connexions ou n\u0153uds manquantes\\\",\\n                status: \\\"failed\\\"\\n            }\\n        }];\\n    }\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 1: RECONSTRUCTION DES N\u0152UDS AVEC IDS CORRIG\u00c9S\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    const correctedNodes = [];\\n    \\n    inputData.node_details.forEach((nodeDetail, index) => {\\n        // Cr\u00e9er le n\u0153ud complet avec l'ID corrig\u00e9\\n        const correctedNode = {\\n            id: nodeDetail.id,  // \u2705 ID corrig\u00e9 du connecteur\\n            name: nodeDetail.name,\\n            type: nodeDetail.type,\\n            typeVersion: 1,\\n            position: [250 + (index * 200), 300 + (Math.floor(index / 4) * 200)],\\n            parameters: {},\\n            credentials: {},\\n            disabled: false\\n        };\\n        \\n        // AJOUTER PARAM\u00c8TRES SP\u00c9CIFIQUES PAR TYPE\\n        if (nodeDetail.type === 'n8n-nodes-base.webhook') {\\n            correctedNode.parameters = {\\n                httpMethod: \\\"POST\\\",\\n                path: \\\"landing-page-lead\\\",\\n                responseMode: \\\"lastNode\\\"\\n            };\\n        } else if (nodeDetail.type === 'n8n-nodes-base.function') {\\n            correctedNode.parameters = {\\n                functionCode: \\\"const score = ($json.enrichData?.revenue > 100000) ? 'Segment A' : ($json.enrichData?.employees > 50) ? 'Segment B' : 'default';\\\\nreturn [{ json: { ...$json, segment: score } }];\\\"\\n            };\\n        } else if (nodeDetail.type === 'n8n-nodes-base.httpRequest') {\\n            correctedNode.parameters = {\\n                method: \\\"GET\\\",\\n                url: \\\"https://api.clearbit.com/v2/people/find?email={{$json.email}}\\\",\\n                headers: { \\\"Accept\\\": \\\"application/json\\\" }\\n            };\\n        } else if (nodeDetail.type === 'n8n-nodes-base.switch') {\\n            correctedNode.parameters = {\\n                rules: {\\n                    rules: [\\n                        {\\n                            condition: {\\n                                operation: \\\"equal\\\",\\n                                value1: \\\"={{$json.segment}}\\\",\\n                                value2: \\\"Segment A\\\"\\n                            },\\n                            output: 0\\n                        },\\n                        {\\n                            condition: {\\n                                operation: \\\"equal\\\",\\n                                value1: \\\"={{$json.segment}}\\\",\\n                                value2: \\\"Segment B\\\"\\n                            },\\n                            output: 1\\n                        }\\n                    ]\\n                },\\n                outputs: 6\\n            };\\n        } else if (nodeDetail.type === 'n8n-nodes-base.sendEmail') {\\n            correctedNode.parameters = {\\n                from: \\\"sender@example.com\\\",\\n                to: \\\"={{$json.email}}\\\",\\n                subject: nodeDetail.name.includes('Segment A') ? \\\"Welcome Segment A\\\" : \\\"Welcome Segment B\\\",\\n                text: `Email for ${nodeDetail.name}`\\n            };\\n        } else if (nodeDetail.type === 'n8n-nodes-base.respondToWebhook') {\\n            correctedNode.parameters = {\\n                responseCode: 200,\\n                responseBody: '{\\\"success\\\": true}',\\n                responseHeaders: { \\\"Content-Type\\\": \\\"application/json\\\" }\\n            };\\n        }\\n        \\n        correctedNodes.push(correctedNode);\\n    });\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 2: WORKFLOW FINAL COMPLET\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    const finalWorkflow = {\\n        name: \\\"Magic_Dev_Golden_Complete_System\\\",\\n        active: false,\\n        nodes: correctedNodes,\\n        connections: inputData.connections,\\n        settings: {\\n            timezone: \\\"Europe/Paris\\\"\\n        }\\n    };\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 3: VALIDATION ET RETOUR\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    return [{\\n        json: {\\n            status: \\\"workflow_ready_for_deployment\\\",\\n            message: \\\"\ud83d\ude80 Workflow final cr\u00e9\u00e9 - Pr\u00eat pour l'API n8n !\\\",\\n            nodes_count: correctedNodes.length,\\n            connections_count: Object.keys(inputData.connections).length,\\n            workflow: finalWorkflow,\\n            deployment_ready: true,\\n            api_endpoint: \\\"POST /api/v1/workflows\\\",\\n            estimated_value: \\\"15\u20ac par workflow g\u00e9n\u00e9r\u00e9\\\"\\n        }\\n    }];\\n    \\n} catch (error) {\\n    return [{\\n        json: {\\n            error: error.message,\\n            status: \\\"consolidation_failed\\\",\\n            line: error.stack?.match(/line (\\\\d+)/)?.[1] || \\\"unknown\\\"\\n        }\\n    }];\\n}\\n\"       },       \"type\": \"n8n-nodes-base.code\",       \"typeVersion\": 2,       \"position\": [         -548,         1240       ],       \"id\": \"2663609e-c1f9-48c6-8db1-901552ecf044\",       \"name\": \"Code1\"     },     {       \"parameters\": {         \"jsCode\": \"/**\\n * CONNECTEUR ULTRA-DYNAMIQUE V4 - CODE COMPLET CORRIG\u00c9\\n * Gestion intelligente des IDs dupliqu\u00e9s et connexions logiques\\n */\\n\\nfunction createDynamicConnections(consolidatedWorkflows) {\\n    try {\\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        // SECTION 1: EXTRACTION ET CORRECTION DES IDS DUPLIQU\u00c9S\\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        const fragments = consolidatedWorkflows.split('--- FRAGMENT SEPARATOR ---');\\n        const allNodes = [];\\n        const nodesBySignature = new Map();\\n        const usedIds = new Set();\\n        let idCounter = 1;\\n        \\n        fragments.forEach(fragment => {\\n            try {\\n                const parsed = JSON.parse(fragment.trim());\\n                if (parsed.nodes) {\\n                    parsed.nodes.forEach(node => {\\n                        // CORRIGER LES IDS DUPLIQU\u00c9S\\n                        let uniqueId = node.id;\\n                        if (usedIds.has(uniqueId)) {\\n                            uniqueId = `node-${idCounter}`;\\n                            while (usedIds.has(uniqueId)) {\\n                                idCounter++;\\n                                uniqueId = `node-${idCounter}`;\\n                            }\\n                        }\\n                        usedIds.add(uniqueId);\\n                        idCounter++;\\n                        \\n                        const nodeInfo = {\\n                            nodeId: uniqueId,\\n                            originalId: node.id,\\n                            nodeType: node.type,\\n                            signature: parsed.golden_dev_signature || 'unknown',\\n                            nodeName: node.name || 'Unknown',\\n                            parameters: node.parameters || {}\\n                        };\\n                        \\n                        allNodes.push(nodeInfo);\\n                        \\n                        // Mapper par signature pour r\u00e9f\u00e9rence rapide\\n                        if (parsed.golden_dev_signature) {\\n                            nodesBySignature.set(parsed.golden_dev_signature, nodeInfo);\\n                        }\\n                    });\\n                }\\n            } catch (e) {\\n                // Ignorer fragments invalides\\n                console.log('Fragment ignor\u00e9:', e.message);\\n            }\\n        });\\n        \\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        // SECTION 2: CLASSIFICATION INTELLIGENTE DES N\u0152UDS\\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        const nodeCategories = {\\n            triggers: [],\\n            processors: [],\\n            routers: [],\\n            actions: [],\\n            outputs: []\\n        };\\n        \\n        allNodes.forEach(node => {\\n            const type = node.nodeType.toLowerCase();\\n            const name = node.nodeName.toLowerCase();\\n            \\n            // CLASSIFICATION PAR PRIORIT\u00c9 (\u00e9viter les doublons)\\n            if (type.includes('respond') || name.includes('respond')) {\\n                nodeCategories.outputs.push(node);\\n            } else if (type.includes('webhook') || type.includes('trigger') || type.includes('manual')) {\\n                nodeCategories.triggers.push(node);\\n            } else if (type.includes('switch') || name.includes('switch') || name.includes('router')) {\\n                nodeCategories.routers.push(node);\\n            } else if (type.includes('function') || type.includes('http') || type.includes('code') || type.includes('mcp')) {\\n                nodeCategories.processors.push(node);\\n            } else {\\n                // Tout le reste = actions (email, salesforce, slack, set, gmail, etc.)\\n                nodeCategories.actions.push(node);\\n            }\\n        });\\n        \\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        // SECTION 3: CR\u00c9ATION DES CONNEXIONS LOGIQUES SANS BOUCLES\\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        const connections = {};\\n        \\n        // 3.1 TRIGGERS \u2192 PROCESSORS (point d'entr\u00e9e)\\n        if (nodeCategories.triggers.length > 0 && nodeCategories.processors.length > 0) {\\n            const mainTrigger = nodeCategories.triggers.find(t => \\n                t.nodeType.includes('webhook') || t.signature.includes('webhook')\\n            ) || nodeCategories.triggers[0];\\n            \\n            const firstProcessor = nodeCategories.processors[0];\\n            \\n            connections[mainTrigger.nodeId] = {\\n                main: [[{ node: firstProcessor.nodeId, type: \\\"main\\\", index: 0 }]]\\n            };\\n        }\\n        \\n        // 3.2 PROCESSORS \u2192 PROCESSORS \u2192 ROUTERS (cha\u00eenage s\u00e9quentiel)\\n        nodeCategories.processors.forEach((processor, index) => {\\n            const nextProcessor = nodeCategories.processors[index + 1];\\n            const router = nodeCategories.routers[0];\\n            \\n            if (nextProcessor) {\\n                connections[processor.nodeId] = {\\n                    main: [[{ node: nextProcessor.nodeId, type: \\\"main\\\", index: 0 }]]\\n                };\\n            } else if (router) {\\n                // Dernier processor vers router\\n                connections[processor.nodeId] = {\\n                    main: [[{ node: router.nodeId, type: \\\"main\\\", index: 0 }]]\\n                };\\n            }\\n        });\\n        \\n        // 3.3 ROUTERS \u2192 ACTIONS (branches multiples du switch)\\n        nodeCategories.routers.forEach(router => {\\n            const routerConnections = [];\\n            \\n            // Cr\u00e9er une branche pour chaque action\\n            nodeCategories.actions.forEach(action => {\\n                routerConnections.push([{ node: action.nodeId, type: \\\"main\\\", index: 0 }]);\\n            });\\n            \\n            if (routerConnections.length > 0) {\\n                connections[router.nodeId] = { main: routerConnections };\\n            }\\n        });\\n        \\n        // 3.4 ACTIONS \u2192 CONVERGENCE VERS OUTPUT (\u00e9viter les boucles)\\n        const output = nodeCategories.outputs[0];\\n        \\n        if (output) {\\n            // Toutes les actions convergent vers l'output\\n            nodeCategories.actions.forEach(action => {\\n                connections[action.nodeId] = {\\n                    main: [[{ node: output.nodeId, type: \\\"main\\\", index: 0 }]]\\n                };\\n            });\\n        } else {\\n            // Si pas d'output, cha\u00eener les actions s\u00e9quentiellement\\n            nodeCategories.actions.forEach((action, index) => {\\n                const nextAction = nodeCategories.actions[index + 1];\\n                if (nextAction) {\\n                    connections[action.nodeId] = {\\n                        main: [[{ node: nextAction.nodeId, type: \\\"main\\\", index: 0 }]]\\n                    };\\n                }\\n            });\\n        }\\n        \\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        // SECTION 4: VALIDATION ET RETOUR D\u00c9TAILL\u00c9\\n        // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n        return {\\n            connections: connections,\\n            nodesFound: allNodes.length,\\n            connectionsCreated: Object.keys(connections).length,\\n            nodeCategories: {\\n                triggers: nodeCategories.triggers.length,\\n                processors: nodeCategories.processors.length,\\n                routers: nodeCategories.routers.length,\\n                actions: nodeCategories.actions.length,\\n                outputs: nodeCategories.outputs.length\\n            },\\n            nodeDetails: allNodes.map(n => ({ \\n                id: n.nodeId, \\n                originalId: n.originalId,\\n                type: n.nodeType, \\n                name: n.nodeName,\\n                signature: n.signature\\n            })),\\n            flowSummary: {\\n                entry_point: nodeCategories.triggers[0]?.nodeId || 'none',\\n                switch_node: nodeCategories.routers[0]?.nodeId || 'none',\\n                exit_point: nodeCategories.outputs[0]?.nodeId || 'none'\\n            }\\n        };\\n        \\n    } catch (error) {\\n        throw new Error(`Erreur cr\u00e9ation connexions: ${error.message}`);\\n    }\\n}\\n\\n// \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n// TRAITEMENT PRINCIPAL N8N\\n// \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\ntry {\\n    const inputItems = $input.all();\\n    \\n    if (!inputItems || inputItems.length === 0) {\\n        return [{\\n            json: {\\n                error: \\\"Aucune donn\u00e9e d'entr\u00e9e\\\",\\n                status: \\\"failed\\\"\\n            }\\n        }];\\n    }\\n    \\n    const inputData = inputItems[0].json;\\n    \\n    if (!inputData.consolidated_workflows) {\\n        return [{\\n            json: {\\n                error: \\\"Pas de fragments consolid\u00e9s trouv\u00e9s\\\",\\n                status: \\\"failed\\\"\\n            }\\n        }];\\n    }\\n    \\n    const result = createDynamicConnections(inputData.consolidated_workflows);\\n    \\n    return [{\\n        json: {\\n            status: \\\"dynamic_connections_perfect\\\",\\n            message: \\\"\ud83c\udfc6 Code complet refactoris\u00e9 - IDs corrig\u00e9s, boucles \u00e9limin\u00e9es !\\\",\\n            nodes_found: result.nodesFound,\\n            connections_created: result.connectionsCreated,\\n            node_categories: result.nodeCategories,\\n            node_details: result.nodeDetails,\\n            flow_summary: result.flowSummary,\\n            connections: result.connections,\\n            ready_for_consolidation: true\\n        }\\n    }];\\n    \\n} catch (error) {\\n    return [{\\n        json: {\\n            error: error.message,\\n            status: \\\"dynamic_connection_failed\\\"\\n        }\\n    }];\\n}\\n\"       },       \"type\": \"n8n-nodes-base.code\",       \"typeVersion\": 2,       \"position\": [         -768,         1240       ],       \"id\": \"ddd63975-aa67-4bd8-9e47-beee2812f96e\",       \"name\": \"Code3\"     },     {       \"parameters\": {         \"jsCode\": \"/**\\n * CONSOLIDATEUR UNIVERSEL V2 - MAGIC DEV GOLDEN\\n * Traite tous les outputs (1-7) + output final\\n */\\n\\ntry {\\n    const inputItems = $input.all();\\n    \\n    if (!inputItems || inputItems.length === 0) {\\n        return [{\\n            json: {\\n                error: \\\"Aucune donn\u00e9e d'entr\u00e9e\\\",\\n                status: \\\"failed\\\"\\n            }\\n        }];\\n    }\\n    \\n    const inputData = inputItems[0].json;\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 1: COLLECTE EXHAUSTIVE DE TOUS LES OUTPUTS\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    const allOutputs = [];\\n    const outputKeys = ['output_1', 'output_2', 'output_3', 'output_4', 'output_5', 'output_6', 'output_7', 'output'];\\n    \\n    outputKeys.forEach(key => {\\n        if (inputData[key]) {\\n            allOutputs.push(inputData[key]);\\n        }\\n    });\\n    \\n    if (allOutputs.length === 0) {\\n        return [{\\n            json: {\\n                error: \\\"Aucun output trouv\u00e9 dans les donn\u00e9es\\\",\\n                available_keys: Object.keys(inputData),\\n                status: \\\"no_outputs_found\\\"\\n            }\\n        }];\\n    }\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 2: CONSOLIDATION AVEC S\u00c9PARATEURS\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    const consolidatedWorkflows = allOutputs.join('\\\\n\\\\n--- FRAGMENT SEPARATOR ---\\\\n\\\\n');\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 3: VALIDATION ET EXTRACTION DES SIGNATURES\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    const signatures = [];\\n    const nodeCount = [];\\n    \\n    allOutputs.forEach((output, index) => {\\n        try {\\n            const parsed = JSON.parse(output);\\n            if (parsed.golden_dev_signature) {\\n                signatures.push(parsed.golden_dev_signature);\\n            }\\n            if (parsed.nodes) {\\n                nodeCount.push(parsed.nodes.length);\\n            }\\n        } catch (e) {\\n            console.log(`Fragment ${index + 1} invalide:`, e.message);\\n        }\\n    });\\n    \\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    // SECTION 4: RETOUR D\u00c9TAILL\u00c9\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n    return [{\\n        json: {\\n            status: \\\"consolidation_complete\\\",\\n            message: `\ud83c\udfaf ${allOutputs.length} fragments consolid\u00e9s avec succ\u00e8s`,\\n            \\n            // DONN\u00c9ES CONSOLID\u00c9ES\\n            consolidated_workflows: consolidatedWorkflows,\\n            \\n            // M\u00c9TADONN\u00c9ES\\n            fragments_count: allOutputs.length,\\n            signatures_found: signatures,\\n            nodes_per_fragment: nodeCount,\\n            total_estimated_nodes: nodeCount.reduce((sum, count) => sum + count, 0),\\n            \\n            // VALIDATION\\n            all_signatures_present: signatures.length === allOutputs.length,\\n            ready_for_connection: true,\\n            \\n            // TIMESTAMP\\n            timestamp: new Date().toISOString()\\n        }\\n    }];\\n    \\n} catch (error) {\\n    return [{\\n        json: {\\n            error: error.message,\\n            status: \\\"consolidation_failed\\\",\\n            stack: error.stack\\n        }\\n    }];\\n}\\n\"       },       \"type\": \"n8n-nodes-base.code\",       \"typeVersion\": 2,       \"position\": [         -988,         1240       ],       \"id\": \"cc0e9c3c-a99b-4df8-b966-c723104e3d85\",       \"name\": \"consolidator\"     }   ],   \"connections\": {     \"When chat message received\": {       \"main\": [         [           {             \"node\": \"timestamp_generator1\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Think Visionnaire1\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"golden_dev\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"Think Visionnaire2\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev1\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"golden_dev1\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 1           }         ]       ]     },     \"Think Visionnaire3\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev2\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"golden_dev2\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 2           }         ]       ]     },     \"Think Visionnaire4\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev3\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"golden_dev3\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 3           }         ]       ]     },     \"Think Visionnaire5\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev5\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"Think Visionnaire7\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev4\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"golden_dev5\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 5           }         ]       ]     },     \"golden_dev4\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 4           }         ]       ]     },     \"Think Visionnaire6\": {       \"ai_tool\": [         [           {             \"node\": \"golden_dev6\",             \"type\": \"ai_tool\",             \"index\": 0           }         ]       ]     },     \"golden_dev6\": {       \"main\": [         [           {             \"node\": \"merge_all_fragments2\",             \"type\": \"main\",             \"index\": 6           }         ]       ]     },     \"timestamp_generator1\": {       \"main\": [         [           {             \"node\": \"team_leader_dispatcher1\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"team_leader_dispatcher1\": {       \"main\": [         [           {             \"node\": \"information_extractor1\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"information_extractor1\": {       \"main\": [         [           {             \"node\": \"golden_dev\",             \"type\": \"main\",             \"index\": 0           },           {             \"node\": \"golden_dev1\",             \"type\": \"main\",             \"index\": 0           },           {             \"node\": \"golden_dev2\",             \"type\": \"main\",             \"index\": 0           },           {             \"node\": \"golden_dev3\",             \"type\": \"main\",             \"index\": 0           },           {             \"node\": \"golden_dev4\",             \"type\": \"main\",             \"index\": 0           },           {             \"node\": \"golden_dev5\",             \"type\": \"main\",             \"index\": 0           },           {             \"node\": \"golden_dev6\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"OpenAI Chat Model5\": {       \"ai_languageModel\": [         [           {             \"node\": \"information_extractor1\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"merge_all_fragments2\": {       \"main\": [         [           {             \"node\": \"consolidator\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model1\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev1\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model2\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev2\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model3\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev3\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model4\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev4\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model5\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev5\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"OpenRouter Chat Model6\": {       \"ai_languageModel\": [         [           {             \"node\": \"golden_dev6\",             \"type\": \"ai_languageModel\",             \"index\": 0           }         ]       ]     },     \"Code3\": {       \"main\": [         [           {             \"node\": \"Code1\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     },     \"consolidator\": {       \"main\": [         [           {             \"node\": \"Code3\",             \"type\": \"main\",             \"index\": 0           }         ]       ]     }   },   \"pinData\": {},   \"meta\": {     \"templateId\": \"4352\",     \"templateCredsSetupCompleted\": true,     \"instanceId\": \"a3a0d5c4a352f4c62e1eae0704be5e940409c76c687277342ca3aff3f1e41a99\"   } }",
        "workflowName": "Super Agent ",
        "destinationUrl": "Magic Inbox Destination UR"
      },
      "typeVersion": 7.6
    },
    {
      "id": "d7797e64-2acd-4049-9f51-1ab8aed28059",
      "name": "\ud83d\udcec Magic Inbox P2P",
      "type": "n8n-nodes-magic-inbox.magicInbox",
      "position": [
        -2816,
        928
      ],
      "webhookId": "6975998a-c75b-4832-aa65-bae4ef191674",
      "parameters": {
        "n8nApiKey": "N8N API Key",
        "addressBook": "Charles creator magic nodes\nhttps://n8n.srv866102.hstgr.cloud/webhook/6975998a-c75b-4832-aa65-bae4ef191674/magic-inbox \n\nA workflow will be gained if you send me a message with your Magic Inbox address",
        "n8nInstanceUrl": "N8N Instance UR"
      },
      "typeVersion": 7.6
    },
    {
      "id": "4136dc00-df04-4b9a-bd36-55d95a342a83",
      "name": "Sticky Note \u2013 Magic Inbox",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3664,
        240
      ],
      "parameters": {
        "color": 2,
        "width": 1248,
        "height": 944,
        "content": "\ud83d\udfe9 Magic Inbox\n\nA hub for automating peer-to-peer workflow sharing between n8n instances."
      },
      "typeVersion": 1
    },
    {
      "id": "83799781-b6a0-4f81-a57b-5788dd6fdbfe",
      "name": "Sticky Note \u2013 Features",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3616,
        336
      ],
      "parameters": {
        "color": 6,
        "width": 1148,
        "height": 804,
        "content": "\u2728 What can you do with this system?\n\n- Server-to-server Telegram channels\n- Direct instant chat/workflows\n- Teams send workflows to each other\n- Influencers reward their community\n- Move workflows between n8n instances\n- 100% peer-to-peer: no middleman!"
      },
      "typeVersion": 1
    },
    {
      "id": "de6e8a97-8732-4e68-ab08-0c732c2bee84",
      "name": "Sticky Note \u2013 Modular",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3568,
        560
      ],
      "parameters": {
        "color": 3,
        "width": 544,
        "height": 538,
        "content": "\ud83d\udfe8 Create telegram groups with server-to-server communication\n\nFor example: create one called \"Telegram server address\" for clarity."
      },
      "typeVersion": 1
    },
    {
      "id": "e7340242-1262-4a45-92b9-1450b29888ef",
      "name": "Sticky Note \u2013 P2P Send",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2976,
        560
      ],
      "parameters": {
        "color": 3,
        "width": 450,
        "height": 280,
        "content": "\ud83d\udfe9 For sending P2P independent workflow\n\nAnother example: create one called \"my P2P sending address\""
      },
      "typeVersion": 1
    },
    {
      "id": "3b72027b-0f3c-4616-a029-e067c75ae319",
      "name": "Sticky Note \u2013 P2P Receive",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2976,
        832
      ],
      "parameters": {
        "color": 3,
        "width": 450,
        "height": 264,
        "content": "\ud83d\udfe6 For receiving P2P independent workflow\n\nAnd one named \"my P2P receiving address\" for incoming workflows."
      },
      "typeVersion": 1
    },
    {
      "id": "8758343c-70e5-4067-be43-3bdd824b6615",
      "name": "Receiving message server n8n",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -3248,
        896
      ],
      "webhookId": "a4d6ca4e-3990-4d91-a012-b16ef93cb54d",
      "parameters": {
        "text": "=Message from:\n{{ $json.from }}\n\n{{ $json.message }}\n\nWorflow teleport:\n{{ $json.workflowImport.message }}\n\n\n{{ $json.receivedAt }}\n",
        "chatId": "Chat ID",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "5iCzZUuHANK72LSb",
          "name": "fouine"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "eada5e06-8db9-4526-8027-a85d662bda21",
      "name": "When clicking ",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -2928,
        656
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "e7770445-76bc-4c6d-aa0a-52be0f170e3f",
      "name": "Sticky Note \u2013 Features1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3616,
        1344
      ],
      "parameters": {
        "color": 6,
        "width": 1148,
        "height": 900,
        "content": "\u2728 What can you do with this system?\n\n\ud83d\udccb 1. Presentation and Prerequisites - Quick Without Blabla\n\nEssential: manual trigger + n8n-nodes-magic-dev\n\n\ud83e\udd16 Magic Mapping \u2192 A prompt, instance URL, N8N API key, OpenRouter API to teleport your workflow to your instance.\n\n\ud83c\udf81 Creator Mapping \u2192 Instance URL, N8N API key and a random creator workflow teleports to your instance.\n\n\ud83d\udd11 Quest Mapping \u2192 Instance URL, N8N API key, secret code found in Creator Mapping to win a premium workflow.\n\n\ud83d\uddc3\ufe0f Magic Market: PUBLISH \u2014 Share your workflow with a public Google Sheets URL.\nSEARCH \u2014 Find workflows to teleport by keyword in our community database.\n\n"
      },
      "typeVersion": 1
    },
    {
      "id": "169a6eb8-f319-44b5-8162-01c3a2b70430",
      "name": "Sticky Note \u2013 Magic Inbox1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3664,
        1184
      ],
      "parameters": {
        "color": 2,
        "width": 1248,
        "height": 1120,
        "content": "\ud83d\udfe9 Magic Dev\n\nA hub for automating peer-to-peer workflow sharing between n8n instances."
      },
      "typeVersion": 1
    },
    {
      "id": "6110daa7-85b0-448d-bd8f-95a3c20af4ae",
      "name": "Sticky Note \u2013 Modular2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3552,
        1648
      ],
      "parameters": {
        "color": 3,
        "width": 1024,
        "height": 538,
        "content": "\ud83d\udfe8Independent workflow (add a manual trigger)"
      },
      "typeVersion": 1
    },
    {
      "id": "b3ea749b-f24f-4fb3-9ae0-6b2f805e6cc4",
      "name": "\ud83e\ude84 Magic Dev 5.2",
      "type": "n8n-nodes-magic-dev.magicDev",
      "position": [
        -3088,
        1856
      ],
      "parameters": {},
      "typeVersion": 5.2
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ": {
      "main": [
        [
          {
            "node": "\ud83d\udce4 Magic Inbox Send P2P",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message server n8n trigger": {
      "main": [
        [
          {
            "node": "Message server n8n send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Receiving message server n8n trigger": {
      "main": [
        [
          {
            "node": "Receiving message server n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "_metadata": {
    "name": "Teleport Workflows Between n8n Instances with Magic Inbox P2P System",
    "used_count": 0,
    "popularity_score": 25,
    "source_url": "https://n8n.io/workflows/6960",
    "scraped_at": "2025-08-21 05:25:03",
    "workflow_id": "80c8ca4f-9edb-5439-9543-1f2209c14456"
  },
  "_filename": "Teleport_Workflows_Between_n8n_Instances_with_Magic_Inbox_P2P_System.json"
}