{
  "meta": {
    "instanceId": "placeholder"
  },
  "nodes": [
    {
      "id": "config-note",
      "name": "Bot Configuration",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        250,
        150
      ],
      "parameters": {
        "content": "## Paper Monitoring Bot\n\nMonitors these topics:\n- Machine Learning\n- Neural Networks\n- Computer Vision\n\nRuns: Daily at 9 AM"
      },
      "typeVersion": 1
    },
    {
      "id": "schedule-trigger",
      "name": "Daily Schedule",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        450,
        300
      ],
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 24,
              "triggerAtHour": 9
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "set-params",
      "name": "Set Search Parameters",
      "type": "n8n-nodes-base.set",
      "position": [
        650,
        300
      ],
      "parameters": {
        "values": {
          "number": [
            {
              "name": "daysBack",
              "value": 1
            }
          ],
          "string": [
            {
              "name": "searchQueries",
              "value": "machine learning,neural networks,computer vision,deep learning"
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "split-queries",
      "name": "Split Queries",
      "type": "n8n-nodes-base.code",
      "position": [
        850,
        300
      ],
      "parameters": {
        "functionCode": "const queries = $json.searchQueries.split(',').map(q => q.trim());\nreturn queries.map(query => ({ query }));"
      },
      "typeVersion": 1
    },
    {
      "id": "pdfvector-search",
      "name": "PDF Vector - Search New Papers",
      "type": "n8n-nodes-pdfvector.pdfVector",
      "position": [
        1050,
        300
      ],
      "parameters": {
        "limit": 10,
        "query": "={{ $json.query }}",
        "fields": [
          "title",
          "authors",
          "abstract",
          "date",
          "doi",
          "pdfUrl",
          "totalCitations"
        ],
        "resource": "academic",
        "yearFrom": "={{ new Date().getFullYear() }}",
        "operation": "search",
        "providers": [
          "arxiv",
          "pubmed",
          "semantic_scholar"
        ]
      },
      "typeVersion": 1
    },
    {
      "id": "filter-recent",
      "name": "Filter Recent Papers",
      "type": "n8n-nodes-base.code",
      "position": [
        1250,
        300
      ],
      "parameters": {
        "functionCode": "// Filter papers from last N days\nconst daysBack = $node['Set Search Parameters'].json.daysBack;\nconst cutoffDate = new Date();\ncutoffDate.setDate(cutoffDate.getDate() - daysBack);\n\nconst recentPapers = $json.filter(paper => {\n  const paperDate = new Date(paper.date);\n  return paperDate >= cutoffDate;\n});\n\nreturn recentPapers.length > 0 ? recentPapers : [];"
      },
      "typeVersion": 1
    },
    {
      "id": "summarize-paper",
      "name": "Generate Summary",
      "type": "n8n-nodes-base.openAi",
      "position": [
        1450,
        300
      ],
      "parameters": {
        "model": "gpt-3.5-turbo",
        "messages": {
          "values": [
            {
              "content": "Summarize this research paper in 2-3 sentences:\n\nTitle: {{ $json.title }}\nAuthors: {{ $json.authors.join(', ') }}\nAbstract: {{ $json.abstract }}\n\nFocus on the main contribution and findings."
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "format-digest",
      "name": "Format Digest",
      "type": "n8n-nodes-base.code",
      "position": [
        1650,
        300
      ],
      "parameters": {
        "functionCode": "// Format papers for notification\nconst papers = $items().map(item => {\n  const paper = item.json;\n  return {\n    title: paper.title,\n    authors: paper.authors.slice(0, 3).join(', ') + (paper.authors.length > 3 ? ' et al.' : ''),\n    summary: paper.summary,\n    link: paper.doi ? `https://doi.org/${paper.doi}` : paper.url,\n    citations: paper.totalCitations || 0,\n    query: paper.originalQuery\n  };\n});\n\n// Group by query\nconst grouped = papers.reduce((acc, paper) => {\n  if (!acc[paper.query]) acc[paper.query] = [];\n  acc[paper.query].push(paper);\n  return acc;\n}, {});\n\nreturn { papers: grouped, totalCount: papers.length, date: new Date().toISOString() };"
      },
      "typeVersion": 1
    },
    {
      "id": "slack-notify",
      "name": "Send Slack Alert",
      "type": "n8n-nodes-base.slack",
      "position": [
        1850,
        300
      ],
      "parameters": {
        "channel": "#research-alerts",
        "message": "=\ud83d\udcda *Daily Research Digest* - {{ $now.format('MMM DD, YYYY') }}\n\nFound {{ $json.totalCount }} new papers:\n\n{{ Object.entries($json.papers).map(([query, papers]) => `*${query}:*\\n${papers.map(p => `\u2022 ${p.title}\\n  _${p.authors}_\\n  ${p.summary}\\n  \ud83d\udd17 ${p.link}`).join('\\n\\n')}`).join('\\n\\n---\\n\\n') }}",
        "attachments": []
      },
      "typeVersion": 1
    },
    {
      "id": "email-digest",
      "name": "Email Digest",
      "type": "n8n-nodes-base.emailSend",
      "position": [
        1850,
        450
      ],
      "parameters": {
        "html": "=<h2>Daily Research Digest</h2>\n<p>Found {{ $json.totalCount }} new papers</p>\n\n{{ Object.entries($json.papers).map(([query, papers]) => \n  `<h3>${query}</h3>\n  ${papers.map(p => \n    `<div style=\"margin-bottom: 20px;\">\n      <h4>${p.title}</h4>\n      <p><em>${p.authors}</em></p>\n      <p>${p.summary}</p>\n      <p><a href=\"${p.link}\">Read Paper</a> | Citations: ${p.citations}</p>\n    </div>`\n  ).join('')}`\n).join('\\n') }}",
        "subject": "=Daily Research Digest - {{ $now.format('MMM DD, YYYY') }}",
        "toEmail": "research-team@company.com"
      },
      "typeVersion": 1
    }
  ],
  "connections": {
    "Format Digest": {
      "main": [
        [
          {
            "node": "Send Slack Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "Email Digest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Queries": {
      "main": [
        [
          {
            "node": "PDF Vector - Search New Papers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule": {
      "main": [
        [
          {
            "node": "Set Search Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Summary": {
      "main": [
        [
          {
            "node": "Format Digest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Recent Papers": {
      "main": [
        [
          {
            "node": "Generate Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Search Parameters": {
      "main": [
        [
          {
            "node": "Split Queries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDF Vector - Search New Papers": {
      "main": [
        [
          {
            "node": "Filter Recent Papers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "_metadata": {
    "name": "Automated Academic Paper Monitoring with PDF Vector, GPT-3.5, & Slack Alerts",
    "used_count": 0,
    "popularity_score": 25,
    "source_url": "https://n8n.io/workflows/7358",
    "scraped_at": "2025-08-21 05:59:59",
    "workflow_id": "38d47141-d57f-598c-b8e0-c5a8180f99cb"
  },
  "_filename": "Automated_Academic_Paper_Monitoring_with_PDF_Vector_GPT_35_Slack_Alerts.json"
}