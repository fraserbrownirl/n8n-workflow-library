{
  "id": "XyEbEQekLEetZ0za",
  "meta": {
    "instanceId": "7578372eeadee5ee5414cdf5a06141eebec63e21f295454563ddce7b1217363f",
    "templateCredsSetupCompleted": true
  },
  "name": "Intelligent report generator from xlsx, xls or csv files with AI-based analysis",
  "tags": [],
  "nodes": [
    {
      "id": "c092baf2-d272-4514-ae17-3f280ad8aa1a",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [
        160,
        96
      ],
      "webhookId": "dbcef205-4d1e-456e-9e28-2f0f291dfc43",
      "parameters": {
        "path": "generer-rapport",
        "options": {
          "ignoreBots": true,
          "allowedOrigins": "*"
        },
        "httpMethod": "POST",
        "responseMode": "responseNode"
      },
      "typeVersion": 2.1
    },
    {
      "id": "0cfd98f4-b0d8-40c8-99b3-241ae27ac659",
      "name": "On form submission",
      "type": "n8n-nodes-base.formTrigger",
      "disabled": true,
      "position": [
        -192,
        -240
      ],
      "webhookId": "bb3d1e58-bd2b-42c1-b9b0-05d36a4fc557",
      "parameters": {
        "options": {},
        "formTitle": "file",
        "formFields": {
          "values": [
            {
              "fieldType": "file",
              "fieldLabel": "file",
              "requiredField": true
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "45a26bfd-d68b-43a6-a921-3bd060cf6ce0",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        608,
        96
      ],
      "parameters": {
        "options": {},
        "operation": "xlsx",
        "binaryPropertyName": "file"
      },
      "typeVersion": 1
    },
    {
      "id": "c9cb71b7-ce40-4750-b287-942367fb5454",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1648,
        96
      ],
      "parameters": {
        "text": "=**Objectif :** Rapport d'analyse JSON complet.\n\n**Donn\u00e9es \u00e0 traiter :**\n```\n{{ $('Set data for llm').item.json.data }}\n```\n\n**Processus acc\u00e9l\u00e9r\u00e9 :**\n1. `query_data_tool` \u2192 r\u00e9cup\u00e9ration mod\u00e8le\n2. `Think` \u2192 analyse structure + plan\n3. G\u00e9n\u00e9ration JSON finale\n\n**Date :** {{ new Date().toLocaleDateString('fr-FR') }}\n**Public :** D\u00e9cideurs publics\n\n**SORTIE REQUISE :** Objet JSON uniquement, format `{...}`",
        "options": {
          "systemMessage": "Tu es un agent IA expert en services publics (eau, assainissement, d\u00e9chets, transport). G\u00e9n\u00e8re directement des analyses structur\u00e9es de qualit\u00e9 consultant senior.\n\n## WORKFLOW \n1. **R\u00e9cup\u00e9ration mod\u00e8le** (`query_data_tool`) : \"mod\u00e8le rapport services publics\"\n2. **Analyse express** (`Think`) : Structure + lacunes + plan final\n3. **G\u00e9n\u00e9ration imm\u00e9diate** : JSON complet uniquement\n\n## CRIT\u00c8RES QUALIT\u00c9\n- Affirmations \u00e9tay\u00e9es par donn\u00e9es\n- Contextualisation r\u00e9glementaire/\u00e9conomique\n- Style professionnel pr\u00e9cis\n- Structure coh\u00e9rente du mod\u00e8le de r\u00e9f\u00e9rence\n"
        },
        "promptType": "define"
      },
      "typeVersion": 2.2
    },
    {
      "id": "91c74070-5694-4399-8b7f-e24accaf51fd",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        1408,
        384
      ],
      "parameters": {
        "options": {
          "maxOutputTokens": 1000000
        }
      },
      "credentials": {
        "googlePalmApi": {
          "id": "89mVPG21GxPFECbN",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "12fa0c0f-5914-4293-87c6-1fc4c84fcfe6",
      "name": "Set data for llm",
      "type": "n8n-nodes-base.set",
      "position": [
        1408,
        96
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "8d87ca3c-ac19-4495-a21c-e6dd3c357b64",
              "name": "data",
              "type": "string",
              "value": "={{ JSON.stringify($('Extract from File').all()) }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "047d5cdd-b127-489b-bd4c-b702389ed807",
      "name": "Think",
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "position": [
        1536,
        384
      ],
      "parameters": {},
      "typeVersion": 1.1
    },
    {
      "id": "daa70af2-8a4b-4a82-88eb-9a61129ef693",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        304,
        -272
      ],
      "parameters": {
        "rules": {
          "values": [
            {
              "outputKey": "pdf",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "3f2744a6-2502-4e49-98b3-1a963b156dac",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.filename.split('.').pop()}}",
                    "rightValue": "pdf"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "xlsx",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "99fe1dbc-409c-4249-b76b-e16e19214f9e",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.filename.split('.').pop()}}",
                    "rightValue": "xlsx"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "docx",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "6f0aba8b-2201-4804-9e6a-71eec33ad07f",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.filename.split('.').pop()}}",
                    "rightValue": "docx"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "pptx",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "9b67b06a-5db8-4e54-8670-8e3de6218417",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "pptx",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 3.2
    },
    {
      "id": "92f0dfaa-3425-4005-b1db-57649e89ed1b",
      "name": "Parse and Clean AI Response",
      "type": "n8n-nodes-base.code",
      "position": [
        2496,
        80
      ],
      "parameters": {
        "jsCode": "// Ce script prend la sortie texte brute de l'Agent IA,\n// la nettoie, et la transforme en un objet JSON valide.\n\n// La sortie de l'Agent IA (en mode String) est dans la propri\u00e9t\u00e9 'output'.\nconst rawText = $input.item.json.output;\n\n// V\u00e9rification de robustesse : s'assurer que rawText existe avant de le traiter.\nif (typeof rawText !== 'string' || rawText.trim() === '') {\n  // Si rawText n'est pas une cha\u00eene de caract\u00e8res ou est vide, l'Agent IA a probablement \u00e9chou\u00e9.\n  console.error(\"L'entr\u00e9e de l'Agent IA est manquante ou n'est pas une cha\u00eene de caract\u00e8res.\", $input.item.json);\n  throw new Error(\"La sortie de l'Agent IA est vide ou invalide. V\u00e9rifiez l'ex\u00e9cution du n\u0153ud 'AI Agent'.\");\n}\n\n// \u00c9tape 1: Nettoyer le texte. On enl\u00e8ve les blocs de code markdown (```json ... ```) que l'IA ajoute souvent.\nlet cleanedText = rawText.replace(/^```json\\s*/, '').replace(/```$/, '');\n\n// \u00c9tape 2: Trouver le d\u00e9but et la fin de l'objet JSON pour enlever tout texte superflu.\nconst firstBracket = cleanedText.indexOf('{');\nconst lastBracket = cleanedText.lastIndexOf('}');\n\nif (firstBracket === -1 || lastBracket === -1) {\n  throw new Error(\"La r\u00e9ponse de l'IA ne contient pas de JSON valide (accolades manquantes).\");\n}\ncleanedText = cleanedText.substring(firstBracket, lastBracket + 1);\n\ntry {\n  // \u00c9tape 3: Tenter de parser le texte nettoy\u00e9 en objet JSON.\n  const jsonData = JSON.parse(cleanedText);\n  // Retourner l'objet JSON propre pour le n\u0153ud suivant.\n  return { json: jsonData };\n} catch (error) {\n  // Si le parsing \u00e9choue, enregistrer les d\u00e9tails pour le d\u00e9bogage.\n  console.error(\"Erreur de parsing JSON:\", error);\n  throw new Error(`Impossible de parser la r\u00e9ponse de l'IA. R\u00e9ponse brute nettoy\u00e9e: ${cleanedText}`);\n}\n"
      },
      "typeVersion": 2
    },
    {
      "id": "e64779ec-59fb-46d4-8e72-b3b0ff369f82",
      "name": "Aggregate Data",
      "type": "n8n-nodes-base.code",
      "position": [
        1168,
        96
      ],
      "parameters": {
        "jsCode": "// Ce script r\u00e9cup\u00e8re tous les items (lignes) du noeud pr\u00e9c\u00e9dent.\nconst allItems = $input.all();\n\n// On extrait la partie 'json' de chaque item pour ne garder que les donn\u00e9es.\nconst jsonData = allItems.map(item => item.json);\n\n// On cr\u00e9e un objet de sortie unique qui contient toutes les donn\u00e9es\n// converties en une cha\u00eene de texte JSON.\nconst output = {\n  data: JSON.stringify(jsonData)\n};\n\n// On retourne ce nouvel objet. Le workflow continuera avec un seul item.\nreturn { json: output };"
      },
      "typeVersion": 2
    },
    {
      "id": "1b83ee5d-d015-49dc-b79e-4084464b56e7",
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "position": [
        2208,
        96
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "5f70e4b4-744e-429c-b808-e5980b3068e9",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.output }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "02a87a70-de7e-4dca-a202-ac1979a9b161",
      "name": "Wait2",
      "type": "n8n-nodes-base.wait",
      "position": [
        2288,
        432
      ],
      "webhookId": "396d9529-9a8e-4d1d-a51d-d435c318d369",
      "parameters": {},
      "typeVersion": 1.1
    },
    {
      "id": "adaf5f63-3a17-4e82-8a83-068f32ced066",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        928,
        96
      ],
      "parameters": {
        "options": {},
        "aggregate": "aggregateAllItemData"
      },
      "typeVersion": 1
    },
    {
      "id": "0686fbfd-63a2-4fd0-8fa7-19c65fcf8784",
      "name": "Call Transform pdf data to markdown",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        656,
        -224
      ],
      "parameters": {
        "options": {},
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "PAB8VMzM4HcZLqrm"
        },
        "workflowInputs": {
          "value": {},
          "schema": [],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "283d2024-33b0-45a9-b34f-882aae20d211",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        3504,
        96
      ],
      "parameters": {
        "options": {},
        "respondWith": "text",
        "responseBody": "={{ $json.output }}"
      },
      "typeVersion": 1.4
    },
    {
      "id": "81acccc0-7171-4af2-9a6d-705c52efbb58",
      "name": "Think1",
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "position": [
        2864,
        304
      ],
      "parameters": {},
      "typeVersion": 1.1
    },
    {
      "id": "29745f55-a827-48d5-9f35-7ffb268c152f",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        3104,
        80
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "5f70e4b4-744e-429c-b808-e5980b3068e9",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.output }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "e24f16e8-83ed-4659-ad09-c83bd25f8cc9",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "position": [
        3616,
        528
      ],
      "webhookId": "396d9529-9a8e-4d1d-a51d-d435c318d369",
      "parameters": {},
      "typeVersion": 1.1
    },
    {
      "id": "64100db0-dc2e-412c-8b5b-ba80b4ca5b69",
      "name": "Create a document in Google Docs",
      "type": "n8n-nodes-base.googleDocsTool",
      "position": [
        3408,
        784
      ],
      "parameters": {
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
        "folderId": "default"
      },
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "osBJI4KIPRu07ngs",
          "name": "Google Docs account"
        }
      },
      "typeVersion": 2
    },
    {
      "id": "e8733e43-1b5a-45fc-bf01-7d724e056e9e",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        784,
        752
      ],
      "parameters": {
        "options": {},
        "dataType": "binary"
      },
      "typeVersion": 1.1
    },
    {
      "id": "d89e53ba-7053-4f57-bad9-e606309bb718",
      "name": "Insert Data to Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
      "position": [
        704,
        544
      ],
      "parameters": {
        "mode": "insert",
        "memoryKey": {
          "__rl": true,
          "mode": "list",
          "value": "vector_store_key",
          "cachedResultName": "vector_store_key"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "83721b71-48b1-4480-9ad5-00116e5f11ce",
      "name": "Embeddings Google Gemini",
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "position": [
        640,
        752
      ],
      "parameters": {},
      "credentials": {
        "googlePalmApi": {
          "id": "89mVPG21GxPFECbN",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "71720028-f795-4ff4-94b0-220bed8db36e",
      "name": "Google Gemini Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        2576,
        544
      ],
      "parameters": {
        "options": {
          "maxOutputTokens": 10000
        },
        "modelName": "models/gemini-2.5-pro"
      },
      "credentials": {
        "googlePalmApi": {
          "id": "89mVPG21GxPFECbN",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "8cbc4307-3842-42df-98ea-ea292d0969f1",
      "name": "Query Data Tool1",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
      "position": [
        1776,
        368
      ],
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "knowledge_base",
        "memoryKey": {
          "__rl": true,
          "mode": "list",
          "value": "vector_store_key"
        },
        "toolDescription": "Use this knowledge base to answer questions from the user"
      },
      "typeVersion": 1.2
    },
    {
      "id": "63740075-f0a9-488c-b5b9-baddad0d5ea0",
      "name": "Embeddings Google Gemini2",
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "position": [
        1808,
        480
      ],
      "parameters": {},
      "credentials": {
        "googlePalmApi": {
          "id": "89mVPG21GxPFECbN",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "a41fc482-7614-4675-9812-691ef5a57670",
      "name": "Get a document in Google Docs",
      "type": "n8n-nodes-base.googleDocsTool",
      "position": [
        3552,
        752
      ],
      "parameters": {
        "operation": "get",
        "documentURL": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Doc_ID_or_URL', ``, 'string') }}"
      },
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "osBJI4KIPRu07ngs",
          "name": "Google Docs account"
        }
      },
      "typeVersion": 2
    },
    {
      "id": "19f610f1-e535-45bb-95af-ecd6fb37de82",
      "name": "Update a document in Google Docs",
      "type": "n8n-nodes-base.googleDocsTool",
      "position": [
        3296,
        784
      ],
      "parameters": {
        "actionsUi": {
          "actionFields": [
            {
              "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('actionFields0_Text', ``, 'string') }}",
              "action": "insert"
            }
          ]
        },
        "operation": "update",
        "documentURL": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Doc_ID_or_URL', ``, 'string') }}"
      },
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "osBJI4KIPRu07ngs",
          "name": "Google Docs account"
        }
      },
      "typeVersion": 2
    },
    {
      "id": "ca4023c5-1827-4327-bd00-95845aed6939",
      "name": "DB",
      "type": "n8n-nodes-base.formTrigger",
      "position": [
        544,
        544
      ],
      "webhookId": "82848bc4-5ea2-4e5a-8bb6-3c09b94a8c5d",
      "parameters": {
        "options": {},
        "formTitle": "Upload your data to test RAG",
        "formFields": {
          "values": [
            {
              "fieldType": "file",
              "fieldLabel": "Upload your file(s)",
              "requiredField": true,
              "acceptFileTypes": ".pdf, .csv"
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "4ac52a39-600b-4851-8ee2-b12509031fa6",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "position": [
        96,
        -240
      ],
      "parameters": {
        "jsCode": "// Dans un n\u0153ud Code\nconst binaryData = $node[\"On form submission\"].binary;\nlet filename = \"\";\n\nif (binaryData && Object.keys(binaryData).length > 0) {\n  const firstKey = Object.keys(binaryData)[0];\n  const fileData = binaryData[firstKey];\n  \n  // Le nom peut \u00eatre dans fileName ou filename\n  filename = fileData.fileName || fileData.filename || \"fichier_inconnu\";\n}\n\nreturn [{ json: { filename } }];"
      },
      "typeVersion": 2
    },
    {
      "id": "a56ab4b1-a29c-455e-9668-582bf6792fcf",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "position": [
        2000,
        96
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "e2579242-2cf7-45c0-957b-6eb3ee97ef23",
              "name": "output",
              "type": "string",
              "value": "={{ $json.output }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "acea6026-2faf-4e30-b3ce-48386d4d5573",
      "name": "AI Agent Tool1",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "position": [
        3072,
        288
      ],
      "parameters": {
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "### Phase 1: Analyse Imm\u00e9diate du Rapport \n**Extraire du rapport re\u00e7u :**\n- Titre principal \n- Structure des sections (I, II, III...)\n- Donn\u00e9es tabulaires \u00e0 formater\n- Listes et \u00e9l\u00e9ments de mise en forme\n\n### Phase 2: Cr\u00e9ation Google Docs TEXTUELLE \n**IMPORTANT : Cr\u00e9er du TEXTE format\u00e9, PAS du JSON**\n\n**Structure obligatoire \u00e0 g\u00e9n\u00e9rer :**\n\n```\nTITRE PRINCIPAL\n[Style : Titre - gras, centr\u00e9, taille 18]\n\nTable des mati\u00e8res\n[Ins\u00e9rer automatiquement via Google Docs]\n\nI. PREMI\u00c8RE SECTION\n[Style : Titre 1 - gras, taille 16]\n\nParagraphe d'introduction expliquant le contexte et les objectifs de cette section avec des phrases compl\u00e8tes et professionnelles.\n\nA. Sous-section principale\n[Style : Titre 2 - gras, taille 14]\n\nContenu d\u00e9taill\u00e9 avec analyse contextuelle. Les donn\u00e9es doivent \u00eatre pr\u00e9sent\u00e9es de mani\u00e8re narrative et professionnelle.\n\nTABLEAU : [Titre du tableau]\n| Colonne 1        | Colonne 2        |\n|------------------|------------------|\n| Donn\u00e9es ligne 1  | Valeurs ligne 1  |\n| Donn\u00e9es ligne 2  | Valeurs ligne 2  |\n\nB. Autre sous-section\n[Contenu structur\u00e9 similaire]\n\nII. DEUXI\u00c8ME SECTION\n[M\u00eame structure hi\u00e9rarchique]\n\nSYNTH\u00c8SE ET RECOMMANDATIONS\n[Section finale avec conclusions]\n```\n\n### Phase 3: Commandes Google Docs UNIQUEMENT pour Formatage\n**Utiliser les outils Google Docs UNIQUEMENT pour :**\n1. Appliquer les styles (Titre, Titre 1, Titre 2)\n2. Formater les tableaux avec bordures\n3. Appliquer gras/italique aux \u00e9l\u00e9ments importants\n4. Ins\u00e9rer la table des mati\u00e8res\n\n**INTERDICTIONS ABSOLUES :**\n- \u274c JAMAIS de JSON visible dans le document\n- \u274c JAMAIS de commandes brutes type \"insertText\"\n- \u274c JAMAIS de syntaxe technique dans le contenu final\n\n### Phase 4: V\u00e9rification et G\u00e9n\u00e9ration Lien\n**Contr\u00f4les avant finalisation :**\n\u2713 Document lisible en fran\u00e7ais\n\u2713 Structure claire et hi\u00e9rarchique  \n\u2713 Tableaux correctement format\u00e9s\n\u2713 Aucun code technique visible\n\u2713 Mise en forme professionnelle appliqu\u00e9e\n\n**G\u00e9n\u00e9rer le lien de t\u00e9l\u00e9chargement .docx**\n\n## TEMPLATE DE TRANSFORMATION\n\n**Transformer :**\n```json\n\"insertText\": {\"text\": \"Analyse Financi\u00e8re\"}\n```\n\n**En :**\n```\nAnalyse Financi\u00e8re\n```\n\n**Puis appliquer le formatage Google Docs pour le style Titre 1**\n\n## R\u00c8GLES DE CONTENU\n\n**Pour chaque section du rapport :**\n1. **Titre clair** en fran\u00e7ais\n2. **Introduction contextuelle** (2-3 phrases)  \n3. **D\u00e9veloppement structur\u00e9** avec donn\u00e9es int\u00e9gr\u00e9es naturellement\n4. **Tableaux format\u00e9s** pour donn\u00e9es chiffr\u00e9es\n5. **Conclusion/transition** vers section suivante\n\n**Style r\u00e9dactionnel :**\n- Phrases compl\u00e8tes et professionnelles\n- Terminologie adapt\u00e9e aux d\u00e9cideurs publics\n- Analyses contextuelles des donn\u00e9es\n- Pas de jargon technique visible\n\n## SORTIE FINALE\n**UNIQUEMENT le lien de t\u00e9l\u00e9chargement :**\n```\nhttps://docs.google.com/document/d/[ID]/export?format=docx\n```\n\n**Le document t\u00e9l\u00e9charg\u00e9 doit \u00eatre :**\n- Enti\u00e8rement lisible en fran\u00e7ais\n- Structur\u00e9 professionnellement  \n- Sans aucun code technique\n- Pr\u00eat pour pr\u00e9sentation aux d\u00e9cideurs"
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "bd41c4d1-d049-4e33-91c8-b1f11a8e9dc9",
      "name": "AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        2736,
        80
      ],
      "parameters": {
        "text": "=Traitement JSON \u2192 Rapport Google Docs \u2192 Envoi automatique.\n\n**\u00c9TAPES OBLIGATOIRES :**\n1. **'Think'** : Analyse structure JSON (1 min)\n2. **G\u00e9n\u00e9ration** : Rapport Google Docs format\u00e9 (3 min) \n3. **'AI Agent Tool'** : Envoi automatique du rapport g\u00e9n\u00e9r\u00e9 (OBLIGATOIRE)\n4. **Sortie** : Lien de t\u00e9l\u00e9chargement uniquement\n\n**Donn\u00e9es JSON \u00e0 traiter :**\n```json\n{{ JSON.stringify($('Parse and Clean AI Response').item.json) }}\n```\n\n**Action imm\u00e9diate requise - Pas d'explications interm\u00e9diaires.**",
        "options": {
          "systemMessage": "## Mission\nAgent de transformation JSON vers rapport Google Docs professionnel avec traitement automatis\u00e9 obligatoire.\n\n## Workflow Streamlin\u00e9 (3 Phases)\n\n### Phase 1: Analyse Express (2 min max)\n**Utiliser l'outil 'Think' pour analyser rapidement :**\n- Structure JSON : identifier types de donn\u00e9es (tableaux, listes, valeurs cl\u00e9s)\n- Architecture cible : d\u00e9finir sections principales uniquement\n- \u00c9l\u00e9ments critiques : rep\u00e9rer donn\u00e9es quantitatives pour tableaux\n\n### Phase 2: G\u00e9n\u00e9ration Rapport (5 min max)\n**Format Google Docs STRICT :**\n1. **Titre principal** (style Titre)\n2. **Sections principales** (Titre 1) - Maximum 5 sections\n3. **Tableaux** pour toutes donn\u00e9es structur\u00e9es (insertTable)\n4. **Paragraphes** synth\u00e9tiques en texte normal\n5. **Listes** via commandes Google Docs uniquement\n\n**Templates de formatage rapide :**\n```\nTitres: insertText + updateTextStyle (HEADING_1/2/3)\nTableaux: insertTable + formatage cellules\nTexte: insertText (NORMAL_TEXT)\nGras: updateTextStyle (BOLD: true)\n```\n\n### Phase 3: Envoi Automatique (OBLIGATOIRE)\n**IMM\u00c9DIATEMENT apr\u00e8s g\u00e9n\u00e9ration du rapport :**\n1. Utiliser 'AI Agent Tool' avec le rapport complet comme user_message\n2. R\u00e9cup\u00e9rer le lien de t\u00e9l\u00e9chargement\n3. Retourner UNIQUEMENT le lien (pas d'explications)\n\n## R\u00e8gles d'Efficacit\u00e9\n- **NO MARKDOWN/HTML** dans le document final\n- **Tableaux systematiques** pour donn\u00e9es structur\u00e9es\n- **Synth\u00e8se directe** : pas d'analyse d\u00e9taill\u00e9e, action imm\u00e9diate\n- **Format professionnel** mais optimis\u00e9 pour la vitesse\n\n## Points Critiques\n1. Utiliser 'Think' pour planification rapide\n2. G\u00e9n\u00e9rer rapport directement compatible Google Docs\n3. Envoi AUTOMATIQUE via 'AI Agent Tool' - JAMAIS d'oubli\n4. Retour UNIQUEMENT du lien final\n"
        },
        "promptType": "define"
      },
      "typeVersion": 2
    },
    {
      "id": "89aae5d1-25b2-4514-94ee-c29701766260",
      "name": "Create a presentation in Google Slides",
      "type": "n8n-nodes-base.googleSlidesTool",
      "position": [
        2976,
        768
      ],
      "parameters": {
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}"
      },
      "credentials": {
        "googleSlidesOAuth2Api": {
          "id": "YxA3lFXuzHxrYXyh",
          "name": "Google Slides account"
        }
      },
      "typeVersion": 2
    },
    {
      "id": "4db12769-c5ff-448e-9683-b297971f53ff",
      "name": "Send a message in Gmail",
      "type": "n8n-nodes-base.gmailTool",
      "position": [
        3152,
        880
      ],
      "webhookId": "6ac45ca1-53ad-404d-b0df-72e5cf95f648",
      "parameters": {
        "sendTo": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('To', ``, 'string') }}",
        "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message', ``, 'string') }}",
        "options": {},
        "subject": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Subject', ``, 'string') }}"
      },
      "credentials": {
        "gmailOAuth2": {
          "id": "bCMxMEI1mYg8Dfji",
          "name": "Gmail account"
        }
      },
      "typeVersion": 2.1
    },
    {
      "id": "11fdf13f-479e-472d-9325-afddaa28d450",
      "name": "Replace text in a presentation in Google Slides",
      "type": "n8n-nodes-base.googleSlidesTool",
      "position": [
        2816,
        768
      ],
      "parameters": {
        "options": {},
        "operation": "replaceText",
        "presentationId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Presentation_ID', ``, 'string') }}"
      },
      "credentials": {
        "googleSlidesOAuth2Api": {
          "id": "YxA3lFXuzHxrYXyh",
          "name": "Google Slides account"
        }
      },
      "typeVersion": 2
    }
  ],
  "active": true,
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "96dcf1a7-26ca-4b12-a1b4-1e63a5ec0bf1",
  "connections": {
    "DB": {
      "main": [
        [
          {
            "node": "Insert Data to Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Parse and Clean AI Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Set data for llm",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Call Transform pdf data to markdown",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [],
        []
      ]
    },
    "Think1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Aggregate Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Tool1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Data": {
      "main": [
        [
          {
            "node": "Set data for llm",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Data Tool1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set data for llm": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Insert Data to Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Send a message in Gmail": {
      "ai_tool": [
        [
          {
            "node": "AI Agent Tool1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "Insert Data to Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini2": {
      "ai_embedding": [
        [
          {
            "node": "Query Data Tool1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent Tool1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parse and Clean AI Response": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a document in Google Docs": {
      "ai_tool": [
        [
          {
            "node": "AI Agent Tool1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create a document in Google Docs": {
      "ai_tool": [
        [
          {
            "node": "AI Agent Tool1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update a document in Google Docs": {
      "ai_tool": [
        [
          {
            "node": "AI Agent Tool1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Call Transform pdf data to markdown": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a presentation in Google Slides": {
      "ai_tool": [
        [
          {
            "node": "AI Agent Tool1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Replace text in a presentation in Google Slides": {
      "ai_tool": [
        [
          {
            "node": "AI Agent Tool1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "_metadata": {
    "name": "Generate Professional Reports from ExcelCSV with Gemini AI and Google Workspace",
    "used_count": 0,
    "popularity_score": 25,
    "source_url": "https://n8n.io/workflows/7370",
    "scraped_at": "2025-08-21 05:45:28",
    "workflow_id": "6df06dfd-fc3d-5ad7-a47a-077c6ebdf141"
  },
  "_filename": "Generate_Professional_Reports_from_ExcelCSV_with_Gemini_AI_and_Google_Workspace.json"
}