{
  "meta": {
    "instanceId": "placeholder"
  },
  "nodes": [
    {
      "id": "config-note",
      "name": "Configuration",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        250,
        150
      ],
      "parameters": {
        "content": "## Citation Network Builder\n\nInput: Paper IDs (DOI, PubMed ID, etc.)\nDepth: How many citation levels to explore\nOutput: Network graph data"
      },
      "typeVersion": 1
    },
    {
      "id": "input-params",
      "name": "Set Parameters",
      "type": "n8n-nodes-base.set",
      "position": [
        450,
        300
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "seedPapers",
              "value": "10.1038/nature12373,12345678,2301.12345"
            },
            {
              "name": "depth",
              "value": "2"
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "split-ids",
      "name": "Split Paper IDs",
      "type": "n8n-nodes-base.code",
      "position": [
        650,
        300
      ],
      "parameters": {
        "functionCode": "const papers = $json.seedPapers.split(',').map(id => ({ id: id.trim() }));\nreturn papers;"
      },
      "typeVersion": 1
    },
    {
      "id": "pdfvector-fetch",
      "name": "PDF Vector - Fetch Papers",
      "type": "n8n-nodes-pdfvector.pdfVector",
      "notes": "Fetch details for each paper",
      "position": [
        850,
        300
      ],
      "parameters": {
        "ids": "={{ $json.id }}",
        "fields": [
          "title",
          "authors",
          "year",
          "doi",
          "abstract",
          "totalCitations",
          "totalReferences"
        ],
        "resource": "academic",
        "operation": "fetch"
      },
      "typeVersion": 1
    },
    {
      "id": "fetch-citations",
      "name": "Fetch Citing Papers",
      "type": "n8n-nodes-pdfvector.pdfVector",
      "position": [
        1050,
        300
      ],
      "parameters": {
        "limit": 20,
        "query": "=references:{{ $json.doi }}",
        "fields": [
          "title",
          "authors",
          "year",
          "doi",
          "totalCitations"
        ],
        "resource": "academic",
        "operation": "search"
      },
      "typeVersion": 1
    },
    {
      "id": "build-network",
      "name": "Build Network Data",
      "type": "n8n-nodes-base.code",
      "position": [
        1250,
        300
      ],
      "parameters": {
        "functionCode": "// Build network nodes and edges\nconst nodes = [];\nconst edges = [];\n\n// Add main paper as node\nnodes.push({\n  id: $json.doi || $json.id,\n  label: $json.title,\n  size: Math.log($json.totalCitations + 1) * 10,\n  citations: $json.totalCitations,\n  year: $json.year,\n  type: 'seed'\n});\n\n// Add citing papers and edges\nif ($json.citingPapers) {\n  $json.citingPapers.forEach(paper => {\n    nodes.push({\n      id: paper.doi,\n      label: paper.title,\n      size: Math.log(paper.totalCitations + 1) * 5,\n      citations: paper.totalCitations,\n      year: paper.year,\n      type: 'citing'\n    });\n    \n    edges.push({\n      source: paper.doi,\n      target: $json.doi || $json.id,\n      weight: 1\n    });\n  });\n}\n\nreturn { nodes, edges };"
      },
      "typeVersion": 1
    },
    {
      "id": "combine-network",
      "name": "Combine Network",
      "type": "n8n-nodes-base.code",
      "position": [
        1450,
        300
      ],
      "parameters": {
        "functionCode": "// Combine all nodes and edges from multiple papers\nconst allNodes = [];\nconst allEdges = [];\n\nitems.forEach(item => {\n  if (item.json.nodes) {\n    allNodes.push(...item.json.nodes);\n  }\n  if (item.json.edges) {\n    allEdges.push(...item.json.edges);\n  }\n});\n\n// Remove duplicate nodes based on ID\nconst uniqueNodes = Array.from(new Map(allNodes.map(node => [node.id, node])).values());\n\nreturn [{ json: { nodes: uniqueNodes, edges: allEdges } }];"
      },
      "typeVersion": 1
    },
    {
      "id": "export-network",
      "name": "Export Network JSON",
      "type": "n8n-nodes-base.writeBinaryFile",
      "position": [
        1650,
        300
      ],
      "parameters": {
        "fileName": "citation_network_{{ $now.format('yyyy-MM-dd') }}.json",
        "fileContent": "={{ JSON.stringify({ nodes: $json.nodes, edges: $json.edges }, null, 2) }}"
      },
      "typeVersion": 1
    },
    {
      "id": "generate-gexf",
      "name": "Generate GEXF",
      "type": "n8n-nodes-base.code",
      "position": [
        1650,
        450
      ],
      "parameters": {
        "functionCode": "// Generate Gephi-compatible GEXF format\nconst nodes = $json.nodes;\nconst edges = $json.edges;\n\nlet gexf = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gexf xmlns=\"http://www.gexf.net/1.2draft\" version=\"1.2\">\n  <graph mode=\"static\" defaultedgetype=\"directed\">\n    <nodes>\\n`;\n\nnodes.forEach(node => {\n  gexf += `      <node id=\"${node.id}\" label=\"${node.label}\">\n        <attvalues>\n          <attvalue for=\"citations\" value=\"${node.citations}\"/>\n          <attvalue for=\"year\" value=\"${node.year}\"/>\n        </attvalues>\n      </node>\\n`;\n});\n\ngexf += `    </nodes>\n    <edges>\\n`;\n\nedges.forEach((edge, i) => {\n  gexf += `      <edge id=\"${i}\" source=\"${edge.source}\" target=\"${edge.target}\" weight=\"${edge.weight}\"/>\\n`;\n});\n\ngexf += `    </edges>\n  </graph>\n</gexf>`;\n\nreturn { gexf };"
      },
      "typeVersion": 1
    }
  ],
  "connections": {
    "Set Parameters": {
      "main": [
        [
          {
            "node": "Split Paper IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Network": {
      "main": [
        [
          {
            "node": "Export Network JSON",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate GEXF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Paper IDs": {
      "main": [
        [
          {
            "node": "PDF Vector - Fetch Papers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Network Data": {
      "main": [
        [
          {
            "node": "Combine Network",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Citing Papers": {
      "main": [
        [
          {
            "node": "Build Network Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDF Vector - Fetch Papers": {
      "main": [
        [
          {
            "node": "Fetch Citing Papers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "_metadata": {
    "name": "Build Academic Citation Networks with PDF Vector API for Gephi Visualization",
    "used_count": 0,
    "popularity_score": 25,
    "source_url": "https://n8n.io/workflows/7356",
    "scraped_at": "2025-08-21 06:00:11",
    "workflow_id": "57845c69-5a11-5638-9eac-41d180f332a7"
  },
  "_filename": "Build_Academic_Citation_Networks_with_PDF_Vector_API_for_Gephi_Visualization.json"
}