{
  "id": "tMStkA8LDIhkaCcF",
  "meta": {
    "instanceId": "f72cde31dbc45f25c4862cabd0d3f8e8f469ec75575f9316329a5ee265ad866e",
    "templateCredsSetupCompleted": true
  },
  "name": "Multi-agent Intelligent Reddit Automation by Arunava",
  "tags": [
    {
      "id": "DDbFuPgB9dn2WGr3",
      "name": "Reddit",
      "createdAt": "2025-08-10T11:38:34.764Z",
      "updatedAt": "2025-08-10T11:38:34.764Z"
    },
    {
      "id": "g7moK2McYEReOutq",
      "name": "GEO",
      "createdAt": "2025-08-16T09:26:24.096Z",
      "updatedAt": "2025-08-16T09:26:24.096Z"
    }
  ],
  "nodes": [
    {
      "id": "0a3f4382-7dae-4199-87ad-a0048c8359c6",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -16,
        16
      ],
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 12
            }
          ]
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "042435f1-9561-4b6b-85cc-032ca94324f0",
      "name": "Search for a post",
      "type": "n8n-nodes-base.reddit",
      "position": [
        240,
        16
      ],
      "parameters": {
        "limit": 25,
        "keyword": "{your keyword here}",
        "location": "allReddit",
        "operation": "search",
        "additionalFields": {
          "sort": "new"
        }
      },
      "credentials": {
        "redditOAuth2Api": {
          "id": "FbATabVyPwbmtHgg",
          "name": "Reddit account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "5576d6c4-eac2-4655-b2cb-264305a798ad",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "onError": "continueRegularOutput",
      "position": [
        1808,
        16
      ],
      "parameters": {
        "text": "=You are an intelligent post analysis agent helping a brand discover conversations around AI-based design tools.\n\nYou will be given a social media post (e.g., Reddit, Threads, X) and your job is to analyze whether it is relevant for us to engage in a reply.\n\n\ud83d\udd0d You must check if the post is:\n1. Asking for recommendations for an AI design tool.\n2. Expressing pain, frustration, or dissatisfaction with their current design tool or workflow.\n3. Sharing a personal use case, problem, or requirement around AI-assisted or generative design (images, UI/UX, ad creatives, mockups, branding etc).\n\n\ud83d\udccc Ignore posts that:\n- Are general news or announcements with no personal pain point or query.\n- Are about completely unrelated fields (AI music, coding tools, crypto, etc).\n\n\ud83e\uddfe Input Post:\n---\n{{ $('Loop Over Items').item.json.selftext }}\n\nOutput must be in json and must have:\n\n{\n  \"is_relevant\": \"true/false\",\n  \"reason\": \"Short explanation why you think it is or isn't relevant\",\n  \"relevance_type\": \"tool_request | frustration | use_case | not_relevant\",\n  \"title\": \"{{ $('Loop Over Items').item.json.title }}\",\n  \"selftext\": \"{{ $('Loop Over Items').item.json.selftext }}\",\n  \"subreddit\": \"{{ $('Loop Over Items').item.json.subreddit }}\",\n  \"postid\": \"{{ $('Loop Over Items').item.json.name }}\"\n}",
        "options": {},
        "promptType": "define"
      },
      "typeVersion": 2
    },
    {
      "id": "8fef64ee-96ca-4a30-8342-66f9a9f9d929",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        1792,
        256
      ],
      "parameters": {
        "options": {}
      },
      "credentials": {
        "googlePalmApi": {
          "id": "nFdyAhBTBIH3W2LS",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "8a0c0fc0-cfd7-47a3-8c54-31411e77c68b",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        2112,
        256
      ],
      "parameters": {
        "jsonSchemaExample": "{\n  \"is_relevant\": \"true/false\",\n  \"reason\": \"Short explanation why you think it is or isn't relevant\",\n  \"relevance_type\": \"tool_request | frustration | use_case | not_relevant\",\n  \"title\": \"NST using an AI image for an article\",\n  \"selftext\": \"Personally I feel like a news organization should not be going anywhere near AI given what AI can be used for in generating fake\",\n  \"subreddit\": \"malaysia\",\n  \"postid\": \"t3_1mlrgyz\"\n}"
      },
      "typeVersion": 1.3
    },
    {
      "id": "0d6b0645-34c0-44b0-b056-e7708c35952b",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        512,
        16
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 3
    },
    {
      "id": "5a3c7d24-b2ca-49a7-bbeb-0211078b2832",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        256,
        304
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "df1d3d2e-7acf-49b6-800a-067c8f00e325",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.output.is_relevant }}",
              "rightValue": "true"
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "9c557675-1d51-429d-abe1-671e10f8b7c3",
      "name": "AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        544,
        304
      ],
      "parameters": {
        "text": "=You are a genuine Reddit user who cares about helping OP.\nWrite a concise, honest, non-promotional comment that directly solves the poster\u2019s need.\n\nRules:\n\nSound like a real person. No \u201cas an AI\u201d, no hype, no emojis, no salesy tone.\n\nStart by acknowledging the ask in 1 short line.\n\nGive 1\u20132 specific, actionable suggestions or steps based on the post (not generic advice).\n\nIf and only if it\u2019s clearly relevant to what OP is asking, softly mention {your.brand} as an option: say it\u2019s free to try and the founder is very active on support. Do not push or overpromise. One short clause is enough.\n\nIf it\u2019s not relevant or would violate subreddit norms, don\u2019t mention it.\n\nNo DMs, emails, or link spam. Use the plain domain {your.domain} (no http).\n\nKeep it under 110 words. 3\u20135 short sentences max.\n\nBe respectful; invite follow-ups in-thread.\n\nOutput: plain text only (the final comment).\n\nUser (template \u2013 fill with n8n expressions)\nSubreddit: {{ $json.output.subreddit }}\nPost title: {{ $json.output.title }}\nself text: {{ $json.output.selftext }}\nSummary of the ask (from your analyzer): {{ $json.output.reason }}\n\nWrite the comment now.\n\nOptional soft-mention about a tool:\n\u201cYou could also try {your.brand} \u2014 free to start, and the founder is very responsive on support.\u201d\n\n\u201cIf you need exactly that feature, {your.brand} might be worth a quick try; it\u2019s free and the founder is super active in support threads.\u201d\n\nInstructions:\n\nStart with the recommendation/answer immediately. Do not rephrase the title/body or add any opener.\n\nBanned openers & fillers: \u201cAI image tools\u2026\u201d, \u201cFor X\u2026\u201d, \u201cYou can try\u2026\u201d, \u201csolid option\u201d, \u201ctotally get it\u201d, \u201cas an AI\u201d, \u201chey\u201d, \u201chope this helps\u201d, \u201cconsider using\u201d, \u201cthere are many\u201d.\n\nLength: 2\u20134 sentences, \u226490 words, plain text (no bullets/markdown/emojis).\n\nActionability: include one concrete next step (what to click/try/change).\n\n{your.brand} mention (only if relevant): If the requested feature clearly matches, add one soft clause:\n\u201c{your.brand} is free to try and the founder is very active on support.\u201d\nUse the plain domain; no links, DMs, or email. If not relevant or against sub rules, don\u2019t mention it.\n\nRespect subreddit norms. No sales tone.",
        "options": {},
        "promptType": "define"
      },
      "typeVersion": 2
    },
    {
      "id": "b2d82149-f64e-4d1d-9d64-a7130058f2d0",
      "name": "Google Gemini Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        544,
        528
      ],
      "parameters": {
        "options": {}
      },
      "credentials": {
        "googlePalmApi": {
          "id": "nFdyAhBTBIH3W2LS",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "1c24e125-87d3-4cac-a20b-287359e26986",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        848,
        544
      ],
      "parameters": {
        "sessionKey": "rustic",
        "sessionIdType": "customKey"
      },
      "typeVersion": 1.3
    },
    {
      "id": "37c357e1-0e13-4537-b28c-6b655f797f9a",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1072,
        304
      ],
      "parameters": {
        "url": "https://oauth.reddit.com/api/comment",
        "method": "POST",
        "options": {},
        "sendBody": true,
        "contentType": "form-urlencoded",
        "sendHeaders": true,
        "authentication": "genericCredentialType",
        "bodyParameters": {
          "parameters": [
            {
              "name": "api_type",
              "value": "json"
            },
            {
              "name": "thing_id",
              "value": "={{ $('If').item.json.output.postid }}"
            },
            {
              "name": "text",
              "value": "={{ $json.output || $json.reply || $json.text }}"
            }
          ]
        },
        "genericAuthType": "oAuth2Api",
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "n8n:reddit-autoreply:1.0 (by /u/{reddit-username})"
            }
          ]
        }
      },
      "credentials": {
        "oAuth2Api": {
          "id": "P0CrKMqafUlJb7iy",
          "name": "Unnamed credential"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "222787a5-bc2d-44ba-824c-66dabfdadd6b",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "position": [
        1520,
        16
      ],
      "webhookId": "2c3ccf1f-2972-4bb8-9655-a7827deabdd8",
      "parameters": {
        "unit": "minutes"
      },
      "typeVersion": 1.1
    },
    {
      "id": "7db2aef6-1152-469a-bc32-5d915c73822f",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -80,
        -80
      ],
      "parameters": {
        "color": 3,
        "width": 224,
        "height": 256,
        "content": "## Check for New Posts"
      },
      "typeVersion": 1
    },
    {
      "id": "8c4ae7d0-1ee0-4a22-85b0-d36dcdb9530f",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        176,
        -80
      ],
      "parameters": {
        "height": 256,
        "content": "## Fetch Posts from Reddit"
      },
      "typeVersion": 1
    },
    {
      "id": "9a715e10-04bf-4575-8ddc-80eaa3e301a8",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        448,
        -80
      ],
      "parameters": {
        "color": 6,
        "height": 256,
        "content": "## Split into Single Posts"
      },
      "typeVersion": 1
    },
    {
      "id": "facd9195-a1aa-4618-a33e-efaf2be0cf52",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        720,
        -80
      ],
      "parameters": {
        "color": 4,
        "width": 432,
        "height": 256,
        "content": "## Check duplicate row in Baserow"
      },
      "typeVersion": 1
    },
    {
      "id": "418a4931-dbf9-4c4d-8fa9-6255d240f743",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1184,
        -80
      ],
      "parameters": {
        "color": 3,
        "height": 256,
        "content": "## Filter Replied Posts"
      },
      "typeVersion": 1
    },
    {
      "id": "75be2c15-0fea-481d-8e63-7c870f22650f",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1728,
        -80
      ],
      "parameters": {
        "color": 5,
        "width": 512,
        "height": 544,
        "content": "## Analyse Post Relevance & Sentiment"
      },
      "typeVersion": 1
    },
    {
      "id": "5ceb4549-6687-43ac-b4f3-36221a84dddb",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -80,
        208
      ],
      "parameters": {
        "height": 256,
        "content": "## Structure Output"
      },
      "typeVersion": 1
    },
    {
      "id": "b5feaa38-8db8-4297-9340-2dc1d2447b16",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        192,
        208
      ],
      "parameters": {
        "color": 3,
        "height": 256,
        "content": "## Filter Relevant Post"
      },
      "typeVersion": 1
    },
    {
      "id": "10426aa7-cb96-4091-8240-714bbbec6990",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        464,
        208
      ],
      "parameters": {
        "color": 5,
        "width": 512,
        "height": 544,
        "content": "## Write Reddit Comment using AI"
      },
      "typeVersion": 1
    },
    {
      "id": "7d5cc545-e944-486b-b6d2-cf5121c45843",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1008,
        208
      ],
      "parameters": {
        "color": 4,
        "height": 256,
        "content": "## Post Reddit Comment"
      },
      "typeVersion": 1
    },
    {
      "id": "3a227d99-013d-4983-9e8d-f5f1b3094891",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1280,
        208
      ],
      "parameters": {
        "color": 6,
        "height": 256,
        "content": "## Structure Output"
      },
      "typeVersion": 1
    },
    {
      "id": "f961314a-20b5-45b8-acdc-31a5e0fe4440",
      "name": "Anthropic Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        1952,
        256
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude 4 Sonnet"
        },
        "options": {}
      },
      "credentials": {
        "anthropicApi": {
          "id": "Oo0qcgPZfQI0wJcD",
          "name": "Anthropic account"
        }
      },
      "typeVersion": 1.3
    },
    {
      "id": "3804348d-1ad6-4473-80ed-9d19004d48d8",
      "name": "Anthropic Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        704,
        528
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude 4 Sonnet"
        },
        "options": {}
      },
      "credentials": {
        "anthropicApi": {
          "id": "Oo0qcgPZfQI0wJcD",
          "name": "Anthropic account"
        }
      },
      "typeVersion": 1.3
    },
    {
      "id": "de39d181-bf03-4f05-b467-1d055a734ed0",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1456,
        -80
      ],
      "parameters": {
        "height": 256,
        "content": "## Wait for 5mins"
      },
      "typeVersion": 1
    },
    {
      "id": "43739193-e6be-490c-b075-efdbf1c9139c",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1280,
        480
      ],
      "parameters": {
        "height": 256,
        "content": "## Wait for 6 hrs"
      },
      "typeVersion": 1
    },
    {
      "id": "9f862eb0-bdea-4dee-b568-7a7d412734aa",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1008,
        496
      ],
      "parameters": {
        "color": 6,
        "height": 256,
        "content": "## Store Comment Data on Baserow"
      },
      "typeVersion": 1
    },
    {
      "id": "da15d5d6-6c3b-4162-b157-9242b3c3f609",
      "name": "Check Baserow for duplicate post",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        784,
        16
      ],
      "parameters": {
        "url": "=https://api.baserow.io/api/database/rows/table/{table_id}/?user_field_names=true&filter__post_id__equal={{ $json.name }}&size=1",
        "options": {},
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token {token}"
            }
          ]
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "4db24f06-eb53-480c-b667-b69180bb2dae",
      "name": "Filter",
      "type": "n8n-nodes-base.code",
      "position": [
        992,
        16
      ],
      "parameters": {
        "jsCode": "const post = $items('Loop Over Items', 0, 0).json;   // current Reddit post\nconst res  = $json;                                   // HTTP response {count, results}\nreturn [{\n  json: {\n    ...post,\n    baserow_count: res.count || 0,\n    baserow_results: res.results || res.results?.results || [],\n  }\n}];\n"
      },
      "typeVersion": 2
    },
    {
      "id": "0ff2aebf-76e8-487c-b20a-35dfa8a942f0",
      "name": "Filter Replied Posts",
      "type": "n8n-nodes-base.if",
      "position": [
        1248,
        16
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "88c84089-90f5-488e-b922-bdcb329772c5",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ ($json.baserow_count || 0) > 0 && ($json.baserow_results[0]?.status === true) }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "57565fe1-9804-4537-9396-9728494a9da6",
      "name": "Structure Output",
      "type": "n8n-nodes-base.set",
      "position": [
        -16,
        304
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "c6cfa8b4-3dc8-471c-b8b2-126f37a2ebfe",
              "name": "output.is_relevant",
              "type": "string",
              "value": "={{ $json.output.is_relevant }}"
            },
            {
              "id": "3de95d4b-f8ed-4a44-824d-145d8d568548",
              "name": "output.reason",
              "type": "string",
              "value": "={{ $json.output.reason }}"
            },
            {
              "id": "dcd0d57e-a1b7-44c3-a3d7-ca539243f19a",
              "name": "output.relevance_type",
              "type": "string",
              "value": "={{ $json.output.relevance_type }}"
            },
            {
              "id": "1bb011f7-ce48-4097-a0ca-73dc1c26907a",
              "name": "output.title",
              "type": "string",
              "value": "={{ $json.output.title }}"
            },
            {
              "id": "bfb3e15b-47ad-448c-a133-5e7df407c9a4",
              "name": "output.selftext",
              "type": "string",
              "value": "={{ $json.output.selftext }}"
            },
            {
              "id": "c60a96e4-fa40-466a-82f7-4569ab062bea",
              "name": "output.subreddit",
              "type": "string",
              "value": "={{ $json.output.subreddit }}"
            },
            {
              "id": "8a3789a9-af40-48a3-ba9f-6ae9be3d12aa",
              "name": "output.postid",
              "type": "string",
              "value": "={{ $json.output.postid }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "d43bae19-6d8e-4c2f-b352-24d865173cfb",
      "name": "Add Post Details on Baserow",
      "type": "n8n-nodes-base.baserow",
      "position": [
        1072,
        592
      ],
      "parameters": {
        "tableId": 637660,
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 5203838,
              "fieldValue": "={{ $json['Post ID'] }}"
            },
            {
              "fieldId": 5203839,
              "fieldValue": "={{ $json['Post URL'] }}"
            },
            {
              "fieldId": 5203840,
              "fieldValue": "={{ $json.Subreddit }}"
            },
            {
              "fieldId": 5203842,
              "fieldValue": "={{ $json['Post Title'] }}"
            },
            {
              "fieldId": 5203860,
              "fieldValue": "={{ $json.created_utc }}"
            },
            {
              "fieldId": 5203864,
              "fieldValue": "={{ $json['Post Reply'] }}"
            },
            {
              "fieldId": 5203866,
              "fieldValue": "={{ $json.Status }}"
            }
          ]
        },
        "operation": "create",
        "databaseId": 272214
      },
      "credentials": {
        "baserowApi": {
          "id": "JVWuLuOHC9umBOcz",
          "name": "Baserow account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "fbab05be-4b65-402f-9c3d-a8191d51cac6",
      "name": "Wait to avoid hitting api limit",
      "type": "n8n-nodes-base.wait",
      "position": [
        1344,
        576
      ],
      "webhookId": "4e0901fb-62cf-423d-a0ed-2c8fd4608776",
      "parameters": {
        "unit": "hours",
        "amount": 6
      },
      "typeVersion": 1.1
    },
    {
      "id": "10fa6043-7b34-4f3f-8bd1-e0d15814e3bd",
      "name": "Map Output in Structure",
      "type": "n8n-nodes-base.set",
      "position": [
        1344,
        304
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "c181497a-1aa0-4a50-a0a6-494ef873b121",
              "name": "Post URL",
              "type": "string",
              "value": "=https://www.reddit.com{{ $('Search for a post').item.json.permalink }}"
            },
            {
              "id": "3a098593-c054-4c12-bc7f-6cf8387ba4d5",
              "name": "Post ID",
              "type": "string",
              "value": "={{ $('If').item.json.output.postid }}"
            },
            {
              "id": "b1bed346-e795-4a85-8a2b-6c07f8dbd771",
              "name": "Subreddit",
              "type": "string",
              "value": "={{ $('If').item.json.output.subreddit }}"
            },
            {
              "id": "aaf96c11-bb74-4478-b8c1-4ad97413002c",
              "name": "Post Title",
              "type": "string",
              "value": "={{ $('If').item.json.output.title }}"
            },
            {
              "id": "a18ca3b0-1656-47dc-a837-4affc2079889",
              "name": "Post Reply",
              "type": "string",
              "value": "={{ $('AI Agent1').item.json.output }}"
            },
            {
              "id": "a6c71807-d6ae-4373-8a9b-7e5b60fe30e2",
              "name": "Status",
              "type": "boolean",
              "value": true
            },
            {
              "id": "78912b7f-d5b3-443f-b43a-d5be09dc6d0a",
              "name": "created_utc",
              "type": "number",
              "value": "={{ $('Search for a post').item.json.created_utc }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    }
  ],
  "active": false,
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d9e8f083-638d-4c92-a575-c096c842b0c5",
  "connections": {
    "If": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Filter Replied Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Structure Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Map Output in Structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Check Baserow for duplicate post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Search for a post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structure Output": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search for a post": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Filter Replied Posts": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Map Output in Structure": {
      "main": [
        [
          {
            "node": "Add Post Details on Baserow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Add Post Details on Baserow": {
      "main": [
        [
          {
            "node": "Wait to avoid hitting api limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait to avoid hitting api limit": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Baserow for duplicate post": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "_metadata": {
    "name": "Auto-Comment on Reddit Posts with AI Brand Mentions & Baserow Tracking",
    "used_count": 0,
    "popularity_score": 25,
    "source_url": "https://n8n.io/workflows/7217",
    "scraped_at": "2025-08-17 19:32:06"
  }
}